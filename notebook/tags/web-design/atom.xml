<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Web Design | Aaron Gustafson]]></title>
  <link href="http://www.aaron-gustafson.com/notebook/tags/web-design/atom.xml" rel="self"/>
  <link href="http://www.aaron-gustafson.com/"/>
  <updated>2015-03-20T15:33:33-04:00</updated>
  <id>http://www.aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quantity Queries… Where Have You Been All My Life?]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/quantity-queries-where-have-you-been-all-my-life/"/>
    <updated>2015-03-20T11:00:03-04:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/quantity-queries-where-have-you-been-all-my-life</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.com/heydonworks">Heydon Pickering</a>’s <a href="http://alistapart.com/article/quantity-queries-for-css">Quantity Queries for CSS</a> is sheer brilliance and it’s so simple I’m surprised we hadn’t landed on the idea sooner.</p>

<!-- more -->


<p>We&rsquo;ve all experienced this feeling: <em>I have no idea how many modules will be in this block, but I would love to lay them out differently depending on that number.</em> Short of writing exhaustive CSS to (hopefully, optimistically) cover all of your bases, we had not figured out a good way to do this.</p>

<p>Heydon to the rescue!</p>

<p>Here’s Heydon’s first quantity query example:</p>

<p>{% gist eddda1f32ed102cedd86 equal.css %}</p>

<p>With these selectors, the rule set would only apply if the total count of list items was exactly 6. Here’s what he is selecting:</p>

<ol>
<li>A list item (<code>li</code>) that is 6th sibling in a group of list item siblings when counted backwards (<code>:nth-last-child(6)</code>), but only if it is also the first of those siblings (<code>:first-child</code>); and</li>
<li>Any list item (<code>li</code>) siblings that follow the one selected above (<code>~</code>).</li>
</ol>


<p>Brilliant! <a href="http://alistapart.com/article/quantity-queries-for-css#section4">Heydon breaks it down way more eloquently</a> (and with illustrated squid to boot). To use this in your own projects, simply swap the &ldquo;6&rdquo; for whatever count you are looking for it to be equal to.</p>

<p>But Heydon doesn’t stop there. He also gives us ways to test for  more than or equal to and fewer than or equal to a certain number. We’ll start with the <br/>
&ldquo;more than&rdquo; variant (because everyone always wants more):</p>

<p>{% gist eddda1f32ed102cedd86 more-than-or-equal.css %}</p>

<p>This one is slightly more complex, using the <code>nth-*</code> formula to manage the calculation. In English, this selects:</p>

<ol>
<li>A list item (<code>li</code>) which is the sixth, seventh, eighth, etc. sibling in a collection of list item siblings when counted backwards from the end of that collection (<code>:nth-last-child(n+6)</code>); and</li>
<li>Any list item (<code>li</code>) siblings that follow the one(s) selected above (<code>~</code>).</li>
</ol>


<p>The magic is in the formula: <em>n+6</em>.</p>

<p>The way <code>nth-*</code> formulae work is that the &ldquo;n&rdquo; portion is about dividing the siblings into smaller groups based on the <em>n</em> multiplier. So &ldquo;2n&rdquo; means for every group of 2, &ldquo;3n&rdquo; means for every group of 3, and so on. In Heydon’s case, &ldquo;n&rdquo; simply means for every group of 1. The <em>n</em> multiplier starts as zero (for the first group) and then becomes 1, 2, 3, etc. in succession.</p>

<p>The number added or subtracted from this number (&ldquo;+6&rdquo; in the example) can be though of as the item in the count. Most often we see this in use as &ldquo;2n+2&rdquo; which stands for the second sibling in every group of two. It’s usually common to see this number be smaller than the grouping number (&ldquo;3n+2&rdquo;, &ldquo;5n+3&rdquo;, etc.). In Heydon’s example, however there is no grouping, so that logic doesn’t really apply. Instead you can think of it as simply adding the multiplier to 6: 0+6 (6), 1+6 (7), 2+6 (8), etc.</p>

<p>Now count from the end and then select that and everything that follows and you get a &ldquo;more than or equal to&rdquo; count based on the number (6 in his case, but again you can swap it out). Brilliant!</p>

<p>The final example he gives is for fewer than or equal to a particular number:</p>

<p>{% gist eddda1f32ed102cedd86 fewer-than-or-equal.css %}</p>

<p>This one is largely the same as the &ldquo;more than&rdquo; example, but the multiplier is reversed (with the minus sign) which means the count runs backward: 0+6 (6), -1+5 (5), -2+6 (4), and so on.</p>

<p>I am just overjoyed with how brilliant this is. I can think of so many places to use it (and will likely be doing so quite soon).</p>

<h2>Bonus: Now with SASS</h2>

<p><a href="https://twitter.com/danielguillan">Daniel Guillan</a> has <a href="https://github.com/danielguillan/quantity-queries">ported this functionality (and more) to SASS</a> using a handful of really straightforward mixins. Here’s a demo:</p>

<p data-height="331" data-theme-id="0" data-slug-hash="GgBOxm" data-default-tab="result" data-user="danielguillan" class='codepen'>See the Pen <a href='http://codepen.io/danielguillan/pen/GgBOxm/'>Quantity Queries Sass mixins demo</a> by Daniel Guillan (<a href='http://codepen.io/danielguillan'>@danielguillan</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>Happy counting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lines in the Sand]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/lines-in-the-sand/"/>
    <updated>2015-03-11T09:21:29-04:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/lines-in-the-sand</id>
    <content type="html"><![CDATA[<p>A new site, <a href="http://breakupwithie8.com/">Break Up with Internet Explorer 8</a> by <a href="http://www.humaan.com/">Humaan</a>, has been making the rounds on the Interwebs of late. It’s cleverly done and an attractive site, but I don’t really agree with the premise:</p>

<blockquote><p>Join the intervention and stop supporting IE8. It&rsquo;s time for an upgrade.</p></blockquote>

<!-- more -->


<p>The reality is that some users don’t have control over the browsers installed on their computers and <a href="http://www.networkworld.com/article/2224510/microsoft-subnet/some-windows-xp-users-just-can-t-afford-to-upgrade.html">IE8 may be the best they can muster</a>. Most of us have had the luxury of moving on, but they haven’t. Does that mean we should banish those users from our sites by treating IE8 like that ex who just won’t take a hint? I don’t think so.</p>

<p>Instead, we should approach this problem rationally. Be the bigger person. Call it <a href="http://bradfrost.com/blog/mobile/support-vs-optimization/">support vs. optimization</a>, call it <a href="http://responsivenews.co.uk/post/18948466399/cutting-the-mustard">cutting the mustard</a>, call it what you will, but by understanding how browsers work, we can reduce our own development headaches and serve more users in the process. Yes, even when they use aging browsers like IE8 or IE7 or (gasp) IE6.</p>

<p>When it comes to HTML and CSS, browsers ignore what they don’t understand. It’s why you can use the <code>section</code> element and the content will still be exposed in Lynx. It’s also why you can use RGBa without IE6 collapsing. <a href="http://adaptivewebdesign.info/1st-edition/chapter-1.html#the-rise-of-tolerance">Fault tolerance is a really powerful tool</a> and is the foundation of progressive enhancement in HTML and CSS. (In JavaScript things are a little more complicated… we have to use <a href="http://learn.jquery.com/code-organization/feature-browser-detection/">feature detection</a>.)</p>

<p>A simple way to rid yourself of IE8 related headaches is to embrace the idea that <a href="http://dowebsitesneedtolookexactlythesameineverybrowser.com/">web pages don’t need to look (or behave) the same in every browser</a> and look for ways to achieve this while still providing access to your content and tools for less-capable browsers and devices. For example:</p>

<p>{% gist b9bca995a67ba298225d css-filter.html %}</p>

<p>This simple stylesheet setup will deliver only the <code>simple.css</code> file to browsers that are incapable of understanding media queries. Browsers that do understand them will get both stylesheets. Media queries support is an easy line in the sand we can draw because <a href="http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu/79">lack of media query support is in fact the first media query</a>.</p>

<p>Once you’ve done that, it’s as simple as putting all of your advanced styles in the <code>complex.css</code> file. No drama.</p>

<p>On the JavaScript end, you can draw a line in the sand too. Let’s say you don’t want to spend your time debugging JavaScript in IE8. You can just skip it using <a href="http://www.quirksmode.org/css/condcom.html">Conditional Comments</a>:</p>

<p>{% gist b9bca995a67ba298225d js-filter.html %}</p>

<p>Using an approach like this avoids delivering the contained JavaScript files to IE8 at all, but all other browsers will see them.</p>

<p>If that’s too drastic, use <a href="http://learn.jquery.com/code-organization/feature-browser-detection/">feature detection</a> in your JavaScript files to determine if it is safe to rely on a particular method or capability. Program defensively.</p>

<p>Honestly, I’ve found that approaches like these lead to fewer grey hairs and a lower overall stress level. They make me a happier developer and let me concentrate on building for the future rather than worrying about the past.</p>

<p>But it’s not about breaking up with IE8, it’s about having a realistic and honest relationship with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bidding Farewell to Shirley the Goat]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/bidding-farewell-to-shirley-the-goat/"/>
    <updated>2015-03-09T09:35:42-04:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/bidding-farewell-to-shirley-the-goat</id>
    <content type="html"><![CDATA[<p><figure id="fig-2015-03-09-02" class="media-container media-container--right"></p>

<pre><code>&lt;img src="http://cdn.webstandardssherpa.com/c/i/logo.png" alt="The Web Standards Sherpa logo, by Dan Cederholm"&gt;
</code></pre>

<p></figure></p>

<p>It is with a heavy heart that I announce that we are closing <a href="http://webstandardssherpa.com/"><em>Web Standards Sherpa</em></a>. As of April 2, we will be archiving the site in order to keep the valuable insights and techniques shared by our authors available in perpetuity.</p>

<!-- more -->


<p>I am sure I speak for <a href="http://webstandardssherpa.com/about/#staff">our staff and authors</a> when I say this has been a wonderful experience and we are incredibly proud of the work we have done. The <a href="http://webstandardssherpa.com/reviews/">reviews and articles we’ve written</a> and <a href="http://webstandardssherpa.com/ask-the-sherpas/">the questions we’ve answered</a> have provided web designers and developers around the world with relevant, actionable information to help them do their jobs better. And I have no doubt that our readers have helped make the Web better by improving the quality of the products our industry produces.</p>

<p>As one last hurrah—and as a way to raise some funds to pay for the site’s archival &amp; internment—we are collaborating with <a href="http://environmentsforhumans.com/">Environments for Humans</a> to put on <a href="http://environmentsforhumans.com/2015/web-sherpa-summit/">a one-day live virtual conference</a> featuring a handful of our writers and staff giving talks and answering your questions.</p>

<p><figure id="fig-2015-03-09-02" class="media-container media-container--right"></p>

<pre><code>&lt;img src="http://webstandardssherpa.com/i/shirley-large.png" alt="Shirley the Goat, the mascot of Web Standards Sherpa."&gt;
</code></pre>

<p></figure></p>

<p>I am very thankful to <a href="http://webstandardssherpa.com/about/#staff">all of our staff and authors</a> and to you, our readers, for making <em>Web Standards Sherpa</em> such a fun and rewarding endeavor! It was a great run and I count myself lucky to have had a small hand in the creation of so much great content.</p>

<p>You can find all of the details regarding the conference <a href="http://environmentsforhumans.com/2015/web-sherpa-summit/">over on the Environments for Humans website</a>. I hope you’ll consider attending so we can ensure <em>Web Standards Sherpa</em>’s excellent content will remain available for years to come. Use the discount code SHERPA to save 20% off of the ticket price.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who Should Pay 2: The Hosting]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/who-should-pay-2-the-hosting/"/>
    <updated>2015-03-06T08:39:15-05:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/who-should-pay-2-the-hosting</id>
    <content type="html"><![CDATA[<p>Two weeks ago, I argued that our <a href="http://aaron-gustafson.com/notebook/who-should-pay/">users should never foot the bill for developer convenience</a> and yesterday I stumbled on a post from EllisLab (the makers of ExpressionEngine) that echoes that sentiment, but from a different angle. The title might make you scratch your head: <a href="https://ellislab.com/blog/entry/save-thousands-of-dollars-by-paying-more-for-hosting">Save Thousands of Dollars by Paying More for Hosting</a>.</p>

<!-- more -->


<p>While it sounds counterintuitive, EllisLab’s statement makes sense. It’s all about shifting your perspective from agonizing over every hard cost on the balance sheet to thinking “big picture” about how you are spending your money overall.</p>

<p>Their post makes the case that a low-cost hosting may be cheaper on the surface, but its slow performance will end up costing you more in terms of productivity loss and/or actual billable hours. The comparison they use is modest, but with a big impact: GoDaddy at $59.88/year vs. Nexcess at $8.95/month (still inexpensive, but roughly 2x the cost).</p>

<blockquote><p>Normally, the ExpressionEngine control panel is fast. Zippy even. There aren’t many pages in the control panel that should have an execution time of more than a second. Most pages take a fraction of a second, no fancy caching needed. It’s common to see this in the footer: &ldquo;Script executed in 0.0706 seconds.&rdquo; Sure, add-ons that are bad citizens can slow down the control panel, but typically not to the degree a bad host can.</p>

<p>How about ten seconds per page? No joke, on a recent site we logged in to on GoDaddy, one of the faster pages in the Admin area took ten seconds. The Template Manager took fifteen seconds, the publish page twenty-plus. I felt terrible for the developer and client who were using this site daily. Not only were they having a terrible experience with our software, they were <em>losing money</em> and didn’t even know it.</p></blockquote>

<p>The post then proceeds to work through some estimations of normal workload in the CMS to determine how much money is quietly being drained from a project’s kitty because of a poor hosting decision. I won’t lie, it’s substantial.</p>

<p>Now the EllisLab post is focused more on agency and project costs, but the implications of a slow host extend to our end users too.</p>

<p>Sure, a slow host will delay the delivery of our content and <a href="http://www.nytimes.com/2012/03/01/technology/impatient-web-users-flee-slow-loading-sites.html?pagewanted=all&amp;_r=0">increase the likelihood they will go to a competitor</a>. That’s a given. But a slow host can also drain a mobile device’s battery (because the radio must be kept on longer), which reduces the usefulness of their device.</p>

<p>Slow servers are also incredibly frustrating for users and are inconsiderate of their time. This is one of the points I was harping on in my post: we should not value our time above our customers’ time. When we put our customers’ needs above our own, we make better products and (ultimately) better decisions for our businesses.</p>

<p>Long story short: Shop around for a good price on a speedy server. Your developers, content creators, and (most importantly) your customers will thank you for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple, Business, and Standards]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/apple-business-and-standards/"/>
    <updated>2015-02-26T10:44:40-05:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/apple-business-and-standards</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.codeandcreativity.com/events/2015-02-24">Tuesday night’s Code &amp; Creativity</a>, digital governance expert <a href="https://twitter.com/lwelchman">Lisa Welchman</a> equated digital projects to an atom. Content, IA, project management, networking, graphic design, application development, performance, and other concerns are flying this way and that like electrons—a swirling mass of energy and velocity. What holds this chaos together and keeps the electrons from flying off in all directions is the magnetic pull of protons in the nucleus of the atom.</p>

<!-- more -->


<p><figure id="fig-2015-02-26-01" class="media-container"></p>

<pre><code>&lt;img src="http://www.aaron-gustafson.com/i/posts/2015-02-26/atom-sm.jpg"
     srcset="/i/posts/2015-02-26/atom-lg.jpg 800w, /i/posts/2015-02-26/atom-sm.jpg 320w"
     alt="A slide from Lisa Welchman’s talk showing Web Standards and KPI at the center of the project “atom”."
     &gt;
</code></pre>

<p></figure></p>

<p>In Lisa’s analogy, the protons of a digital project are Web standards and Key Performance Indicators (KPIs). She believes that without these key ingredients, projects will often career out of control. Her reasoning? We all need to know how we should be doing things in order to work together well (Web standards) and we need to know what our expectations are for the project to be successful (KPI).</p>

<p>This really resonated with me. Mainly, it resonated because I am a Web standards guy, but I also believe in the importance of standards across the board. I think projects need copywriting standards, design standards, performance standards, coding standards, and many other kinds of standards as well. Standards hold a project together. For real.</p>

<p>That’s why <em>Web</em> standards are so important.</p>

<p>Without standards, the Web was <a href="http://en.wikipedia.org/wiki/Browser_wars">an unruly mass of spaghetti code</a>.  I started working on the Web in 1996. I know, I lived it.</p>

<p>We used to deliver separate browser-specific JavaScript and CSS files to different User Agents. Our HTML code had to be 3-4 times as hefty to support all of the various ways browsers had decided to implement the same features. It was horrible and made building anything remotely interesting a truly painful endeavor.</p>

<p>Then browser makers got together to codify HTML into a generally agreed-upon set of elements and attributes that would allow authors like me to write pages that would Just Work™. That work extended into CSS, and so on, and so forth. I can’t thank them enough for doing that.</p>

<p>Tuesday also saw the W3C officially make <a href="http://www.w3.org/TR/pointerevents/">Pointer Events</a> a recommendation. I’d always liked the idea of Pointer Events because it abstracts the traditional concept of a click into a generic interaction that could be triggered by a mouse, a finger, a pen, an eye movement, or any other interaction method we come up with in the future. Sure, I work for Microsoft now—they proposed this idea—but that isn’t the reason I like the concept. I like it because it doesn’t tie us down to a single way of interacting with Web content that necessitates the creation of new specs when new interaction methods are invented. It’s future friendly and embraces the &ldquo;continuum of experience&rdquo; I evangelize incessantly.</p>

<p>When Pointer Events were first proposed, there was a lot of support behind them. Obviously Microsoft was on board, but Mozilla was too. And Google was all about Pointer Events for a while and was already using them when <a href="https://code.google.com/p/chromium/issues/detail?id=162757#c64">they did an abrupt  about-face and decided they were ripping them out of Blink in favor of overhauling Touch Events</a> (which Apple supports and which Pointer Events were intended to supersede).</p>

<p>And so now we have a recommendation from the W3C that browsers implement Pointer Events. <a href="http://blog.jquery.com/2015/02/24/getting-on-point/">Developers want them</a> and it seems Apple doesn’t. And because Apple doesn’t want them, Google doesn’t want them now either. To quote Rick Byers (of Google) in <a href="https://lists.w3.org/Archives/Public/public-pointer-events/2014JulSep/0071">a Pointer Events meeting in late 2014</a>:</p>

<blockquote><p>No argument that PE is more elegant. If we had a path to universal input that all supported, we would be great with that, but not all browsers will support PE. If we had Apple on board with PE, we&rsquo;d still be on board too. The equation has shifted for us.</p></blockquote>

<p>So, effectively, Apple is holding the Web back. <a href="https://twitter.com/tkadlec">Tim Kadlec</a> wrote <a href="http://timkadlec.com/2015/02/apples-web/">a great piece discussing the core issue at play here</a>:</p>

<blockquote><p>Let’s set any opinions about Pointer Events aside. Frankly, I need to do a <em>lot</em> more digging here before I have any sort of strong opinion in one direction or another. There is a bigger issue here. We have a recurring situation where all vendors (save for Apple) show interest in standard, but because Apple does not express that same interest, the standard gets waylaid.</p></blockquote>

<p><figure id="fig-2015-02-25-02" class="media-container media-container--right"></p>

<pre><code>&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/200px-Yin_yang.svg.png"
     srcset="http://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/800px-Yin_yang.svg.png 800w, http://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/400px-Yin_yang.svg.png 400w, http://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/200px-Yin_yang.svg.png 200w"
     alt="Yin and yang."
     &gt;
</code></pre>

<p></figure></p>

<p>This whole thing has caused quite a kerfuffle in the Web community. Obviously, some people are demonizing Apple (and, by proxy, Google) for holding us back. Others are quick to excuse Apple because of their history of pushing the Web forward (see CSS transitions, animations, etc.).<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Personally, I don’t think anything is ever truly black and white. Every company does some good things and some bad things. To channel Lisa Welshman again, it’s like yin and yang: The light has a little bit of the dark in it, and the dark has a little bit of the light in it.</p>

<p>Generally, I’ve found that Apple tends to do what is best for Apple, without considering how it affects designers, developers, or the Open Web. On this issue however, I just haven’t figured out their angle yet.</p>

<p>Some of their past decisions have offered a clear view into their motivations. Take offline for instance. Apple supports the <a href="http://www.w3.org/TR/html5/browsers.html#offline">Application Cache API</a> (as <a href="http://caniuse.com/#feat=offline-apps">most modern browsers do</a>), but there’s a catch: You can’t store audio files in the cache. That makes it nearly impossible to build a decent game in HTML because you won’t get sound effects if you aren’t connected to the Web. But for Apple it makes perfect sense: They sell games in the App Store.</p>

<p>Their motivations behind other decisions are more murky, however. For example, Safari implements the <a href="https://html.spec.whatwg.org/multipage/forms.html#client-side-form-validation">HTML5 Form Validation API</a>, which means it knows if a field is valid or invalid. The catch? It won’t halt the submission of an invalid form. <a href="http://caniuse.com/#search=form%20validation">Every other modern browser acts as you’d expect.</a><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> I don’t get it. I used to think/hope they just had not figured out how they wanted to handle notifying the user of the error, but it’s been like this for about 5 years.</p>

<p>I’ll let Tim jump in again here:</p>

<blockquote><p>Apple has a very, very strong influence over what standards get adopted and what standards do not. Partly it’s market share, partly it’s developer bias (see, for example, how other vendors eventually felt forced to start supporting the <code>webkit</code> prefix due to vendor prefix abuse).</p>

<p>Apple simply does not play well with other vendors when it comes to standardization. The same sort of things we once criticized Microsoft for doing long ago, we give Apple a pass on today. They’re very content to play in their own little sandbox all too often.</p></blockquote>

<p>He’s channeling <a href="https://adactio.com/journal/5442/#comment438">a bit of Remy Sharp there</a> (circa 2012):</p>

<blockquote><p>When are we, as a web development community, going to stop giving Apple a free fucking pass?</p>

<p>They’re consistently lacking in the open discussion in to improving the gateway to the web: the browser. Sure, they landed an impressive mobile browsing experience back when the iPhone launched and it’s a great device, but there’s some serious questioning about whether they’re purposely cock-blocking web development and purposely hindering our advancement as a web industry.</p>

<p>WebGL is in mobile Safari, yet only available if accessed via a WebView object, not the real Safari (which is a WebView anyway…). It was recently discovered that they moved all web data storage (Web Storage, Appcache, etc) in a temporary data store meaning that it can be wiped at any time without warning.</p>

<p>Even the mighty PPK who tells entire browser vendors “fuck you”, doesn’t call Apple out, allowing them to slither on.</p>

<p>Why is it we continue to allow Apple to get away with it? And can this ever change?</p></blockquote>

<p>As Tim points out, Apple certainly isn’t the only company that plays games when it comes to standards:</p>

<blockquote><p>The other vendors aren’t exactly perfect either. The Microsoft folks, no doubt reeling from all the negativity aimed at them over the years, have more than once been content to let everyone else duke it out over a standard, only getting involved late when a consensus has been reached. The Blink folks, despite being the best positioned to take a stand, have been happy to play the “Apple won’t do it so I guess we won’t either” card on multiple occasions.</p></blockquote>

<p>But he’s also quick to highlight the disappointing reality about Apple with respect to the other browser vendors:</p>

<blockquote><p>It’s easy to reach the Mozilla, Google and Microsoft folks to discuss their thoughts on these emerging standards. That’s a much harder thing to do with the Apple crew.</p></blockquote>

<p>Apple is very much a black box and their processes are incredibly opaque. Now I’m no hater, I use their products daily.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, but I am also not an apologist. I think relationships are improved with honesty and openness. I honestly wish Apple’s processes—at least when it comes to the Web—were more open.<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> Heck, they often don’t even show up to meetings at the W3C. If we knew what they were thinking or why they were doing things, we could at least understand where they were coming from rather than having to speculate about their motivations. Whether we agree or not is irrelevant.</p>

<p>Regardless, we are where we are and I can’t help but wonder one thing: <em>If we stop giving Apple a free pass and continue marching forward without them, will they eventually be forced to scramble to catch up like Microsoft did when IE6 sat on the shelf for so long?</em> I don’t know what the answer is, but I sincerely hope they come around and begin to treat the Web with the respect it deserves before that happens.</p>

<p>When browsers refuse to implement Web standards, we all lose. And we take one step closer to the swirling pit of chaos and spaghetti code we thought we’d put behind us.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>All of which were (in true Apple style) developed in secret and then bestowed upon the world in a grand spectacle.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Ok, Opera Mini doesn’t, but Opera Mini is also a different sort of browser. It is a proxy browser and the proxy handles all of the back and forth between the browser and the website’s origin server(s).<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>I am composing this post on a Mac… provided by Microsoft. Yes, you read that correctly.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>I have felt the same way about Microsoft for years because I knew the great work they were doing behind the curtains. Part of the reason <a href="/notebook/ch-ch-ch-changes/">I joined them earlier this month</a> was because they have been opening up and I want to encourage and nurture that.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
