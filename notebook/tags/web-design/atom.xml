<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Web Design | Aaron Gustafson]]></title>
  <link href="http://aaron-gustafson.com/notebook/tags/web-design/atom.xml" rel="self"/>
  <link href="http://aaron-gustafson.com/"/>
  <updated>2014-12-18T17:50:54-05:00</updated>
  <id>http://aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visualizing CSS3 Transformations]]></title>
    <link href="http://aaron-gustafson.com/notebook/visualizing-css3-transformations/"/>
    <updated>2014-12-18T16:53:18-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/visualizing-css3-transformations</id>
    <content type="html"><![CDATA[<p>It’s pretty amazing what you can do with <a href="http://dev.w3.org/csswg/css-transforms">CSS3 transforms</a> these days, but I often struggle with explaining the importance of function order when I am training people on how to use them. Transformation functions are a visual thing, so they require a visual tool to fully understand them and the implications of your function order decisions.</p>

<!-- more -->


<p>To address this need, I put together <a href="http://codepen.io/aarongustafson/full/jEryLV/">a tool that dissects CSS3 transforms</a> so the transform process would be more clear for my students. I decided to throw it up on Codepen so you could learn from it as well. Why don’t you open that link and I’ll explain how it works. (Obviously, you’ll need to be in <a href="http://caniuse.com/#feat=transforms2d">a browser that supports transforms</a> for the tool to be useful to you.)</p>

<p>The tool starts you off with a simple three-function <code>transform</code> that includes both <code>translate</code> and <code>rotate</code> functions. If you hit the &ldquo;Show Me&rdquo; button, the browser will draw a box and step you through the application of the <code>transform</code> functions, one by one, animating their application so it’s easy to follow. This makes it pretty clear why an element ends up where it does.</p>

<p>Beside the &ldquo;Show Me&rdquo; button is the &ldquo;Rearrange&rdquo; button. It does exactly what you’d think: It rearranges the functions into a new, random order. If you press it and then press &ldquo;Show Me&rdquo; again, you can see if (and why) the element ends up in a different place. The original box remains ghosted out so you can see any differences.</p>

<p>Here’s a video of me playing around with the default <code>transform</code> stack:</p>

<p>
<figure id="fig-114921831" class="media-container media-container--vimeo">
<div class="ratio-16-9 embed-video-container" onclick="var myAnchor = document.getElementById('114921831');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;//player.vimeo.com/video/114921831?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="Click here to play “@title”">
<a class="vimeo-lazy-link" style="width:100%;height:100%;background:#000 url(http://i.vimeocdn.com/video/500772734_1280.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=114921831" id="114921831" onclick="return false;">
<div class="vimeo-lazy-link-div"></div>
<div class="vimeo-lazy-link-info">Dissecting CSS3 Transforms</div>
</a>
<div class="video-info" >This is a walkthrough of using a simple tool for dissecting CSS3 transforms and it demonstrates why the order of your transformation functions matters.

Tool: http://codepen.io/aarongustafson/full/jEryLV/</div>
</div>
</figure>

</p>

<p>Have a play and let me know your thoughts. I hope you find this tool as helpful as I (and my students) have.</p>

<p>Link: <a href="http://codepen.io/aarongustafson/full/jEryLV/">Visualizing CSS Transforms</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Indecisiveness and URLs]]></title>
    <link href="http://aaron-gustafson.com/notebook/indecisiveness-and-urls/"/>
    <updated>2014-12-16T10:23:15-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/indecisiveness-and-urls</id>
    <content type="html"><![CDATA[<p>If you know me, you know I am a pretty indecisive guy. It is not uncommon for <a href="https://twitter.com/shirleytemper">Kelly</a> and I to spend 15 minutes or more just trying to figure out where we want to grab a meal.</p>

<!-- more -->


<p>What I’m trying to say (or rather excuse) is that I have been struggling with some of my initial decisions with respect to URLs on this site and finally decided to make some changes before too many links to its content get out there. I was a bit reluctant to do so as we all know <a href="http://www.w3.org/Provider/Style/URI.html">what Sir Tim Berners-Lee says</a></p>

<blockquote><p>Cool URIs don’t change.</p></blockquote>

<p>Well, consider me uncool as I decided to change some things around here:</p>

<ol>
<li>I dropped the year indicator from blog post URLs. I realized that the likelihood of me having two posts with the same name was pretty much nil, so it was unnecessary to disambiguate like that. Plus it would save me from having to create the annual archives I would feel compelled to make in order to justify the “2014” directory in the URL.</li>
<li>I consolidated my book and article pages to <a href="/publications">a single page or publications</a>. I thought it might be nice to maintain them separately, but in retrospect that seems unnecessarily complicated.</li>
<li>I changed the URL to my speaking engagements from “events” to “speaking-engagements” as it just made more sense.</li>
</ol>


<p>On the off chance you ever consider changing URLs on a Jekyll or Octopress site, I thought I’d share my process.</p>

<h2>Redirecting Old Links</h2>

<p>I was quite concerned concerned about old links being broken in this site. It’s just not a good thing to do.</p>

<p>In a traditional hosting scenario, I could use <code>.htaccess</code> to set up <a href="https://en.wikipedia.org/wiki/HTTP_302">302 redirects</a>, but I am hosting on Github so that isn’t an option. On top of that, this site is built using Octopress (and Jekyll), so there is no dynamic system in place to programmatically manage those redirects.</p>

<p>Thankfully, there is <a href="https://github.com/jekyll/jekyll-redirect-from">a plugin for Jekyll to manage redirects</a>. With it, you can redirect from an an existing page in the YAML front matter using the <code>redirect_to</code> key or you can use the <code>redirect_from</code> key in the YAML front matter on the destination page. I ended up using the former for old pages (articles, books, and events), and the latter for blog posts.</p>

<p>The plugin covers all the bases. It generates pages at the old URLs that redirect using the good old <code>meta</code> refresh, a JavaScript redirect, and a fallback link just in case neither of those work. Oh, and it sets the new URL as the <a href="https://support.google.com/webmasters/answer/139066?hl=en">canonical reference</a> to boot.</p>

<p>Done and done.</p>

<h2>Keeping Webmentions</h2>

<p>As I mentioned a few weeks back, I wrote <a href="/notebook/enabling-webmentions-in-jekyll/">a Jekyll plugin to enable webmentions</a>. As web mentions are tied to the “mentioned” URL, changing a post’s URL was going to cause me to lose any previous webmentions. I didn’t like that idea, so <a href="https://github.com/aaronpk/webmention.io/issues/31">I talked to Aaron about adding multiple URL support to the webmention.io API</a> and he agreed it was a good idea.</p>

<p>The feature landed late last week and I adjusted <a href="https://github.com/aarongustafson/jekyll-webmention_io">my Jekyll Webmention.io plugin</a> to allow you to supply multiple URLs. While I was at it, I did some other upgrades: I added caching, downloading of webmention titles if the API didn’t supply one, and a test for the existence of avatars before inserting them (so you don’t end up with missing images).</p>

<p>If you were using the plugin, I definitely recommend upgrading as it performs a lot better now. I also added <a href="https://github.com/aarongustafson/jekyll-webmention_io/blob/master/webmention.Rakefile">a Rake task for sending webmentions</a> which is super handy.</p>

<h2>Pardon My Dust</h2>

<p>I apologize for changing URLs on you, but I am hopeful this will be the last major change on the site. As it (currently) says at the top, <a href="/notebook/a-grand-experiment/">this is an open redesign</a>, so there are bound to be a few bumps here and there. That said, I will try to keep them to a minimum in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adaptive Images in ExpressionEngine With CE Image]]></title>
    <link href="http://aaron-gustafson.com/notebook/adaptive-images-in-expressionengine-with-ce-image/"/>
    <updated>2014-11-21T18:18:23-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/adaptive-images-in-expressionengine-with-ce-image</id>
    <content type="html"><![CDATA[<p>One of the biggest headaches of responsive design has been dealing with images. Thankfully our work on the <a href="http://ricg.io">Responsive <del>Images</del> <ins>Issues</ins> Community Group</a> has resulted in a rock-solid set of elements and attributes to address all of your adaptive image needs. My company, <a href="http://easy-designs.net">Easy Designs</a>, recently redesigned <a href="http://www.nichols.edu">Nichols College’s website</a> and that project just happened to coincide adaptive images landing in <a href="http://www.chromium.org/blink">Blink</a> (the rendering engine that powers Chrome and Opera). Naturally, we jumped at the opportunity to use them.</p>

<!-- more -->


<p>Most Nichols College sites run on <a href="http://ellislabs.com/expressionengine">EllisLab’s ExpressionEngine</a>, a solid little workhorse of a CMS we’ve been using for years. We love it because it gives us complete control over the markup it generates. Now EE offers some pretty decent file management and image manipulation utilities out of the box, but the options it provides were not enough to handle our adaptive image needs; we needed backup. <a href="http://www.causingeffect.com/software/expressionengine/ce-image">Causing Effect’s CE Image</a> add-on is reasonably priced and offered exactly the functionality we needed to make our adaptive image dreams a reality.</p>

<p>I won’t bore you with how to set up CE Image as there is <a href="http://www.causingeffect.com/software/expressionengine/ce-image/user-guide">documentation on that</a>, but I will walk you through two different responsive image use-cases we had and how we addressed them using this add-on.</p>

<h2>Header images</h2>

<p>The first use case we had was a series of large, focal images. You can find different examples of them on <a href="http://www.nichols.edu">the homepage</a> and landing pages (like <a href="http://www.nichols.edu/admissions/">this one for Admissions</a>). The first pass on making these images adaptive involved the <code>picture</code> element for which <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#adaptive-images">the spec</a> is known. The markup we were generating was based on the pattern outlined for <a href="http://scottjehl.github.io/picturefill/">Picturefill</a>, a JavaScript polyfill that implements adaptive images in browsers that don’t do it natively:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-result.html'></script>
<noscript><pre><code>&lt;picture class=&quot;page__image-header__photo&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;video style=&quot;display: none;&quot;&gt;&lt;![endif]--&gt;
    &lt;source srcset=&quot;about_940_343_int_s_c1_full.jpg&quot; media=&quot;(min-width: 40em)&quot;&gt;
    &lt;source srcset=&quot;about_800_350_int_c1_medium.jpg&quot; media=&quot;(min-width: 20em)&quot;&gt;
    &lt;source srcset=&quot;about_480_350_int_c1_small.jpg&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;/video&gt;&lt;![endif]--&gt;
    &lt;script&gt;
      document.write(&#39;&lt;img src=&quot;&quot; srcset=&quot;{made}&quot; alt=&quot;&quot;&gt;&#39;);
    &lt;/script&gt;
    &lt;noscript&gt;
        &lt;p class=&quot;noscript-picture&quot;&gt;&lt;img src=&quot;{made}&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;/noscript&gt;
&lt;/picture&gt;</code></pre></noscript></div>
</p>

<p>To get to that point, however, we needed to use CE Image to generate (and cache) the specific sizes we needed:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-element.html'></script>
<noscript><pre><code>&lt;picture class=&quot;page__image-header__photo&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;video style=&quot;display: none;&quot;&gt;&lt;![endif]--&gt;
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_full&quot;
        width=&quot;940&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 40em)&quot;&gt;
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_medium&quot;
        width=&quot;800&quot;
        height=&quot;600&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 20em)&quot;&gt;
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_small&quot;
        width=&quot;480&quot;
        height=&quot;360&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot;&gt;
        &lt;!--[if IE 9]&gt;&lt;/video&gt;&lt;![endif]--&gt;
        &lt;script&gt;
            document.write(&#39;&lt;img src=&quot;&quot; srcset=&quot;{made}&quot; alt=&quot;&quot;&gt;&#39;);
        &lt;/script&gt;
        &lt;noscript&gt;
            &lt;p class=&quot;noscript-picture&quot;&gt;&lt;img src=&quot;{made}&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;/noscript&gt;
    {/exp:ce_img:pair}
&lt;/picture&gt;
</code></pre></noscript></div>
</p>

<p>Not what’s a lot of code, so let’s just look at one segment of that jumble:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-excerpt.html'></script>
<noscript><pre><code>{exp:ce_img:pair
    src=&quot;{content_focal_image}&quot;
    filename_suffix=&quot;_full&quot;
    width=&quot;940&quot;
    allow_scale_larger=&quot;yes&quot;
    crop=&quot;yes&quot;
    interlace=&quot;yes&quot;
    cache_dir=&quot;/&quot;
    }
    &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 40em)&quot;&gt;
{/exp:ce_img:pair}</code></pre></noscript></div>
</p>

<p>This is an example using CE Image’s tag pair option, which lets you control the markup output. In the opening tag, we set several properties:</p>

<ul>
<li><code>src</code> is the path to the original image uploaded by content authors;</li>
<li><code>filename_suffix</code> is the suffix we want added to the cached file to differentiate it from others in the cache (and make the files more easily scannable);</li>
<li><code>width</code> is our desired output width for the generated image;</li>
<li><code>allow_scale_larger</code> does exactly what you’d expect: it dictates whether or not CE Image should scale the image to reach the desired width;</li>
<li><code>crop</code> tells CE Image whether it’s okay to crop the image;</li>
<li><code>interlace</code> tells CE Image to use image interlacing (which can speed load time); and</li>
<li><code>cache_dir</code> tells CE Image where to store the cached image (in relation to our global configuration)</li>
</ul>


<p>Then, within the tag pair is the <code>source</code> element with the <code>srcset</code> value set to the path to the file CE Image generated (referenced by the <code>made</code> variable) and the associated media query.</p>

<p>Multiply that a few times for the different sizes and you have the full <code>picture</code> element.</p>

<p>Now that’s all well and good, but shortly after launch, <a href="http://ericportis.com/">Eric Portis</a> wrote <a href="http://ericportis.com/posts/2014/srcset-sizes/">an amazing post explaining how the <code>srcset</code> and <code>sizes</code> attributes operate</a> and it cleared up a lot of my confusion on the matter. He convinced me that the age-old <code>img</code> element, with these new attributes, would be far more maintainable. With a fire in my belly, I rewrote the markup:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=simple-resize.html'></script>
<noscript><pre><code>&lt;img class=&quot;page__image-header__photo&quot; alt=&quot;&quot;
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_small&quot;
        width=&quot;480&quot;
        height=&quot;320&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        } 
        src=&quot;{made}&quot;
        srcset=&quot;{made} 480w,
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_medium&quot;
        width=&quot;800&quot;
        height=&quot;600&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        {made} 800w,
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_full&quot;
        width=&quot;940&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        {made} 940w&quot;
    {/exp:ce_img:pair}
    &gt;</code></pre></noscript></div>
</p>

<p>The CE Image behavior is exactly the same, but the resulting markup is much clearer:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=srcset-result.html'></script>
<noscript><pre><code>&lt;img class=&quot;page__image-header__photo&quot; alt=&quot;&quot;
     src=&quot;about_480_320_int_c1_small.jpg&quot;
     srcset=&quot;about_480_320_int_c1_small.jpg 480w,
             about_800_350_int_c1_medium.jpg 800w,
             about_940_343_int_s_c1_full.jpg 940w&quot;&gt;</code></pre></noscript></div>
</p>

<p>The added bonus of this approach is that I am not hard-coding any media queries and the browser gets to make the ultimate decision of which image to request. All I am doing is telling the browser the image options and their respective widths within the <code>srcset</code> attribute. As all of the images take up 100% of their containers, I didn’t even need to use the <code>sizes</code> attribute. Easy peasy.</p>

<h2>&ldquo;Nice to Have&rdquo; Images</h2>

<p>Not every image adds something to the page. Some are purely optional, a visual enhancement. In order to reduce the size of pages on smaller screens, we often choose to &ldquo;lazy load&rdquo; certain image assets after page load, when we know there is enough room to display the image or when we feel it would be an enhancement to the design.</p>

<p>Now some of you might be wondering: <em>Why not just <code>display:none</code> below a certain threshold?</em> Well, I’ll tell you: images that are hidden with CSS are still requested by the browser. That means users who don’t see the images are still paying to download them (whether in terms of time waiting for the page to render or actual money on a metered connection). That kinda sucks for them. We should show our users a bit more respect and only request the images when we need them.</p>

<p>We wrote <a href="https://github.com/easy-designs/easy-lazy-images.js">a lazy-loading image script</a> a few years back and have battle tested it on numerous sites to great success. It’s all based on a simple markup pattern:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-markup.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
     data-image-src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;&gt;&lt;/div&gt;</code></pre></noscript></div>
</p>

<p>The <code>data-img-src</code> attribute defines the path to the &ldquo;nice to have&rdquo; image and then the JavaScript adds the image element into the page when the appropriate conditions are met:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-result.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
    data-image-src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;
    data-image-loaded=&quot;&quot;
    &gt;
    &lt;img alt=&quot;&quot; src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;&gt;
&lt;/div&gt;</code></pre></noscript></div>
</p>

<p>Pretty simple. It even supports <code>srcset</code>:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-srcset.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
     data-image=&quot;about_480_320_int_c1_small.jpg&quot;
     data-image-srcset=&quot;about_480_320_int_c1_small.jpg 480w,
                      about_800_350_int_c1_medium.jpg 800w,
                      about_940_343_int_s_c1_full.jpg 940w&quot;&gt;&lt;/div&gt;</code></pre></noscript></div>
</p>

<p>The <a href="https://github.com/easy-designs/easy-lazy-images.js#usage">full documentation is up on Github</a>.</p>

<p>Implementing this in the context of CE Image was a breeze and builds on the <code>source</code> pattern I showed earlier:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loading.html'></script>
<noscript><pre><code>{if testimonial_photo}
    {exp:ce_img:pair
        src=&quot;{testimonial_photo}&quot;
        width=&quot;223&quot;
        height=&quot;140&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;div class=&quot;module__image image--lazy&quot; data-image-src=&quot;{made}&quot;&gt;&lt;/div&gt;
    {/exp:ce_img:pair}
{/if}</code></pre></noscript></div>
</p>

<p>We are only just beginning to scratch the surface of what’s possible with adaptive images and I am sure we will come up with newer, better ways to do this stuff. Heck, there may even be an adaptive images add-on in the pipeline for ExpressionEngine. But, in the meantime, if you are trying to implement adaptive images with ExpressionEngine, CE Image is a good way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling Webmentions in Jekyll]]></title>
    <link href="http://aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll/"/>
    <updated>2014-11-18T17:01:08-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll</id>
    <content type="html"><![CDATA[<p>While I am really happy with my choice to move away from a dynamic website/blog to a static one—powered by <a href="http://octopress.org/">Octopress</a>, hosted for free on <a href="https://github.com">Github</a>—it’s been pretty limiting when it comes to integrating comments and other more necessarily dynamic components.</p>

<!-- more -->


<p>Like many folks in the Octopress/Jekyll community, I’ve opted to use <a href="https://disqus.com/websites/">Disqus’ free service to manage comments</a>, but I’m not in love with it. First of all, it requires JavaScript. You know <a href="/notebook/2014/a-fundamental-disconnect/">my stance on that</a>. Now I’m willing to accept comments as an <a href="https://en.wikipedia.org/wiki/Progressive_enhancement">enhancement</a> to the reading process, but it doesn’t mean I like the situation. Secondly, they control the content and if they go away, so do all of your comments.</p>

<p>I’ve become quite intrigued by the potential of <a href="http://indiewebcamp.com/webmention">webmentions</a> as a way of taking back control of our content. They are a brilliant way to loosely connect related posts on personal blogs and third-parties like Twitter, Facebook, and Google+. With my mind unable to think about anything else, I decided to see what it would take to get webmentions up and running here.</p>

<p>At first I went to <a href="http://aaronparecki.com/">Aaron Parecki</a>’s <a href="http://webmention.io">webmention.io</a> project and looked through <a href="https://github.com/aaronpk/webmention.io/blob/master/README.md">the docs</a>. It looked like it could fit the bill, but I noticed there was no way to directly apply for an account, so I moved on to <a href="http://voxpelli.com/">Pelle Wessman</a>’s <a href="https://webmention.herokuapp.com/">webmention Heroku app</a>.</p>

<p>I really like Pelle’s solution and easily implemented it locally, but the JavaScript reliance was nagging at me. I returned to webmention.io and decided to <a href="https://twitter.com/aarongustafson/status/534394789152948224">reach out to Aaron</a> on the off change he’d give me access to his service. <a href="https://twitter.com/aaronpk/status/534398408815964160">He responded pretty quickly</a> and I was off to the races.</p>

<p>In preparation for building my plugin, I looked over a few other Jekyll plugins (Octopress is built on Jekyll) and got a sense of the structure and how to go about creating a <a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Programmers#create-your-own-tags">Liquid tag</a> (Liquid being the default templating language used by Jekyll). Then I created a new Ruby file and got cracking. Now I’ll warn you, I don’t normally write Ruby. The last time I did it professionally was when <a href="https://github.com/rails/rails/tree/v0.12.0">Rails was at 0.12</a>, so that should tell you something. That said, it was pretty easy to get back into the flow and I managed to put together <a href="https://github.com/aarongustafson/jekyll-webmention_io">a basic Liquid Tag for webmentions and webmention counts</a> in about two hours.</p>

<p>The tag to display webentions for a page is pretty simple:</p>

<p><div><script src='https://gist.github.com/cb15ead6bf3a72b8f92a.js?file=webmentions.html'></script>
<noscript><pre><code>{% webmentions YOUR_URL %}</code></pre></noscript></div>
</p>

<p>This tag outputs a container <code>div</code> and an ordered list of every webmention found when the site is generated (or previewed). To show the current webmention count, you use a slightly different tag which just outputs a number:</p>

<p><div><script src='https://gist.github.com/cb15ead6bf3a72b8f92a.js?file=webmention_count.html'></script>
<noscript><pre><code>{% webmention_count YOUR_URL %}</code></pre></noscript></div>
</p>

<p>These two tags allows me to bypass the JavaScript used in webmention.io’s integration examples and have Ruby consult the API directly. The plugin then creates the necessary markup using the JSON data the API provided.</p>

<p>Unfortunately, Liquid tags are only processed by Jekyll when the site is compiled. The actual site exists only as static HTML files on Github’s servers, so any webmentions created after I generate the site won’t show up. That’s a little less than ideal.</p>

<p>I don’t regenerate the site that often, nor do I want to set up a cron to automatically do it in order to update the webmentions. I took the afternoon to mull over some options to address this challenge. <em>How do I add in missing webmentions dynamically when the site itself is static?</em></p>

<p>Then it dawned on me: JavaScript can fill in the gaps. Using the examples Aaron had put together, I cobbled together a script to update the webmention list and fill in any missing mentions. In the interest of reducing dependencies, I used <a href="http://vanilla-js.com">the infamous Vanilla.js library</a> to create and insert new webmentions when the page was loaded.</p>

<p>And, as an added bonus, I adapted another bit of Aaron’s code to make the webmention list update in real time as new mentions are created elsewhere on the Web. The code uses <a href="http://www.w3.org/TR/websockets/">WebSockets</a>, <a href="http://caniuse.com/#feat=websockets">if available</a>, to make the magic happen. It’s pretty nifty and I tip my hat to Aaron for implementing that feature in the webmention.io service.</p>

<p>It’s been a pretty fun mini-project. In the end, I created a useful bit of kit that provides three distinct experiences:</p>

<ol>
<li>Static webmentions collected when the site was generated form the baseline experience;</li>
<li>JavaScript-enabled browsers get any webmentions that were published since I last generated the site; and</li>
<li>JavaScript-enabled browsers with WebSockets support get real-time updates with any webmentions that are published after the page loads.</li>
</ol>


<p>And, even better, the next time I generate the site, any missing webmentions will be inserted into the static files for safe keeping.</p>

<p>That’s a pretty nice continuum of experience if you ask me.</p>

<p>If you are a Jekyll or Octopress user, you can pick up <a href="https://github.com/aarongustafson/jekyll-webmention_io">the plugin and optional JavaScript file on Github</a>. Feel free to fork and sent me your bug fixes and enhancements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Do We Own?]]></title>
    <link href="http://aaron-gustafson.com/notebook/what-do-we-own/"/>
    <updated>2014-11-17T09:43:54-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/what-do-we-own</id>
    <content type="html"><![CDATA[<p>My good friend <a href="http://adactio.com">Jeremy</a> is <a href="https://adactio.com/journal/6801">incredibly excited</a> about the <a href="http://indiewebcamp.com/">Indie Web movement</a> and I am right there with him. I love the idea of owning your content and then syndicating it out to social networks, photo sites, and the like. It makes complete sense… <a href="http://www.gyford.com/phil/writing/2009/04/28/geocities.php">Web-based services have a habit of disappearing</a>, so we shouldn’t rely on them. The only Web that is permanent is the one we control.</p>

<!-- more -->


<p>But going down this rabbit hole got me wondering <em>how much do we really control?</em> And beyond that, <em>what do we own?</em></p>

<p>To borrow <a href="http://aworkinglibrary.com/writing/index-cards/">a quote from Mandy Brown</a> (which also Jeremy referenced):</p>

<blockquote><p>No one owns this domain but me, and no one but me can take it down. I will not wake up one morning to discover that my service has been “sunsetted” and I have some days or weeks to export my data (if I have that at all). These URLs will never break.</p></blockquote>

<p>I don’t know if her statement is true. Idealistically, I want it to be true, but consider the following:</p>

<ol>
<li><strong>We rent domain names through registrars.</strong> We “purchase” domain names, but we must renew them from time to time to remain in control. Assuming you keep up the payments, they can still be <a href="http://www.wired.com/2012/03/feds-seize-foreign-sites/">seized for any number of reasons</a> or <a href="https://en.wikipedia.org/wiki/Domain_hijacking">they can be stolen</a>. Or the <a href="https://en.wikipedia.org/wiki/RegisterFly">registrar can go out of business</a> and you have to scramble to move it to a new registrar.</li>
<li><strong>Most of us rent space on the Web.</strong> I can’t think of a single friend of mine who still personally hosts his or her website. As such, we are beholden to our hosts. Even if we keep on top of our payments, things can go wrong: They could <a href="https://wordpress.org/support/topic/acenet-hosting-crashed-and-lost-all-my-data-what-do-i-do-now">crash or have another issue</a> and <a href="http://www.startupsmart.com.au/technology/crazy-domains-loses-web-hosting-data-as-startups-suffer/2014051912326.html">lose all of our data</a>. <a href="http://www.danrichard.com/2014/03/30/p2lhosting-is-now-closed-thank-you-everyone/">They could go under</a>. Or they could simply <a href="http://webdesignfromscratch.com/blog/how-123reg-almost-crippled-my-business/">lose your domain</a>.</li>
</ol>


<p>Knowing all of this—and realizing that when I am dead and gone all of the content I created could be lost to the ether if my family doesn’t know how to keep things going or doesn’t care to keep making these payments—I am left wondering <em>how do we achieve the permanence of print on the Web?</em></p>

<p>I don’t have any answers, so I pose it as an open question to the Indie Web community. If you have some thoughts, I encourage you to post them on your own site and use <a href="http://indiewebcamp.com/webmention">webmentions</a> to add them to this page. Or you can default to <a href="#disqus">the comments</a>.</p>
]]></content>
  </entry>
  
</feed>
