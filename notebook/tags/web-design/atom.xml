<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Web Design | Aaron Gustafson]]></title>
  <link href="http://www.aaron-gustafson.com/notebook/tags/web-design/atom.xml" rel="self"/>
  <link href="http://www.aaron-gustafson.com/"/>
  <updated>2015-06-24T20:07:00-04:00</updated>
  <id>http://www.aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bringing Sanity and Order to Device Testing]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/bringing-sanity-and-order-to-device-testing/"/>
    <updated>2015-06-05T09:56:03-04:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/bringing-sanity-and-order-to-device-testing</id>
    <content type="html"><![CDATA[<p>It seems like every other day the public is granted some new means of accessing the web. Some days it’s <a href="http://www.engadget.com/2015/04/29/microsoft-edge/">a new browser</a>. Others it’s <a href="http://www.pcadvisor.co.uk/reviews/mobile-phone/3504276/yotaphone-2-review-uk-dual-screen-smartphone/">a new smartphone</a>. Or <a href="http://www.engadget.com/products/microsoft/surface/3/">a tablet</a>. Or <a href="http://the-digital-reader.com/2014/10/22/voyage-vs-paperwhite-comparison-review-web-browser/">an e-reader</a>. Or <a href="https://www.nintendo.com/3ds/internetbrowser/specs/">a video game console</a>. Or <a href="http://www.phonearena.com/news/Surf-the-Internet-from-your-Android-Wear-smartwatch-Now-possible-via-this-new-app_id58580">a smartwatch</a>. Or <a href="https://html5test.com/compare/browser/samsungsmarttv-2013.html">a TV</a>. Or <a href="http://www.techradar.com/us/reviews/wearables/microsoft-hololens-1281834/review">a heads-up display</a>. Or <a href="http://www.popularmechanics.com/cars/a13191/the-future-of-car-connectivity-is-a-real-web-browser-in-the-dash-17416796/">a car</a>. Or <a href="http://www.lgblog.lt/2009/10/28/zvilgsnis-atgal-pirmasis-pasaulyje-saldytuvas-su-internetu-lg-internet-digital-dios/">a refrigerator</a>.</p>

<!-- more -->


<p>I worked on one project where the client provided me with a spreadsheet detailing 1,400 different user agents that accessed the login screen for the m-dot site. In two days!</p>

<p>As further evidence, consider <a href="http://blog.jasonsamuels.net/post/21633531278/analytics-confirm-the-need-for-adaptive-web-design">the enlightening details of this post from Jason Samuels</a> of the National Council on Family relations, a non-profit organization:</p>

<ul>
<li>In 2008, Internet Explorer dominated as the browser for 93.5% of their visitors. By 2014, that percentage had fallen to 19.7%, with Chrome bringing in the lion’s share of the traffic (37%). Firefox narrowly beat out IE with a 20% share of users.</li>
<li>In 2008, visits from &ldquo;mobile&rdquo; devices accounted for only about 0.1% of their traffic. In 2014, that number had skyrocketed to 14.4%.</li>
<li>In 2008, they detected 71 different screen resolutions, which is already a lot to consider. By 2014, however, they were seeing 1,000 unique screen resolutions each and every quarter (with over 200 of those recording 10+ visits per quarter).</li>
</ul>


<p>That last stat blows my mind every time I read it. You can’t design for 200 different screens, let alone 1,000. It’s a fools errand. And don’t even think of trying to test on that many devices.</p>

<p>And yet, here we are designing websites that can (and will) go anywhere. We need to thoroughly test because we can’t make any assumptions about the browsers and devices being used to access our content.</p>

<p>Testing can be tedious, time consuming, and costly. Surely there’s a way to make it easier. There sure is: Instead of getting hung up on creating one experience that needs to be nearly identical on every browser, we can be smarter about how we build things and treat experience as a continuum.</p>

<p>We can build websites that are both nimble enough to work on low powered devices over slow networks <em>and</em> smart enough to take advantage of advanced features and sensors when opportunity knocks.</p>

<p><em>Wha?! We can have our cake and eat it too</em>? Yes. Yes we can.</p>

<h2>Start on Solid Footing</h2>

<p>When dealing with the insane proliferation of web-enabled devices and the great unknown of where our websites will go, it pays to take a step back and focus on what’s important. We need to ask ourselves two simple questions:</p>

<ol>
<li>What is the purpose of this page, this form, this interface?</li>
<li>What is the simplest way to realize that purpose?</li>
</ol>


<p>Then we need to build that <em>first</em>. Typically we’re talking text, some basic HTML, actual links to other pages, and forms that submit to a back-end of some sort. This is our minimum viable product and it will work anywhere.</p>

<p>Then we can look for opportunities to enhance the experience, all while keeping that functional core at the center of the experience.</p>

<p>We can use CSS to add visual hierarchy to the page, provide some visual interest, and adjust the layout to create a good reading experience on a wide range of screen sizes. We should start from the narrowest screen size we can imagine and <a href="https://twitter.com/brad_frost/status/191977076000161793">let the content guide our breakpoint decisions</a>.</p>

<p>We’ll use JavaScript to give real-time feedback to our users. <a href="http://domscripting.com/presentations/xtech2006/">We’ll hijack forms and links</a> to <a href="http://www.filamentgroup.com/lab/ajax-includes-modular-content.html">lazy load additional content</a> or otherwise avoid full-page refreshes. Heck, we can even take over the entire page and <a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/">convert it into a single page app</a>.</p>

<p>But we should never sacrifice the functional core.</p>

<p>This approach to designing for the web is called <a href="http://alistapart.com/article/understandingprogressiveenhancement">progressive enhancement</a> and it’s the number one tool for dealing with the one-two punch of older browsers and device proliferation.</p>

<h2>Be Conservative in Your Delivery</h2>

<p>What makes progressive enhancement so helpful when it comes to dealing with this swirling mass of devices and browsers is that the core experience will <em>always be</em> available. There is nothing precluding our users from accessing it, even on a crappy WAP browser or a text-based browser like Lynx or even some <a href="http://www.theubi.com/">no so far-future talking computer</a> that only &ldquo;sees&rdquo; the web as text.</p>

<p>In order to ensure we don’t accidentally deliver advanced features to less capable browsers like these, we just need to be smart about how we load stuff like CSS and JavaScript.</p>

<p>Some basic CSS—think typography, color, etc.—will be usable by just about anyone, so we can put all that stuff in one CSS file (e.g., <code>basic.css</code>) and include it with a standard <code>link</code>. Then we can tuck all of our layout rules and other advanced CSS into a separate CSS file (e.g., <code>advanced.css</code>) that we link to with an associated media query.</p>

<p><div><script src='https://gist.github.com/166b285a4fe3d854b97b.js?file=css-linking.html'></script>
<noscript><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;default.css&quot; media=&quot;all&quot;&gt;
	&lt;link rel=&quot;stylesheet&quot; href=&quot;advanced.css&quot; media=&quot;only screen&quot;&gt;</code></pre></noscript></div>
</p>

<p>Any <a href="http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu/106">browsers that don’t understand media queries will ignore the second CSS file entirely</a> and receive only the linear, mobile view. Easy peasy, and IE8 gets the mobile layout (a baseline level of support that is not likely to cause you any testing headaches).</p>

<p>You can even take things a step further and use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports">the <code>@supports</code> block</a> within <code>advanced.css</code> to limit certain rule sets to only the browsers that support specific CSS features.</p>

<p>Of course, CSS support issues are nothing compared to JavaScript, so sometimes it’s best not to deliver certain bits of JavaScript-based functionality to browsers that can’t handle it. This is where <a href="http://www.quirksmode.org/js/support.html">feature (and object) detection</a> becomes incredibly useful:</p>

<p><div><script src='https://gist.github.com/166b285a4fe3d854b97b.js?file=feature-test.js'></script>
<noscript><pre><code>if ( &#39;querySelector&#39; in document ) {
	// We can use querySelector!
}</code></pre></noscript></div>
</p>

<p>You can also use <a href="http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment">inverted conditional comments</a> to prohibit older versions of IE from getting JavaScript in the first place (which means you don’t even need to worry about debugging JavaScript there). Here’s an example that hides <code>main.js</code> from IE8 and below, but makes it available to IE9 on up and to every other non-IE browser.</p>

<p><div><script src='https://gist.github.com/166b285a4fe3d854b97b.js?file=no-script-in-lte-ie8.html'></script>
<noscript><pre><code>&lt;!--[if gt IE 8]&gt;&lt;!--&gt;
	&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;
&lt;!--&lt;![endif]--&gt;</code></pre></noscript></div>
</p>

<p>By being conservative in what we deliver to browsers we <a href="http://bradfrost.com/blog/mobile/support-vs-optimization/">ensure the greatest level of support, but can still optimize for more advanced ones</a>. This makes testing so much easier because we know older browsers will be okay with the basics and we aren’t trying to use JavaScript features unless we know they’re available.</p>

<h2>Test, Test, Test</h2>

<p>Progressive enhancement helps us avoid a lot of rendering and scripting issues before we even get to the testing phase of a project, but eventually we do need to sit down and run our projects through their paces.</p>

<p>In order to keep testing manageable during development, it’s best to test in one browser we know to have good web standards support. It will provide a basic gut-check for our work. Once we are pretty confident things are working as they should be, we can begin more thorough testing on a variety of browsers and devices.</p>

<p>I personally keep several versions of each major browser on my laptop at any given time. I work on a Mac, so I typically have a few versions of Chrome, Firefox, and Opera lying around. You can get older versions of these browsers here:</p>

<ul>
<li><a href="http://commondatastorage.googleapis.com/chromium-browser-continuous/index.html">Chromium Archive</a></li>
<li><a href="http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/">Firefox Archive</a></li>
<li><a href="http://www.opera.com/download//?custom=yes">Opera Archive</a></li>
</ul>


<p>It’s near-impossible to get older versions of Safari running on modern versions of OS X, so I typically just have the latest version locally.</p>

<p>For testing on Windows versions of said browsers, I typically have anywhere from 3-5 virtual machines running various Windows versions with their associated browser version and (typically) a copy of Chrome, Firefox, and Opera for good measure. The MS Edge Dev site offers <a href="http://dev.modern.ie/tools/vms/">free Windows VMs for download</a>. If you’re just looking to get a gut-check in the latest and greatest from Microsoft, there’s also <a href="https://remote.modern.ie/">the Remote.IE service</a>, which allows you to connect to a virtualized version of the browser.</p>

<p>If you develop on Windows or Linux, you’ll need access to a Mac or you’ll have to rely on virtualization to test on that platform. I’ll discuss virtualization in a moment.</p>

<p>Once you’ve thoroughly tested in the various desktop browsers, it’s time to take the deep dive into the world of devices. If you’re unsure where to begin, take a look at your analytics, but take them with a grain of salt. Analytics can lead you to make false assumptions. For example, if you see a low percentage of Blackberry users, could that be because your site just doesn’t work well in Blackberry so they don’t stick around (or come back)? Beware the self-fulfilling prophecy.</p>

<p>If you have the budget, by all means pick up some devices to have on hand for testing. You can use tools like <a href="https://creative.adobe.com/products/inspect">Adobe’s Edge Inspect</a>, <a href="http://vanamco.com/ghostlab/">Vanamco’s Ghostlab</a>, or <a href="https://github.com/viljamis/Remote-Preview">Viljami Salminen’s Remote Preview</a> (or a combination of all of the above) to synchronize browsing on a handful of devices. Some of these tools also allow for remote inspection of the device to debug CSS and JavaScript. <a href="http://people.apache.org/~pmuellr/weinre-docs/latest/">Weinre</a> (which Adobe Edge Inspect uses) and <a href="http://vorlonjs.com/">Vorlon.js</a> also provide remote inspection functionality.</p>

<p>If you are lucky enough to have one nearby, you should stop by your local <a href="http://opendevicelab.com/">open device lab (ODL)</a> to run your tests. ODLs are free community resources, typically offered by a web design studio or an individual who happens to be sitting on a ton of devices. Someone at the ODL should be able to help you pick out devices to test on and introduce you to the testing tools they have available in the lab.</p>

<p>If you don’t have an ODL nearby, you can also do some guerrilla-style testing in your local mobile phone or electronics store. Just make sure they have real devices… you won’t get far on the fake plastic ones.</p>

<p>If none of these are options for you, there’s always virtualization. You can download and install <a href="http://www.mobilexweb.com/emulators">emulators for a variety of mobile browsers and devices</a>. Additionally, services like <a href="https://www.browserstack.com/">Browserstack</a> and <a href="http://crossbrowsertesting.com/">CrossBrowserTesting</a> offer access to hundreds of virtual desktops and devices for a nominal fee.</p>

<p>Virtualization will never give you the same experience as holding a real device in your hand. The performance is rarely the same and you don’t get any sort of feel for how the device responds to your input. I once stumbled on an Android 2.3 bug wherein generated content was being re-generated and re-inserted every time the device was rotated. I doubt I would have discovered that using an emulator. That said, emulators can help you get a rough idea of whether your interface works or not.</p>

<p>Regardless of the means by which you procure your testing devices, try to cover a good cross-section. Pick some low-end ones, a couple older high-end devices, and handful of the latest flagships, and a wide variety of screen sizes and resolutions. Make sure you have good coverage in terms of operating systems too—the latest iOS and Android versions are a given, but make sure you have a Windows device or two, a few Blackberry options, and some older Android and iOS versions in the mix. Then throw in <a href="http://www.geekwire.com/2013/microsoft-kin-resurfaces-25-daily-deals-site/">an oddball</a> <a href="http://www.windowscentral.com/have-39-spare-then-pick-odd-sylvania-7-netbook-windows-ce">or two</a> to see if your interfaces hold up.</p>

<p>It’s important to bear in mind that we will never be able to give each user on each device exactly the same experience. We need to be okay with that—experience is a continuum. As long as our users can accomplish what they need to on our sites, they will be well-served.</p>

<h2>Bonus Points: Embrace Patterns</h2>

<p>If we really want to make things easy on ourselves (and our team), we should consider building a <a href="http://alistapart.com/blog/post/getting-started-with-pattern-libraries">pattern library</a> before we build a single page of our website.</p>

<p>Breaking our interfaces down into discrete, repeatable patterns (e.g., a label and form control, a tabbed interface, etc.) lets us look at each in isolation and test it that way too. Testing in isolation is far easier than trying to debug a page with a lot of moving parts.</p>

<p>Gathering our patterns into a live, web-based pattern library  allows anyone on our team to collect the patterns they need to build a given interface as easily as they’d assemble a plate at a smörgåsbord. And if we really want to streamline the building and testing process, we can even <a href="http://ianfeather.co.uk/a-maintainable-style-guide/">make the patterns importable into the live site</a> so everything stays in sync.</p>

<h2>Don’t Fear the Zombie Apocalypse</h2>

<p>With the constant onslaught of new devices, form factors, and considerations, it’s tempting to throw up our hands and find another line of work. The pace of advancement is so brisk, it’s just hard to keep up, let alone feel like we’re on top of where things are headed.</p>

<p>Thankfully, however, all is not lost. By taking a step back and focusing on what matters, embracing experience as a continuum, and being deliberate in how (and when) we deliver certain features and functionality to browsers, we’ll head most issues off at the pass.</p>

<p>This relieves some of the pressure (and frustration) from the testing process and frees us up to test on a wider variety of devices and browsers, which means we’ll be able to provide a solid experience for more users, no matter what marvel of technological wizardry they happen to be using at the time.</p>

<p>Everybody wins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interface Experience Maps]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/interface-experience-maps/"/>
    <updated>2015-05-28T08:43:20-04:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/interface-experience-maps</id>
    <content type="html"><![CDATA[<p>One of the greatest challenges of progressive enhancement lies not with the coding, but with the planning. It can be incredibly challenging to articulate how a single interface might adapt to a wide variety of situations. Interface Experience Maps (Ix Maps) can help.</p>

<!-- more -->




<hr>


<p>Back in 2007, I was presented with this challenge while putting together a talk called <a href="https://web.archive.org/web/20070515221318/http://2007.sxsw.com/interactive/programming/panels/?action=show&amp;id=IAP060214">Ruining the User Experience</a> (which I co-presented for the first time with at SXSW with <a href="https://twitter.com/sarahbeee">Sarah B. Nelson</a>). In the talk, Sarah and I discussed how to treat JavaScript as an enhancement and what happens when you don’t—in 2007, I know!</p>

<p>Anyway, in the talk I was struggling to convey the various decision points and interface adjustments that would happen as a result of those decisions. I don’t remember which of us came up with the idea—it was probably Sarah—but we opted to use a flowchart to visually describe what we were talking about on stage. Here was the first one we did:</p>

<p><figure id="fig-2015-05-28-01" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/01.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/01.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>An early flowchart used to describe progressive enhancement with JavaScript</figcaption></figure></p>

<p>It was pretty rudimentary, but it got the point across.</p>

<p>In future iterations of the talk, I expounded upon the idea of a flowchart for describing how an interface might adapt to different circumstances and browser capabilities. Here’s a particularly complex one I used to describe how a FAQ might function:</p>

<p><figure id="fig-2015-05-28-02" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/02.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/02.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/02.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/02.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>A flowchart describing the progressive enhancement and interaction options for an FAQ.</figcaption></figure></p>

<p>Over the years I found more and more ways to put these artifacts to use. And at a certain point, &ldquo;flowchart&rdquo; didn’t seem to cut it, so I began calling them &ldquo;UI construction flows"—which, admittedly, was a mouthful—and then finally settled on the name "Interaction Experience Maps&rdquo; with the help of a client.</p>

<h2>The Benefits of Ix Maps</h2>

<p>Ix Maps have become an invaluable tool to me and the teams I’ve worked with. They excel at articulating the different ways in which a given interface might adapt and what the end results of each adaptation might be.</p>

<p>This sort of documentation is invaluable to just about everyone on the team:</p>

<ul>
<li>Copywriters get a clear picture of the different experience possibilities so they can craft the copy accordingly;</li>
<li>Designers can see the different experience possibilities and can create wireframes and visual designs that account for each;</li>
<li>Developers get a clear outline of what functionality is expected and know exactly what features and capability detection to employ in generating each experience; and</li>
<li>The quality assurance team has a clear picture of what they should be looking for in each component of an interface.</li>
</ul>


<p>In short, Ix Maps ensure everyone on the team has a clear picture of what’s expected so they can work toward the common goal. One company I worked with found Ix Maps so useful that they created one for each and every pattern in their pattern library. Then they included the drawings as part of each pattern’s documentation.</p>

<h2>Ix Maps Facilitate Collaboration and Iteration</h2>

<p>An Ix Map is a pretty simple concept for anyone to come to grips with, making it a fantastic tool for enabling mixed teams—designers, developers, content folks, business strategists, etc.—to brainstorm ideas and build a strategy around progressive enhancement.</p>

<p>Time and time again, I have seen these simple diagrams bring a diverse team together and help them quickly and easily come up with very creative ways to address complex interface problems. That’s why I frequently use them as a tool in the workshops I lead.</p>

<p>Because they are so basic, Ix Maps can be sketched out quickly on paper, a whiteboard, or in software like OmniGraffle. And their simplicity also makes it quite easy to explore different ideas of how to adapt things and you don’t have to worry about throwing away an idea that doesn’t play out because it’s only a few boxes and arrows… you haven’t invested any time in design or production.</p>

<p>Here’s an example from <a href="https://www.facebook.com/events/804756366246427/">my Beyond Responsive workshop</a> that illustrates the evolution of a tabbed interface Ix Map from basic into something that is far more appropriate for differently-sized screens:</p>

<p><figure id="fig-2015-05-28-03" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/03.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/03.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>Pass 1: If JavaScript’s available, make a tabbed interface out of linear content. If not, leave it as it was.</figcaption></figure></p>

<p><figure id="fig-2015-05-28-04" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/04.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/04.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/04.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/04.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>Pass 2: Add a live width test into the mix to see if there’s enough room for the tabs and make it an accordion if the screen is too narrow.</figcaption></figure></p>

<p><figure id="fig-2015-05-28-05" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/05.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/05.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/05.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/05.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>Pass 3: Test for native <code>details</code>/<code>summary</code> support and use the native functionality if available.</figcaption></figure></p>

<h2>Simple, Powerful</h2>

<p>Ix Maps have been incredibly useful to me and the dozens of teams I’ve worked with. They’ve helped us explore innovative ways to solve design challenges and have been an amazing touchstone to organize our work around. Give them a shot an I’m sure you’ll discover lots of ways to put them to use in your own projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL Inception]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/url-inception/"/>
    <updated>2015-05-18T14:38:29-04:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/url-inception</id>
    <content type="html"><![CDATA[<p>It’s like a snake eating its own tail:</p>

<pre><code>https://m.facebook.com/ClydesOnMain?refsrc=https%3A%2F%2Fwww.facebook.com%2FClydesOnMain#!/ClydesOnMain?refsrc=https%3A%2F%2Fwww.facebook.com%2FClydesOnMain
</code></pre>

<p>Wonder what’s going on? Well, Facebook’s mobile site (<code>m.facebook.com/ClydesOnMain</code>) is tracking the URL (using the <code>refsrc</code> GET parameter) I came from (<code>www.facebook.com/ClydesOnMain#!/ClydesOnMain</code>)—a single page &ldquo;web app&rdquo;, hence the hash-bang: <code>#!</code>—that was tracking the original referral page (<code>www.facebook.com/ClydesOnMain</code>).</p>

<p>I hope they got all that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons Learned From Atari]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/lessons-learned-from-atari/"/>
    <updated>2015-05-05T18:05:40-04:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/lessons-learned-from-atari</id>
    <content type="html"><![CDATA[<p>In watching <a href="http://www.slashfilm.com/watch-atari-game-over/"><cite>Atari: Game Over</cite></a>, I couldn&rsquo;t help but see all of the parallels between the early video game industry and the web design industry. The boys’ club… Engineers as rockstars… It&rsquo;s a tale of a meteoric commercial rise followed by a swift and dismal collapse.</p>

<!-- more -->


<p>The film centers around the urban legend of millions of <cite>E.T. The Videogame</cite> cartridges being buried in a landfill in New Mexico as Atari burying it&rsquo;s shame over producing such a bad video game. Many cite <cite>E.T. The Videogame</cite> as the reason for the collapse of the industry in 1983, but it wasn&rsquo;t the case.</p>

<p>Xbox co-creator <a href="https://twitter.com/seamusblackley">Seamus Blackley</a> offered this:</p>

<blockquote><p>The behavior patterns that created the conditions for the E.T. failure is what destroyed the video game industry.</p></blockquote>

<p>The behavior patterns in question: greed; ridiculous timelines (E.T. was conceived and programmed in 5 weeks by one man: <a href="http://en.wikipedia.org/wiki/Howard_Scott_Warshaw">Howard Scott Warshaw</a>); and hubris.</p>

<p>There are a lot of parallels with the Silicon Valley of today. Food for thought.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collected Reactions to //build/]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/collected-reactions-to-build/"/>
    <updated>2015-04-30T10:53:11-04:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/collected-reactions-to-build</id>
    <content type="html"><![CDATA[<p>I may work for Microsoft, but I don’t know everything that’s going on across the company. It’s big and I don’t have that kind of time.</p>

<!-- more -->


<p>Anyway <a href="http://aka.ms/ktlsyd">//build/</a>, the Microsoft conference, is going on right now and as you’d expect, there are a ton of new announcements. I’ve watched a few of the talks virtualy and am particularly excited about the new browser (whose name has finally been revealed): <a href="https://www.microsoft.com/en-us/windows/browser-for-doing">Microsoft Edge</a>. I’m also very interested to see where things go with <a href="https://www.microsoft.com/microsoft-hololens/en-us">HoloLens</a>.</p>

<p>One graphic that cropped up that blew my mind was this one talking about where Windows 10 is going:</p>

<p><figure id="fig-2015-04-30-01" class="media-container"></figure></p>

<p>You’ve often heard me discuss <a href="http://adaptivewebdesign.info/1st-edition/chapter-1.html">experience as a continuum</a>. Microsoft is living it.</p>

<p>If you didn’t watch the streaming talks and want to hear about what was announced from some independent sources, I’d recommend reading these:</p>

<ul>
<li><a href="http://www.wired.com/2015/04/microsoft-build-hololens/">Microsoft Shows HoloLens’ Augmented Reality Is No Gimmick</a> — <cite>Wired</cite>
A good overview of the possibilities of HoloLens with a recap of what was shown. I caught this demo on the lifestream. It was pretty impressive. I can’t wait to try a HoloLens myself.</li>
<li><a href="http://thenextweb.com/microsoft/2015/04/30/microsoft-opens-up-applications-for-developers-to-test-ios-and-android-app-conversion-tools/">Microsoft opens up applications for developers to test iOS and Android app conversion tools</a> — <cite>The Next Web</cite>
The Microsoft App Store is a little scant on first-rate programs right now, so in a play to make it stupid-simple for iOS and Android developers to run on Windows 10, the folks at Microsoft have built a conversion tool that ports the app for you. It’s worth noting that you can also port a website into a native Windows app. Smart move on Microsoft’s part if you ask me.</li>
<li><a href="http://thenextweb.com/microsoft/2015/04/30/hands-on-with-the-new-minimalist-microsoft-edge-browser/">Hands-on: The new Microsoft Edge browser is a picture of minimalism</a> — <cite>The Next Web</cite>
Obviously the web is where I live and work. I’ve been playing with early builds of the new Microsoft browser for a few months now and have been pretty happy with its speed and capabilities, but it is nice to read an outside perspective on it.</li>
<li><a href="http://gizmodo.com/microsoft-just-nonchalantly-showed-us-the-single-device-1701020050">Microsoft Just Nonchalantly Showed Us the Single-Device UI of the Future</a>
I don’t know about &ldquo;nonchalantly&rdquo;, but the whole Continuum feature is pretty amazing. The potential for being able to use the computer in your pocket with other peripherals is pretty intriguing. Imagine using your phone, a set of holographic or <a href="http://www.amazon.com/Cinemizer-1909-127-Multimedia-Video-Glasses/dp/B0091OI530/">virtual screen glasses</a>, and a bluetooth keyboard &amp; mouse to get work done on a plane. No need to worry about someone leaning back and breaking your laptop!</li>
<li><a href="http://techcrunch.com/2015/04/30/hololens-is-real/">HoloLens Hands-On: How We Built An App For Microsoft’s Augmented Reality Headset</a><br/>
One reporter’s experience developing for and playing with HoloLens. Sounds like it was pretty cool. I wonder if it can be tweaked to work for people with poor vision like me or if it fits nicely over glasses.</li>
<li><a href="http://www.wired.com/2015/05/microsofts-one-billion-device-vision-genius-next-impossible/">Microsoft’s Windows 10 Vision Isn’t As Simple as It Seems</a><br/>
A deeper analysis of Microsoft’s play for more developer (and consumer) mindshare.</li>
</ul>


<p><em>I will continue adding to this list as new &amp; interesting pieces come out</em>.</p>
]]></content>
  </entry>
  
</feed>
