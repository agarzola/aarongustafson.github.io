<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Web Design | Aaron Gustafson]]></title>
  <link href="http://aaron-gustafson.com/notebook/tags/web-design/atom.xml" rel="self"/>
  <link href="http://aaron-gustafson.com/"/>
  <updated>2015-01-16T08:10:04-05:00</updated>
  <id>http://aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spelling Errors, Exclusions, and Packages, Oh My—Working Drafts at the W3C]]></title>
    <link href="http://aaron-gustafson.com/notebook/spelling-errors/"/>
    <updated>2015-01-16T07:15:12-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/spelling-errors</id>
    <content type="html"><![CDATA[<p>This week the W3C published a couple of really cool new Working Drafts I wanted to bring to your attention (just in case you missed them).</p>

<!-- more -->


<h2><a href="http://www.w3.org/TR/2015/WD-css-pseudo-4-20150115">CSS 4 Pseudo-elements</a>.</h2>

<p>Most of this is stuff you know: <code>::first-line</code>, <code>::first-letter</code>, and <code>::selection</code>. But what magic is this? <code>::spelling-error</code> and <code>::grammar-error</code> too! What?! Now I know I may be a little too excited about this, but it’s not because spelling and grammar errors are going to solve all of our design problems; I am excited about this because it points to us being granted more control over how more of the internals of browser operations are rendered to our users. Obviously <a href="/notebook/native-vs-stylable-tug-of-war/">this is a double edged sword</a> and could be abused to the detriment of the user experience, but it may also lead to someone coming up with clearer conventions for indicating spelling and grammar errors than the ones we’ve been using since the early days of Microsoft Word.</p>

<h2><a href="http://www.w3.org/TR/2015/WD-css3-exclusions-20150115/">CSS 3 Exclusions</a></h2>

<p>This has been a long time coming. The idea is pretty simple: Within a flow-type element (think <code>p</code>, <code>div</code>, etc.) you can apply <a href="http://www.w3.org/TR/2015/WD-css3-exclusions-20150115/#wrap-flow-property">the <code>wrap-flow</code> property</a> to children in order to control where content can go in relation to them. Here’s an example from the spec:</p>

<p><figure id="fig-2015-01-16-1"></p>

<pre><code>&lt;img src="http://www.w3.org/TR/2015/WD-css3-exclusions-20150115/images/exclusions-illustration.png" alt="Four boxes layed out roughly diagonally from the upper left to the lower right within a larger container. A flow of blue color shows where text is allowed to flow."&gt;
</code></pre>

<p></figure></p>

<p>In this example, child A is set to <code>wrap-flow: both</code>, allowing content to flow on both sides of it. Child B is set to <code>wrap-flow: start</code> meaning content should only be allowed on the starting side of the element (based on text direction, in this case left to right). Child C is set to <code>wrap-flow: end</code> meaning content can only appear after it in terms of text-direction. And child D is set to <code>wrap-flow: clear</code> which, as you might expect based on your existing CSS knowledge, ensures no content appears on either side of it.</p>

<p>There is <a href="http://www.w3.org/TR/2015/WD-css3-exclusions-20150115/#wrap-flow-property">another, more thorough example in the Working Draft</a> (scroll down a little bit), but it uses grid layout as well and is a little more complicated that I want to get into today.</p>

<p>On the flip side of the equation, there is <a href="http://www.w3.org/TR/2015/WD-css3-exclusions-20150115/#wrap-through-property">the <code>wrap-through</code> property</a> which allows other elements to control whether or not they pay attention to the <code>wrap-flow</code> property of another element. A <code>wrap-through</code> value of &ldquo;wrap&rdquo; adheres to what they are calling the &ldquo;wrapping context&rdquo; of the parent element (which basically means it behaves as you’d expect, being a child element). Setting a <code>wrap-through</code> value of &ldquo;none&rdquo; on the child element, however, would make it ignore the parent element’s wrapping context and allow this child’s content to flow through (hence <code>wrap-through</code>) the excluded element.</p>

<p>It’s a lot to take in and (of course) still subject to change, but I just wanted to bring this concept to your attention as it is pretty cool stuff and is a nice complement to <a href="http://www.w3.org/TR/css-shapes-1/">CSS Shapes</a>, which landed early last year.</p>

<h2><a href="http://www.w3.org/TR/2015/WD-web-packaging-20150115/">Streamable Package Format</a></h2>

<p>This one is pretty crazy and I am still tucking into it, but here’s the gist: You could provide a &ldquo;package&rdquo; or rolled up collection of files necessary to render your page—think CSS, images, fonts, etc.—in <a href="http://www.w3.org/TR/2015/WD-web-packaging-20150115/#streamable-package-format">Streamable Package Format</a> which would allow a browser to download them all in one go rather than having to request each resource individually. This could be really useful from a performance standpoint on high-latency connections as it cuts down on the number of round-trips the browser must make to the server before it can render the page. And, since the package can be streamed, we can optimize the contents to provide the most important bits first so the browser can go about rendering the document as quickly as possible.</p>

<p>This is a very cool concept with a lot of potential benefit to our users. Of course, as the document acknowledges, it’s also possible to abuse this and adversely affect performance by including a lot of unnecessary content. Kinda like <a href="https://www.polymer-project.org/articles/spa.html">that guy who made his whole single-page app into a Web Component</a>. Just because you can do something doesn’t make it a good idea.</p>

<p>Still, there’s a lot of potential here and I’m excited to see where it goes.</p>

<hr>


<p>Now the caveat: all of these are Working Drafts, not Technical Recommendations, so <em>they are not final by any means</em>. That said, they do point to a pretty interesting not to distant future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Onslaught of Low-cost Smartphones]]></title>
    <link href="http://aaron-gustafson.com/notebook/an-onslaught-of-low-cost-smartphones/"/>
    <updated>2015-01-15T11:58:11-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/an-onslaught-of-low-cost-smartphones</id>
    <content type="html"><![CDATA[<p>It seems every week we are seeing more and more low-cost devices being launched in an effort to connect the unconnected. For instance, this past week  saw the announcement of <a href="http://www.theverge.com/2015/1/14/7544107/microsoft-lumia-435-532-launch-specs-price-release-date">two new entries in the Microsoft Lumia line, the 435 and the 532</a>, and the announcement of <a href="http://arstechnica.com/gadgets/2015/01/samsung-finally-puts-tizen-on-a-smartphone-launches-the-z1-in-india/">Samsung’s first Tizen phone, the Z1</a>.</p>

<!-- more -->


<p>The two Lumia devices are the cheapest Windows Phone offerings to date: The Lumia 435 is €69 (about US$80) and the Lumia 532 is just slightly more expensive at €79 (about US$94). By comparison, the Lumia 535 was the previous low-cost Windows Phone winner at US$135. And Samsung’s Z1, which is aimed at the Indian market, runs a mere Rs 5,700 (roughly US$92).</p>

<p>Now if you’ve read this far, you are probably wondering why this matters. Well, spec-wise, many of these lower-end devices are far from what we are used to. All of these devices are running a resolution of 800×480. And their processing speeds are slower than the device you likely have in your pocket. But they are all far cheaper too. And remember that people in China and India have <a href="#fig-2015-01-15-01">far less disposible income than we do</a>.</p>

<p><figure id="fig-2015-01-15-01" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/05-sm.jpg"
     srcset="/i/posts/2014-11-06/05-lg.jpg 1920w, /i/posts/2014-11-06/05-md.jpg 600w, /i/posts/2014-11-06/05-sm.jpg 320w"
     alt="A bar chart comparing the average monthly incomes of people living in the U.S., Canada, China, and India."
     &gt;
</code></pre>

<p></figure></p>

<p>If you only earned US$295 a month, a US$799 smartphone would likely be out of the question.</p>

<p>As Web designers and developers, we need to expose ourselves to the Web as others see it. This is why we need to view our sites and applications on lower-end devices and over lower-speed—2G, 3G, etc.—connections. Only by testing our wares can we truly ensure our content and services are available and accessible by anyone, anywhere, on any device. You know, <a href="http://webfoundation.org/about/vision/">the vision for the Web</a>.</p>

<p>Of course you probably don’t have the budget to purchase a bunch of devices, no matter how cheap they are. So how do you test on them? <a href="http://opendevicelab.com/">Visit a local Open Device Lab</a> like <a href="http://chadevicelab.org">the one we have here in Chattanooga</a>. Or if you don’t have one near you, consider getting together with some colleagues and <a href="http://lab-up.org/">starting an ODL in your area</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Linkblog]]></title>
    <link href="http://aaron-gustafson.com/notebook/the-linkblog/"/>
    <updated>2015-01-14T09:34:34-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/the-linkblog</id>
    <content type="html"><![CDATA[<p>Since re-starting my blog I’ve been continuing to tinker with Octopress and Jekyll in an effort to customize things a bit more to my liking.</p>

<p>I recently began posting links (with commentary) in a bit of a link blog, but I wasn’t really happy with having it mixed in with the rest of my Notebook posts. I finally took a few minutes to formally bust out the links into <a href="/notebook/links/">their own paginated section</a>, so you can keep up with them independently. I also set up a three distinct Atom feeds to let you consume this site’s content how you want to: <a href="/atom.xml">Latest 20 posts and links</a>, <a href="/atom-latest-posts.xml">latest 20 posts</a>, and <a href="/atom-latest-links.xml">Latest 20 links</a>.</p>

<p>I’m hopeful this organization will prove as helpful to you as it is for my compartmentalization anxiety.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webOS Is Back]]></title>
    <link href="http://aaron-gustafson.com/notebook/webos-is-back/"/>
    <updated>2015-01-08T10:17:09-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/webos-is-back</id>
    <content type="html"><![CDATA[<p>You may not remember it, but Palm’s groundbreaking—yes, I said groundbreaking—operating system, <a href="https://en.wikipedia.org/wiki/WebOS">webOS</a>, has been resuscitated yet again. This time by LG.</p>

<!-- more -->


<p>For those of you who may have missed out on webOS in the past, here’s a primer: webOS was developed by Palm and debuted on the Palm Pre in 2009. It was the first “HTML5-based” operating system. Yes you read that right: the OS was built on HTML, CSS, and JavaScript. In 2009. Six. Years. Ago.</p>

<p>Applications for webOS were written using the front-end Web stack, with the JavaScript application logic tied into the device via the Mojo—and later Enyo—JavaScript application framework. Though novel at the time, this concept has since taken off in the intervening years. <a href="http://msdn.microsoft.com/en-us/library/windows/apps/dn631758.aspx">Windows</a>, <a href="https://marketplace.firefox.com/developers/">Firefox OS</a>, and <a href="https://www.google.com/search?q=build%20native%20apps%20with%20html5">countless “unified” native app development platforms</a> have embraced the front-end Web stack as a means of building software.</p>

<p>webOS also supported multitasking, which was not common back then. And to make it easy to manage, webOS introduced the brilliant card metaphor for viewing and switching between running applications. Apple, of course, ripped that idea off for iOS 7. If you dig that feature on your iPhone you have Palm to thank.</p>

<p>Sadly, Palm usage was on the decline when webOS debuted so operating system never really took off. Eventually Palm was engulfed by HP, which launched the ill-fated HP TouchPad. It too failed to gather any steam and we thought webOS was dead (despite many proclamations to the contrary from well-meaning folks at HP).</p>

<p>In 2013 <a href="http://www.theverge.com/2013/2/25/4027814/hp-emerges-as-big-winner-in-webos-sale">HP announced it was selling parts of webOS to LG</a> for use in smart TVs. It was a glimmer of hope for the beleaguered OS. And now, not only do we have webOS based <a href="http://www.lg.com/uk/smarttv/webos">smart TVs</a>, but <a href="http://gizmodo.com/lgs-new-smart-watch-is-powered-by-webos-1678191522">LG’s new smart watches are sporting the OS as well</a>. And LG has not ruled out bringing it back for a phone either.</p>

<p>I’m happy to see webOS sticking around. It may have been the laughing stock in the app development community back in the day, but I’ve always had a soft spot in my heart for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisiting (and Releasing) <cite>Adaptive Web Design</cite>]]></title>
    <link href="http://aaron-gustafson.com/notebook/revisiting-and-releasing-adaptive-web-design/"/>
    <updated>2015-01-05T14:10:49-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/revisiting-and-releasing-adaptive-web-design</id>
    <content type="html"><![CDATA[<p>As you probably know, back in 2011 Easy Readers published my first solo book: <a href="http://adaptivewebdesign.info"><cite>Adaptive Web Design</cite></a>. It was an immediate hit and the response to continues to be tremendous even though it will turn four this coming May (which has to be like 80 in technology book years… many are outdated before they are even released).</p>

<!-- more -->


<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p>I think one of the main reasons the book has remained relevant for so long is because at its core, <cite>Adaptive Web Design</cite> is a <em>philosophy</em> book. Sure, there are some code examples here and there, but they only serve to demonstrate how you can apply progressive enhancement in your work. The philosophy of progressive enhancement works and only continues to demonstrate its brilliance with each new Web-enabled screen that debuts in the ever-expanding global marketplace. In fact, I’ll go out on a limb and declare that progressive enhancement is probably even more relevant today than it was when I wrote <cite>Adaptive Web Design</cite> in 2010.</p>

<p>As such, I’ve been thinking a lot about an update. So much has happened since mid-2010 when I was writing the book. Heck, I didn’t even address Responsive Web Design and only touched a little on mobile. Then there are things like single-page apps &amp; isomorphic JavaScript I’d love to discuss. <a href="http://opengraphprotocol.org/">Open Graph</a> &amp; <a href="http://schema.org/">Schema.org</a>… new tweaks to <a href="http://www.w3.org/WAI/intro/aria.php">the ARIA spec</a>… <a href="http://www.w3.org/html/wg/drafts/html/master/embedded-content.html#the-picture-element"><code>picture</code></a>, <a href="http://www.w3.org/html/wg/drafts/html/master/embedded-content.html#attr-img-srcset"><code>srcset</code></a> &amp; <a href="http://www.w3.org/html/wg/drafts/html/master/embedded-content.html#attr-img-sizes"><code>sizes</code></a>… the <a href="http://www.w3.org/TR/shadow-dom/">shadow DOM</a>… <a href="http://www.w3.org/TR/components-intro/">web components</a>… the list goes on and on. Progressive enhancement can help you better understand the pros and cons of all of these new advances and help you employ them while simultaneously keeping your projects on time and on budget.</p>

<p>My hope is that the second edition of <cite>Adaptive Web Design</cite> will be out an in your hands by the end of 2015. But in the meantime, <a href="https://adactio.com/journal/4956">taking a page from Jeremy</a>, I felt it was time to give away the first edition. You can now <a href="http://adaptivewebdesign.info/1st-edition/">read <cite>Adaptive Web Design</cite></a>, in it’s entirety, from the comfort of your own browser… for free.</p>

<p>The HTML version of <cite>Adaptive Web Design</cite> is a nearly direct port of the XHTML I wrote for the hand-coded ePub. I made a few tweaks to make it a little more readable in the browser, but it’s all there including the videos. And yes, it makes use of progressive enhancement.</p>

<p>I hope you enjoy reading it as much as I enjoyed writing it and I look forward to getting you the revised and expanded second edition in the not to distant future.</p>

<p>PS &ndash; Easy Readers closed up shop at the end of 2014 and delivered the remaining paperback copies—of which there are only 50 or so—to me. If you missed out on getting a copy and would like to purchase one, <a href="/contact/">drop me a line</a> and I can sell you one. I’ll even sign it for you!</p>
]]></content>
  </entry>
  
</feed>
