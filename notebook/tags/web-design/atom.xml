<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Web Design | Aaron Gustafson]]></title>
  <link href="http://aaron-gustafson.com/notebook/tags/web-design/atom.xml" rel="self"/>
  <link href="http://aaron-gustafson.com/"/>
  <updated>2014-12-16T11:07:11-05:00</updated>
  <id>http://aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Indecisiveness and URLs]]></title>
    <link href="http://aaron-gustafson.com/notebook/indecisiveness-and-urls/"/>
    <updated>2014-12-16T10:23:15-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/indecisiveness-and-urls</id>
    <content type="html"><![CDATA[<p>If you know me, you know I am a pretty indecisive guy. It is not uncommon for <a href="https://twitter.com/shirleytemper">Kelly</a> and I to spend 15 minutes or more just trying to figure out where we want to grab a meal.</p>

<!-- more -->


<p>What I’m trying to say (or rather excuse) is that I have been struggling with some of my initial decisions with respect to URLs on this site and finally decided to make some changes before too many links to its content get out there. I was a bit reluctant to do so as we all know <a href="http://www.w3.org/Provider/Style/URI.html">what Sir Tim Berners-Lee says</a></p>

<blockquote><p>Cool URIs don’t change.</p></blockquote>

<p>Well, consider me uncool as I decided to change some things around here:</p>

<ol>
<li>I dropped the year indicator from blog post URLs. I realized that the likelihood of me having two posts with the same name was pretty much nil, so it was unnecessary to disambiguate like that. Plus it would save me from having to create the annual archives I would feel compelled to make in order to justify the “2014” directory in the URL.</li>
<li>I consolidated my book and article pages to <a href="/publications">a single page or publications</a>. I thought it might be nice to maintain them separately, but in retrospect that seems unnecessarily complicated.</li>
<li>I changed the URL to my speaking engagements from “events” to “speaking-engagements” as it just made more sense.</li>
</ol>


<p>On the off chance you ever consider changing URLs on a Jekyll or Octopress site, I thought I’d share my process.</p>

<h2>Redirecting Old Links</h2>

<p>I was quite concerned concerned about old links being broken in this site. It’s just not a good thing to do.</p>

<p>In a traditional hosting scenario, I could use <code>.htaccess</code> to set up <a href="https://en.wikipedia.org/wiki/HTTP_302">302 redirects</a>, but I am hosting on Github so that isn’t an option. On top of that, this site is built using Octopress (and Jekyll), so there is no dynamic system in place to programmatically manage those redirects.</p>

<p>Thankfully, there is <a href="https://github.com/jekyll/jekyll-redirect-from">a plugin for Jekyll to manage redirects</a>. With it, you can redirect from an an existing page in the YAML front matter using the <code>redirect_to</code> key or you can use the <code>redirect_from</code> key in the YAML front matter on the destination page. I ended up using the former for old pages (articles, books, and events), and the latter for blog posts.</p>

<p>The plugin covers all the bases. It generates pages at the old URLs that redirect using the good old <code>meta</code> refresh, a JavaScript redirect, and a fallback link just in case neither of those work. Oh, and it sets the new URL as the <a href="https://support.google.com/webmasters/answer/139066?hl=en">canonical reference</a> to boot.</p>

<p>Done and done.</p>

<h2>Keeping Webmentions</h2>

<p>As I mentioned a few weeks back, I wrote <a href="/notebook/enabling-webmentions-in-jekyll/">a Jekyll plugin to enable webmentions</a>. As web mentions are tied to the “mentioned” URL, changing a post’s URL was going to cause me to lose any previous webmentions. I didn’t like that idea, so <a href="https://github.com/aaronpk/webmention.io/issues/31">I talked to Aaron about adding multiple URL support to the webmention.io API</a> and he agreed it was a good idea.</p>

<p>The feature landed late last week and I adjusted <a href="https://github.com/aarongustafson/jekyll-webmention_io">my Jekyll Webmention.io plugin</a> to allow you to supply multiple URLs. While I was at it, I did some other upgrades: I added caching, downloading of webmention titles if the API didn’t supply one, and a test for the existence of avatars before inserting them (so you don’t end up with missing images).</p>

<p>If you were using the plugin, I definitely recommend upgrading as it performs a lot better now. I also added <a href="https://github.com/aarongustafson/jekyll-webmention_io/blob/master/webmention.Rakefile">a Rake task for sending webmentions</a> which is super handy.</p>

<h2>Pardon My Dust</h2>

<p>I apologize for changing URLs on you, but I am hopeful this will be the last major change on the site. As it (currently) says at the top, <a href="/notebook/a-grand-experiment/">this is an open redesign</a>, so there are bound to be a few bumps here and there. That said, I will try to keep them to a minimum in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adaptive Images in ExpressionEngine With CE Image]]></title>
    <link href="http://aaron-gustafson.com/notebook/adaptive-images-in-expressionengine-with-ce-image/"/>
    <updated>2014-11-21T18:18:23-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/adaptive-images-in-expressionengine-with-ce-image</id>
    <content type="html"><![CDATA[<p>One of the biggest headaches of responsive design has been dealing with images. Thankfully our work on the <a href="http://ricg.io">Responsive <del>Images</del> <ins>Issues</ins> Community Group</a> has resulted in a rock-solid set of elements and attributes to address all of your adaptive image needs. My company, <a href="http://easy-designs.net">Easy Designs</a>, recently redesigned <a href="http://www.nichols.edu">Nichols College’s website</a> and that project just happened to coincide adaptive images landing in <a href="http://www.chromium.org/blink">Blink</a> (the rendering engine that powers Chrome and Opera). Naturally, we jumped at the opportunity to use them.</p>

<!-- more -->


<p>Most Nichols College sites run on <a href="http://ellislabs.com/expressionengine">EllisLab’s ExpressionEngine</a>, a solid little workhorse of a CMS we’ve been using for years. We love it because it gives us complete control over the markup it generates. Now EE offers some pretty decent file management and image manipulation utilities out of the box, but the options it provides were not enough to handle our adaptive image needs; we needed backup. <a href="http://www.causingeffect.com/software/expressionengine/ce-image">Causing Effect’s CE Image</a> add-on is reasonably priced and offered exactly the functionality we needed to make our adaptive image dreams a reality.</p>

<p>I won’t bore you with how to set up CE Image as there is <a href="http://www.causingeffect.com/software/expressionengine/ce-image/user-guide">documentation on that</a>, but I will walk you through two different responsive image use-cases we had and how we addressed them using this add-on.</p>

<h2>Header images</h2>

<p>The first use case we had was a series of large, focal images. You can find different examples of them on <a href="http://www.nichols.edu">the homepage</a> and landing pages (like <a href="http://www.nichols.edu/admissions/">this one for Admissions</a>). The first pass on making these images adaptive involved the <code>picture</code> element for which <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#adaptive-images">the spec</a> is known. The markup we were generating was based on the pattern outlined for <a href="http://scottjehl.github.io/picturefill/">Picturefill</a>, a JavaScript polyfill that implements adaptive images in browsers that don’t do it natively:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-result.html'></script>
<noscript><pre><code>&lt;picture class=&quot;page__image-header__photo&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;video style=&quot;display: none;&quot;&gt;&lt;![endif]--&gt;
    &lt;source srcset=&quot;about_940_343_int_s_c1_full.jpg&quot; media=&quot;(min-width: 40em)&quot;&gt;
    &lt;source srcset=&quot;about_800_350_int_c1_medium.jpg&quot; media=&quot;(min-width: 20em)&quot;&gt;
    &lt;source srcset=&quot;about_480_350_int_c1_small.jpg&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;/video&gt;&lt;![endif]--&gt;
    &lt;script&gt;
      document.write(&#39;&lt;img src=&quot;&quot; srcset=&quot;{made}&quot; alt=&quot;&quot;&gt;&#39;);
    &lt;/script&gt;
    &lt;noscript&gt;
        &lt;p class=&quot;noscript-picture&quot;&gt;&lt;img src=&quot;{made}&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;/noscript&gt;
&lt;/picture&gt;</code></pre></noscript></div>
</p>

<p>To get to that point, however, we needed to use CE Image to generate (and cache) the specific sizes we needed:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-element.html'></script>
<noscript><pre><code>&lt;picture class=&quot;page__image-header__photo&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;video style=&quot;display: none;&quot;&gt;&lt;![endif]--&gt;
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_full&quot;
        width=&quot;940&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 40em)&quot;&gt;
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_medium&quot;
        width=&quot;800&quot;
        height=&quot;600&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 20em)&quot;&gt;
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_small&quot;
        width=&quot;480&quot;
        height=&quot;360&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot;&gt;
        &lt;!--[if IE 9]&gt;&lt;/video&gt;&lt;![endif]--&gt;
        &lt;script&gt;
            document.write(&#39;&lt;img src=&quot;&quot; srcset=&quot;{made}&quot; alt=&quot;&quot;&gt;&#39;);
        &lt;/script&gt;
        &lt;noscript&gt;
            &lt;p class=&quot;noscript-picture&quot;&gt;&lt;img src=&quot;{made}&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;/noscript&gt;
    {/exp:ce_img:pair}
&lt;/picture&gt;
</code></pre></noscript></div>
</p>

<p>Not what’s a lot of code, so let’s just look at one segment of that jumble:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-excerpt.html'></script>
<noscript><pre><code>{exp:ce_img:pair
    src=&quot;{content_focal_image}&quot;
    filename_suffix=&quot;_full&quot;
    width=&quot;940&quot;
    allow_scale_larger=&quot;yes&quot;
    crop=&quot;yes&quot;
    interlace=&quot;yes&quot;
    cache_dir=&quot;/&quot;
    }
    &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 40em)&quot;&gt;
{/exp:ce_img:pair}</code></pre></noscript></div>
</p>

<p>This is an example using CE Image’s tag pair option, which lets you control the markup output. In the opening tag, we set several properties:</p>

<ul>
<li><code>src</code> is the path to the original image uploaded by content authors;</li>
<li><code>filename_suffix</code> is the suffix we want added to the cached file to differentiate it from others in the cache (and make the files more easily scannable);</li>
<li><code>width</code> is our desired output width for the generated image;</li>
<li><code>allow_scale_larger</code> does exactly what you’d expect: it dictates whether or not CE Image should scale the image to reach the desired width;</li>
<li><code>crop</code> tells CE Image whether it’s okay to crop the image;</li>
<li><code>interlace</code> tells CE Image to use image interlacing (which can speed load time); and</li>
<li><code>cache_dir</code> tells CE Image where to store the cached image (in relation to our global configuration)</li>
</ul>


<p>Then, within the tag pair is the <code>source</code> element with the <code>srcset</code> value set to the path to the file CE Image generated (referenced by the <code>made</code> variable) and the associated media query.</p>

<p>Multiply that a few times for the different sizes and you have the full <code>picture</code> element.</p>

<p>Now that’s all well and good, but shortly after launch, <a href="http://ericportis.com/">Eric Portis</a> wrote <a href="http://ericportis.com/posts/2014/srcset-sizes/">an amazing post explaining how the <code>srcset</code> and <code>sizes</code> attributes operate</a> and it cleared up a lot of my confusion on the matter. He convinced me that the age-old <code>img</code> element, with these new attributes, would be far more maintainable. With a fire in my belly, I rewrote the markup:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=simple-resize.html'></script>
<noscript><pre><code>&lt;img class=&quot;page__image-header__photo&quot; alt=&quot;&quot;
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_small&quot;
        width=&quot;480&quot;
        height=&quot;320&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        } 
        src=&quot;{made}&quot;
        srcset=&quot;{made} 480w,
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_medium&quot;
        width=&quot;800&quot;
        height=&quot;600&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        {made} 800w,
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_full&quot;
        width=&quot;940&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        {made} 940w&quot;
    {/exp:ce_img:pair}
    &gt;</code></pre></noscript></div>
</p>

<p>The CE Image behavior is exactly the same, but the resulting markup is much clearer:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=srcset-result.html'></script>
<noscript><pre><code>&lt;img class=&quot;page__image-header__photo&quot; alt=&quot;&quot;
     src=&quot;about_480_320_int_c1_small.jpg&quot;
     srcset=&quot;about_480_320_int_c1_small.jpg 480w,
             about_800_350_int_c1_medium.jpg 800w,
             about_940_343_int_s_c1_full.jpg 940w&quot;&gt;</code></pre></noscript></div>
</p>

<p>The added bonus of this approach is that I am not hard-coding any media queries and the browser gets to make the ultimate decision of which image to request. All I am doing is telling the browser the image options and their respective widths within the <code>srcset</code> attribute. As all of the images take up 100% of their containers, I didn’t even need to use the <code>sizes</code> attribute. Easy peasy.</p>

<h2>&ldquo;Nice to Have&rdquo; Images</h2>

<p>Not every image adds something to the page. Some are purely optional, a visual enhancement. In order to reduce the size of pages on smaller screens, we often choose to &ldquo;lazy load&rdquo; certain image assets after page load, when we know there is enough room to display the image or when we feel it would be an enhancement to the design.</p>

<p>Now some of you might be wondering: <em>Why not just <code>display:none</code> below a certain threshold?</em> Well, I’ll tell you: images that are hidden with CSS are still requested by the browser. That means users who don’t see the images are still paying to download them (whether in terms of time waiting for the page to render or actual money on a metered connection). That kinda sucks for them. We should show our users a bit more respect and only request the images when we need them.</p>

<p>We wrote <a href="https://github.com/easy-designs/easy-lazy-images.js">a lazy-loading image script</a> a few years back and have battle tested it on numerous sites to great success. It’s all based on a simple markup pattern:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-markup.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
     data-image-src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;&gt;&lt;/div&gt;</code></pre></noscript></div>
</p>

<p>The <code>data-img-src</code> attribute defines the path to the &ldquo;nice to have&rdquo; image and then the JavaScript adds the image element into the page when the appropriate conditions are met:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-result.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
    data-image-src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;
    data-image-loaded=&quot;&quot;
    &gt;
    &lt;img alt=&quot;&quot; src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;&gt;
&lt;/div&gt;</code></pre></noscript></div>
</p>

<p>Pretty simple. It even supports <code>srcset</code>:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-srcset.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
     data-image=&quot;about_480_320_int_c1_small.jpg&quot;
     data-image-srcset=&quot;about_480_320_int_c1_small.jpg 480w,
                      about_800_350_int_c1_medium.jpg 800w,
                      about_940_343_int_s_c1_full.jpg 940w&quot;&gt;&lt;/div&gt;</code></pre></noscript></div>
</p>

<p>The <a href="https://github.com/easy-designs/easy-lazy-images.js#usage">full documentation is up on Github</a>.</p>

<p>Implementing this in the context of CE Image was a breeze and builds on the <code>source</code> pattern I showed earlier:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loading.html'></script>
<noscript><pre><code>{if testimonial_photo}
    {exp:ce_img:pair
        src=&quot;{testimonial_photo}&quot;
        width=&quot;223&quot;
        height=&quot;140&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;div class=&quot;module__image image--lazy&quot; data-image-src=&quot;{made}&quot;&gt;&lt;/div&gt;
    {/exp:ce_img:pair}
{/if}</code></pre></noscript></div>
</p>

<p>We are only just beginning to scratch the surface of what’s possible with adaptive images and I am sure we will come up with newer, better ways to do this stuff. Heck, there may even be an adaptive images add-on in the pipeline for ExpressionEngine. But, in the meantime, if you are trying to implement adaptive images with ExpressionEngine, CE Image is a good way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling Webmentions in Jekyll]]></title>
    <link href="http://aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll/"/>
    <updated>2014-11-18T17:01:08-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll</id>
    <content type="html"><![CDATA[<p>While I am really happy with my choice to move away from a dynamic website/blog to a static one—powered by <a href="http://octopress.org/">Octopress</a>, hosted for free on <a href="https://github.com">Github</a>—it’s been pretty limiting when it comes to integrating comments and other more necessarily dynamic components.</p>

<!-- more -->


<p>Like many folks in the Octopress/Jekyll community, I’ve opted to use <a href="https://disqus.com/websites/">Disqus’ free service to manage comments</a>, but I’m not in love with it. First of all, it requires JavaScript. You know <a href="/notebook/2014/a-fundamental-disconnect/">my stance on that</a>. Now I’m willing to accept comments as an <a href="https://en.wikipedia.org/wiki/Progressive_enhancement">enhancement</a> to the reading process, but it doesn’t mean I like the situation. Secondly, they control the content and if they go away, so do all of your comments.</p>

<p>I’ve become quite intrigued by the potential of <a href="http://indiewebcamp.com/webmention">webmentions</a> as a way of taking back control of our content. They are a brilliant way to loosely connect related posts on personal blogs and third-parties like Twitter, Facebook, and Google+. With my mind unable to think about anything else, I decided to see what it would take to get webmentions up and running here.</p>

<p>At first I went to <a href="http://aaronparecki.com/">Aaron Parecki</a>’s <a href="http://webmention.io">webmention.io</a> project and looked through <a href="https://github.com/aaronpk/webmention.io/blob/master/README.md">the docs</a>. It looked like it could fit the bill, but I noticed there was no way to directly apply for an account, so I moved on to <a href="http://voxpelli.com/">Pelle Wessman</a>’s <a href="https://webmention.herokuapp.com/">webmention Heroku app</a>.</p>

<p>I really like Pelle’s solution and easily implemented it locally, but the JavaScript reliance was nagging at me. I returned to webmention.io and decided to <a href="https://twitter.com/aarongustafson/status/534394789152948224">reach out to Aaron</a> on the off change he’d give me access to his service. <a href="https://twitter.com/aaronpk/status/534398408815964160">He responded pretty quickly</a> and I was off to the races.</p>

<p>In preparation for building my plugin, I looked over a few other Jekyll plugins (Octopress is built on Jekyll) and got a sense of the structure and how to go about creating a <a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Programmers#create-your-own-tags">Liquid tag</a> (Liquid being the default templating language used by Jekyll). Then I created a new Ruby file and got cracking. Now I’ll warn you, I don’t normally write Ruby. The last time I did it professionally was when <a href="https://github.com/rails/rails/tree/v0.12.0">Rails was at 0.12</a>, so that should tell you something. That said, it was pretty easy to get back into the flow and I managed to put together <a href="https://github.com/aarongustafson/jekyll-webmention_io">a basic Liquid Tag for webmentions and webmention counts</a> in about two hours.</p>

<p>The tag to display webentions for a page is pretty simple:</p>

<p><div><script src='https://gist.github.com/cb15ead6bf3a72b8f92a.js?file=webmentions.html'></script>
<noscript><pre><code>{% webmentions YOUR_URL %}</code></pre></noscript></div>
</p>

<p>This tag outputs a container <code>div</code> and an ordered list of every webmention found when the site is generated (or previewed). To show the current webmention count, you use a slightly different tag which just outputs a number:</p>

<p><div><script src='https://gist.github.com/cb15ead6bf3a72b8f92a.js?file=webmention_count.html'></script>
<noscript><pre><code>{% webmention_count YOUR_URL %}</code></pre></noscript></div>
</p>

<p>These two tags allows me to bypass the JavaScript used in webmention.io’s integration examples and have Ruby consult the API directly. The plugin then creates the necessary markup using the JSON data the API provided.</p>

<p>Unfortunately, Liquid tags are only processed by Jekyll when the site is compiled. The actual site exists only as static HTML files on Github’s servers, so any webmentions created after I generate the site won’t show up. That’s a little less than ideal.</p>

<p>I don’t regenerate the site that often, nor do I want to set up a cron to automatically do it in order to update the webmentions. I took the afternoon to mull over some options to address this challenge. <em>How do I add in missing webmentions dynamically when the site itself is static?</em></p>

<p>Then it dawned on me: JavaScript can fill in the gaps. Using the examples Aaron had put together, I cobbled together a script to update the webmention list and fill in any missing mentions. In the interest of reducing dependencies, I used <a href="http://vanilla-js.com">the infamous Vanilla.js library</a> to create and insert new webmentions when the page was loaded.</p>

<p>And, as an added bonus, I adapted another bit of Aaron’s code to make the webmention list update in real time as new mentions are created elsewhere on the Web. The code uses <a href="http://www.w3.org/TR/websockets/">WebSockets</a>, <a href="http://caniuse.com/#feat=websockets">if available</a>, to make the magic happen. It’s pretty nifty and I tip my hat to Aaron for implementing that feature in the webmention.io service.</p>

<p>It’s been a pretty fun mini-project. In the end, I created a useful bit of kit that provides three distinct experiences:</p>

<ol>
<li>Static webmentions collected when the site was generated form the baseline experience;</li>
<li>JavaScript-enabled browsers get any webmentions that were published since I last generated the site; and</li>
<li>JavaScript-enabled browsers with WebSockets support get real-time updates with any webmentions that are published after the page loads.</li>
</ol>


<p>And, even better, the next time I generate the site, any missing webmentions will be inserted into the static files for safe keeping.</p>

<p>That’s a pretty nice continuum of experience if you ask me.</p>

<p>If you are a Jekyll or Octopress user, you can pick up <a href="https://github.com/aarongustafson/jekyll-webmention_io">the plugin and optional JavaScript file on Github</a>. Feel free to fork and sent me your bug fixes and enhancements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Do We Own?]]></title>
    <link href="http://aaron-gustafson.com/notebook/what-do-we-own/"/>
    <updated>2014-11-17T09:43:54-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/what-do-we-own</id>
    <content type="html"><![CDATA[<p>My good friend <a href="http://adactio.com">Jeremy</a> is <a href="https://adactio.com/journal/6801">incredibly excited</a> about the <a href="http://indiewebcamp.com/">Indie Web movement</a> and I am right there with him. I love the idea of owning your content and then syndicating it out to social networks, photo sites, and the like. It makes complete sense… <a href="http://www.gyford.com/phil/writing/2009/04/28/geocities.php">Web-based services have a habit of disappearing</a>, so we shouldn’t rely on them. The only Web that is permanent is the one we control.</p>

<!-- more -->


<p>But going down this rabbit hole got me wondering <em>how much do we really control?</em> And beyond that, <em>what do we own?</em></p>

<p>To borrow <a href="http://aworkinglibrary.com/writing/index-cards/">a quote from Mandy Brown</a> (which also Jeremy referenced):</p>

<blockquote><p>No one owns this domain but me, and no one but me can take it down. I will not wake up one morning to discover that my service has been “sunsetted” and I have some days or weeks to export my data (if I have that at all). These URLs will never break.</p></blockquote>

<p>I don’t know if her statement is true. Idealistically, I want it to be true, but consider the following:</p>

<ol>
<li><strong>We rent domain names through registrars.</strong> We “purchase” domain names, but we must renew them from time to time to remain in control. Assuming you keep up the payments, they can still be <a href="http://www.wired.com/2012/03/feds-seize-foreign-sites/">seized for any number of reasons</a> or <a href="https://en.wikipedia.org/wiki/Domain_hijacking">they can be stolen</a>. Or the <a href="https://en.wikipedia.org/wiki/RegisterFly">registrar can go out of business</a> and you have to scramble to move it to a new registrar.</li>
<li><strong>Most of us rent space on the Web.</strong> I can’t think of a single friend of mine who still personally hosts his or her website. As such, we are beholden to our hosts. Even if we keep on top of our payments, things can go wrong: They could <a href="https://wordpress.org/support/topic/acenet-hosting-crashed-and-lost-all-my-data-what-do-i-do-now">crash or have another issue</a> and <a href="http://www.startupsmart.com.au/technology/crazy-domains-loses-web-hosting-data-as-startups-suffer/2014051912326.html">lose all of our data</a>. <a href="http://www.danrichard.com/2014/03/30/p2lhosting-is-now-closed-thank-you-everyone/">They could go under</a>. Or they could simply <a href="http://webdesignfromscratch.com/blog/how-123reg-almost-crippled-my-business/">lose your domain</a>.</li>
</ol>


<p>Knowing all of this—and realizing that when I am dead and gone all of the content I created could be lost to the ether if my family doesn’t know how to keep things going or doesn’t care to keep making these payments—I am left wondering <em>how do we achieve the permanence of print on the Web?</em></p>

<p>I don’t have any answers, so I pose it as an open question to the Indie Web community. If you have some thoughts, I encourage you to post them on your own site and use <a href="http://indiewebcamp.com/webmention">webmentions</a> to add them to this page. Or you can default to <a href="#disqus">the comments</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Web Is for Everyone]]></title>
    <link href="http://aaron-gustafson.com/notebook/the-web-is-for-everyone/"/>
    <updated>2014-11-06T15:47:54-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/the-web-is-for-everyone</id>
    <content type="html"><![CDATA[<p><em>I gave this speech as the closing keynote at <a href="http://a11yqc.org/">A11yQC</a>, a conference on Web accessibility, on 14 October 2014 in Québec City, Canada. I have published my script here as the slides can’t really convey its message on their own.</em></p>

<p>We, as an industry, tend to have a pretty myopic view of experience. Those of us who work day-to-day in accessibility probably have a broader perspective than most, but I would argue that even we all fall short now and again when it comes to seeing the Web as others do.</p>

<!-- more -->


<h2>I: We are surrounded by technology</h2>

<p>We live in a bubble. We are surrounded by technology. Most of us grew up on desktops and laptops. Most of us carry at least one device on us at all times. For some of us, it’s a smartphone of some sort. For others it might be some sort of wearable—a fitness tracker or smart watch. And I’m willing to bet that a large number of us here in this auditorium may even have three or more devices on us at this very moment. I know I do.</p>

<p>And our technology is some of the newest, fastest, and most fully-featured in the world. Our devices are incredibly powerful and make us even more powerful, enabling us to tackle a wide range of tasks with ease. Most of the smartphones we carry come standard with pretty impressive assistive technology built in too, from adjustable text sizes to voice assist and screen reading tools to haptic, and other forms of feedback.</p>

<p>And they are brimming with sensors that extend our natural abilities: GPS, cameras, accelerometers. If you’re blind, your smartphone can help you pick out a matching outfit by identifying complementary colors. It can tell you who is standing in front of you by running facial recognition software. It can help you take a photograph of a document and then read it to you.</p>

<p>This is amazing stuff.</p>

<p>And, if headlines are to be believed, the smartphone revolution is spreading like wildfire. It seems nearly every other week there is some new report about how smartphone sales are continuing to soar. Heck, no one even seems to mention the humble feature phone anymore. And if you keep up with the tech press, CPUs, GPUs, operating systems and browsers keep getting faster and faster and JavaScript is the savior of us all.</p>

<p>The sky is the limit!</p>

<p>Beyond the devices we carry with us everywhere, more and more of our homes are being assimilated into the Borg of the Internet through smart appliances and fixtures like Nest. Tools like these make it easier to control our homes (and our budgets). They empower previously dependent people to live more independent lives.</p>

<p>And of course there’s the coolness factor of being able to turn on your heat while on your way home from work. These advancements are incredible!</p>

<p><figure id="fig-2014-11-06-01" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/01-sm.jpg"
     srcset="/i/posts/2014-11-06/01-lg.jpg 1920w, /i/posts/2014-11-06/01-md.jpg 600w, /i/posts/2014-11-06/01-sm.jpg 320w"
     alt="Two pie charts comparing Internet usage in the U.S. and Canada."
     &gt;
</code></pre>

<p></figure></p>

<p>Of course, what enables all of these things to be as amazing as they are is our ubiquitous connectivity. According to <a href="http://www.InternetLiveStats.com">Internet Live Stats</a>, roughly 86% of Americans use the Internet. You Canadians are a wee bit more “online” at 93%.</p>

<p><figure id="fig-2014-11-06-02" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/02-sm.jpg"
     srcset="/i/posts/2014-11-06/02-lg.jpg 1920w, /i/posts/2014-11-06/02-md.jpg 600w, /i/posts/2014-11-06/02-sm.jpg 320w"
     alt="Two pie charts comparing the number of mobile data connections in the U.S. and Canada."
     &gt;
</code></pre>

<p></figure></p>

<p>America does have you beat when it comes to mobile connectivity: there are over 100 mobile data subscriptions per 100 individuals in the U.S. (probably because of the whole multi-device thing). Mobile connections in Canada are around 53 per 100 people. <small><a href="http://www.oecd.org/sti/broadband/oecdbroadbandportal.htm">(source)</a></small></p>

<p><figure id="fig-2014-11-06-03" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/03-sm.jpg"
     srcset="/i/posts/2014-11-06/03-lg.jpg 1920w, /i/posts/2014-11-06/03-md.jpg 600w, /i/posts/2014-11-06/03-sm.jpg 320w"
     alt="Two pie charts comparing wired Internet connections in the U.S. and Canada."
     &gt;
</code></pre>

<p></figure></p>

<p>Wired connectivity is a bit lower: 30 for every 100 in the U.S. and 33 for every 100 in Canada. <small><a href="http://www.oecd.org/sti/broadband/oecdbroadbandportal.htm">(source)</a></small></p>

<p><figure id="fig-2014-11-06-04" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/04-sm.jpg"
     srcset="/i/posts/2014-11-06/04-lg.jpg 1920w, /i/posts/2014-11-06/04-md.jpg 600w, /i/posts/2014-11-06/04-sm.jpg 320w"
     alt="A bar chart depicting the cost range, per megabit per month, in the U.S. and Canada."
     &gt;
</code></pre>

<p></figure></p>

<p>Connectivity is relatively cheap for you Canadians as well. You pay somewhere in the neighborhood of 39¢-$9.86 per megabyte per month. In the U.S., fees range widely from 53¢ to a whopping $41.70 per megabyte per month. <small><a href="http://www.oecd.org/sti/broadband/oecdbroadbandportal.htm">(source)</a></small></p>

<p>Comcast and Rogers may be equally hated on our respective sides of the 49th parallel, but Comcast clearly sucks just a little bit more. (America!)</p>

<p>This technology and access makes it possible for us to live richer lives and post photos of our cats and kids on Instagram, but it has insulated us. We live in a fantasy world of speed, high definition, and Beats by Dre. Sadly, our experience is far from the reality most of the world lives in.</p>

<p><figure id="fig-2014-11-06-05" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/05-sm.jpg"
     srcset="/i/posts/2014-11-06/05-lg.jpg 1920w, /i/posts/2014-11-06/05-md.jpg 600w, /i/posts/2014-11-06/05-sm.jpg 320w"
     alt="A bar chart comparing the average monthly incomes of people living in the U.S., Canada, China, and India."
     &gt;
</code></pre>

<p></figure></p>

<p>The average American takes home $3,263 a month. For the average Canadian, that figure is $2,724. By comparison, the average worker in China makes $656 a month. But that is a fortune compared to folks in India, who only take home $295 for a month of hard work. <small><a href="http://en.wikipedia.org/wiki/List_of_countries_by_average_wage">(source)</a></small></p>

<p>How much is an unlocked iPhone 6 again? It starts around $649. That’s more than two months salary for the average Indian. The Galaxy S5? $799 or nearly three months of hard work. In places like India, feature phones are still quite prevalent. And even when a smartphone is introduced for their market, it pales in comparison to the sort of tech we are used to seeing.</p>

<p><figure id="fig-2014-11-06-06" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/06-sm.jpg"
     srcset="/i/posts/2014-11-06/06-lg.jpg 1920w, /i/posts/2014-11-06/06-md.jpg 600w, /i/posts/2014-11-06/06-sm.jpg 320w"
     alt="The Samsung Galaxy S5 smartphone with a specification summary (relevant details follow)."
     &gt;
</code></pre>

<p></figure></p>

<p>Here we have <a href="http://www.samsung.com/gr/microsite/galaxys5/">Samsung’s flagship Galaxy S5</a> with an amazing set of specs. A 16GB camera?! A quad-core processor?! This is the stuff of dreams for anyone who has been working with computers for more than 10 years. My first desktop was a 5150.</p>

<p>No not <a href="https://en.wikipedia.org/wiki/5150_(album">that awesome Van Halen record</a>), <a href="http://www-03.ibm.com/ibm/history/exhibits/pc25/pc25_intro.html">this beast from IBM</a>:</p>

<p><figure id="fig-2014-11-06-08" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/08-sm.jpg"
     srcset="/i/posts/2014-11-06/08-lg.jpg 1920w, /i/posts/2014-11-06/08-md.jpg 600w, /i/posts/2014-11-06/08-sm.jpg 320w"
     alt="The IBM 5150 personal computer."
     &gt;
</code></pre>

<p></figure></p>

<p>It weighted over 20 lbs, 28 lbs with two floppy drives. The screen weighed another 13 lbs and the keyboard was 6 lbs. It maxed out at 256K of memory and offered 40K of read only memory. I couldn‘t even find a spec detailing how slow the processor was, but let’s just say that the computer I began my Web career with nearly 15 years later was only a Pentium 90 with something like 16 MB of RAM.</p>

<p>And here, this pocket-sized computer just blows all of that out of the water.</p>

<p><figure id="fig-2014-11-06-09" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/09-sm.jpg"
     srcset="/i/posts/2014-11-06/09-lg.jpg 1920w, /i/posts/2014-11-06/09-md.jpg 600w, /i/posts/2014-11-06/09-sm.jpg 320w"
     alt="The Intex Cloud FX smartphone with specification summary (relevant details follow)."
     &gt;
</code></pre>

<p></figure></p>

<p>By contrast, here we have <a href="http://www.intexmobile.in/product_detail.aspx?PID=191&amp;PCatID=3">Intex’s Cloud FX</a>, a new phone with specs that read like the state of the art in 2007. A crappy camera, no front camera, a slow 1 GHz processor, a paltry 128 MB of RAM and barely double that in internal storage. It’s a crappy phone by our standards.</p>

<p>But that’s a Firefox OS phone aimed at the Indian market vs. an Android one aimed at the “developed” world. Perhaps you’d like to look at a more apples-to-apples comparison:</p>

<p><figure id="fig-2014-11-06-10" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/10-sm.jpg"
     srcset="/i/posts/2014-11-06/10-lg.jpg 1920w, /i/posts/2014-11-06/10-md.jpg 600w, /i/posts/2014-11-06/10-sm.jpg 320w"
     alt="The BLU Dash Jr K smartphone with specification summary (relevant details follow)."
     &gt;
</code></pre>

<p></figure></p>

<p>Here we have the <a href="http://www.gsmarena.com/blu_dash_jr-5662.php">BLU Dash Jr K</a>.</p>

<p>Both it and the Galaxy S5 run Android 4.4 (Kitkat), but that’s where their similarities end. Look at the resolution of the Dash Jr K: 320×480 versus the 1920×1080 of the S5. Look at the processor speed. Look at the RAM.</p>

<p>Now, honestly, how many of you would willingly carry the Dash Jr K or the Cloud FX as your primary phone? Maybe as a laugh, maybe ironically, but I highly doubt many in our profession would subject themselves to that. Why? Because we don’t have to.</p>

<p>Now I don’t know your salary, but I’m willing to bet you make more money and have far more disposable income available to spend on cutting edge gadgets than most people in the world. Surely that’s the case when you compare us to China and India, but it’s equally true here in North America.</p>

<p>In the U.S., we see stats like “Smartphone sales accounted for nearly 85% of all mobile phone sales” and “Smartphones have reached 50% penetration” with relative frequency. But those headlines often lead us to draw incorrect conclusions about what devices people actually use to access the Web.</p>

<p>The dirty little secret behind that 50% penetration number is that the penetration in question was concentrated in a scant 30% of U.S. households. Kinda burying the lead if you ask me. <small><a href="http://www.chetansharma.com/usmarketupdateq12013.htm">(source)</a></small></p>

<p><figure id="fig-2014-11-06-12" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/12-sm.jpg"
     srcset="/i/posts/2014-11-06/12-lg.jpg 1920w, /i/posts/2014-11-06/12-md.jpg 600w, /i/posts/2014-11-06/12-sm.jpg 320w"
     alt="A pie chart breakdown of the findings by the Pew Research Center on smartphone penetration by household income (relevant details follow)."
     &gt;
</code></pre>

<p></figure></p>

<p>The Pew Research Center released a study earlier this year that showed smartphone penetration in the US, broken down by income bracket. As expected, the higher the household income, the more likely you were to find someone with a smartphone.</p>

<p>In the &lt; $30,000 income bracket, smartphones were found in 47% of households. But it starts to get really interesting when you cross-reference that data with how many people fall into those income brackets. <small><a href="http://www.pewinternet.org/2014/02/27/part-1-how-the-internet-has-woven-itself-into-american-life/">(source)</a></small></p>

<p><figure id="fig-2014-11-06-13" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/13-sm.jpg"
     srcset="/i/posts/2014-11-06/13-lg.jpg 1920w, /i/posts/2014-11-06/13-md.jpg 600w, /i/posts/2014-11-06/13-sm.jpg 320w"
     alt="The Pew Research Center’s findings when compared to U.S. Census Data (relevant details follow)."
     &gt;
</code></pre>

<p></figure></p>

<p>$30,000 was the average income in the U.S. in 2013. And, according to the 2010 census, the overwhelming majority of American households earn less than that. <small><a href="http://www.census.gov/2010census/data/">(source)</a></small></p>

<p>Now both the Samsung Galaxy S5 and the BLU Dash are technically smartphones, but one costs $43 and the other costs $799. On a limited budget, which do you think you’d be more likely to get?</p>

<p>Sure, in the US, carriers subsidize phone prices, but even the subsidized $199 AT&amp;T offers the S5 for (with a 2-year agreement) ends up costing $1319 once you factor in the $40 activation and the minimum of $45 a month for a data plan.</p>

<p>So again I’ll ask: On a limited budget, which do you think you’d be more likely to get?</p>

<p>So even if a household has a smartphone, there’s probably decent odds on it being something a little lackluster compared to what we are used to carrying.</p>

<p>While it may not be a big deal for us to pay $60, $100, or more a month for mobile data access with fast speeds and high bandwidth limits, that would be a burden for most people. It’s worth noting that the cheaper pay-as-you-go plans typically have substantially lower data caps, frequently cost more per megabit, and often run at far slower speeds. Accordingly, while the Galaxy S5 supports blazingly fast 4G LTE speeds, both the Cloud FX and the Dash Jr K run on 2G technology.</p>

<p><figure id="fig-2014-11-06-14" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/14-sm.jpg"
     srcset="/i/posts/2014-11-06/14-lg.jpg 1920w, /i/posts/2014-11-06/14-md.jpg 600w, /i/posts/2014-11-06/14-sm.jpg 320w"
     alt="A photo of a Blackberry device experiencing an error loading a webpage because the page was too large. Photo Credit: Brad Frost."
     &gt;
</code></pre>

<p></figure></p>

<p>All of this is to say that we must be hyper-aware of how big our Web pages are. Large pages with tons of high-resolution images cost our users real money and, frankly, waste their time. Some might not even load. Big Web pages are a barrier to access.</p>

<p>Beyond page size, we should also be concerned with how much work we we are requiring of the browser. JavaScript-intensive sites and applications can run really poorly on devices with slow processors and minimal RAM, like the BLU Dash Jr K or the Intex Cloud FX.</p>

<p>These are just a few of the concerns we’re having to deal with today, and only about a third of our planet is online. There are 4.8 billion people with no Internet access. But it’s coming. And when it happens, we will likely have even more to deal with. Like language barriers.</p>

<p><figure id="fig-2014-11-06-15" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/15-sm.jpg"
     srcset="/i/posts/2014-11-06/15-lg.jpg 1920w, /i/posts/2014-11-06/15-md.jpg 600w, /i/posts/2014-11-06/15-sm.jpg 320w"
     alt="A pie chart comparison of the global population that speaks English versus the percentage of the Web that is in English."
     &gt;
</code></pre>

<p></figure></p>

<p>Consider this: <a href="http://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers">About 11.7% of the world speaks English as its first or second language</a> yet <a href="http://en.wikipedia.org/wiki/Languages_used_on_the_Internet">55.7% of the Web is in English</a>. (French is spoken by roughly 1.4% of the world and 4% of the Web is in French.)</p>

<p><figure id="fig-2014-11-06-16" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/16-sm.jpg"
     srcset="/i/posts/2014-11-06/16-lg.jpg 1920w, /i/posts/2014-11-16/15-md.jpg 600w, /i/posts/2014-11-06/16-sm.jpg 320w"
     alt="Pie charts detailing the percentage of people in India and China who speak English."
     &gt;
</code></pre>

<p></figure></p>

<p>This presents some significant challenges as the Web expands into places like India and China. Only 18.61% of India’s 1.2 billion people speak English as a first, second, or even third language. In China, only about 0.73% of their 1.2 billion people speak English. Network availability is only the first of many hurdles to accessing the Web for much of the planet. <small><a href="http://en.wikipedia.org/wiki/List_of_countries_by_English-speaking_population">(source)</a></small></p>

<p>We need to look beyond our technological and cultural bubble and consider how others experience the Web. As an industry, we must figure out how we can make their experiences better.</p>

<h2>II: We are UX professionals</h2>

<p>We are technologists who focus on accessibility, the capacity to tackle these challenges should come naturally to us. We were drawn to this field because we empathize with the struggles of others and want to help empower them to live independently.</p>

<p>We are user experience professionals and yet we’re often pigeon-holed outside of that practice. Our knowledge and contributions are often seen as only being applicable for people with “disabilities.” But our purview goes way beyond helping people with less than perfect vision, hearing, or mobility. Our purview is improving Web experiences for all people, regardless of physical or mental abilities, gender, race, or language.</p>

<p>Our purview is user experience and we need to assert ourselves and our role in that capacity.</p>

<p>More than most, we understand the importance of experience, of access, of independence because we work with people for whom “little things” like the ability to press a button can be a big problem. And beyond that, we also understand that experience is not a binary thing. <strong>It is a continuum.</strong></p>

<p>This is a crucial fact that the Web industry is only just beginning to come to terms with. <strong>We can help ease that transition.</strong></p>

<p>We are the champions of the egalitarian dream: equality of opportunity with the understanding that it does not guarantee equality of outcome or experience. We are pragmatic idealists who want to enable everyone access to amazing products and services.</p>

<p>We provide <em>tremendous</em> business value.</p>

<p>But we have a lot of work to do.</p>

<p>Sadly, many people still don’t value accessibility. They don’t get why it is important. They see it as expensive. They see it as a “nice to have”. They see it as an add-on.</p>

<p>I have gotten this reaction from designers. I have gotten it from developers. I have gotten it from other user experience professionals. And I have most often gotten it from managers and business owners. I’m sure you have as well.</p>

<p>I once had someone tell me he didn’t need to make his website accessible because he sold televisions and “blind people don’t watch TV.” I was floored. I mean holy crap!? This guy had no idea.</p>

<p>I had to educate him, but I needed to do it softly. I need to explain to him that his view of “special needs” was wrong. I had to be gentle because people don’t often react well to being told their world-view is fundamentally flawed. I’m sure I’m not the only one in this room who has been in a situation like this either.</p>

<p>If our primary job is to empower people to live independently, our second job is surely to educate the world, not just on how to make the Web more accessible, but why it matters. <strong>We need to bring everyone into the fold.</strong></p>

<p><figure id="fig-2014-11-06-17" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/17-sm.jpg"
     srcset="/i/posts/2014-11-06/17-lg.jpg 1920w, /i/posts/2014-11-06/17-md.jpg 600w, /i/posts/2014-11-06/17-sm.jpg 320w"
     alt="A photo of the philosopher John Rawls."
     &gt;
</code></pre>

<p></figure></p>

<p>I love exercises that create opportunities for revelation. One of my favorites originates from John Rawls. Rawls was a philosopher who used to run a social experiment with students, church groups, and the like.</p>

<p>In the experiment, individuals were allowed to create their ideal society. It could follow any philosophy. It could be a monarchy or democracy or anarchy. It could be capitalist or socialist. The people in this experiment had free rein to control absolutely every facet of the society… but then he’d add the twist: They could not control what position they occupied in that society.</p>

<p>This twist is what John Harsanyi—an early game theorist—refers to as the <a href="https://en.wikipedia.org/wiki/Veil_of_ignorance">“Veil of Ignorance”</a> and what Rawls found, time and time again, was that individuals participating in the experiment would gravitate toward creating the most egalitarian societies.</p>

<p>It makes sense: what rational, self-interested human being would treat the elderly, the sick, people of a particular gender or race or creed or color, poorly if they could find themselves in that position?</p>

<p>We’re often put in a box and told to only concern ourselves with folks with “special needs.” Well news flash: <strong>we all have special needs</strong>. Some we’re born with. Some we develop. Some are temporary. Some have nothing to do with us personally, but are situational or purely dependent on the hardware we are using, the interaction methods we have available to us, or even the speed at which we can access the Internet or process data.</p>

<p>We need to look beyond the world of assistive Web technology and explain the value and insight we bring to approaches like Responsive Web Design. After all, what is RWD about if not access? Yes, its fundamental tenets are concerned with visual design, but in terms of the big picture, they’re all about providing the best possible reading experience. Responsive web design is also a perfect example of the continuum of experience we are so intimately familiar with.</p>

<p>We understand special needs. We understand fallbacks. And we understand how to design robust experiences that work under a wide variety of conditions. That knowledge is invaluable.</p>

<p><strong>We are invaluable.</strong></p>

<h2>III: We are the future</h2>

<p>This is an incredibly exciting time to be working in accessibility. User experience is becoming central to how organizations work and how they design their products and accessibility should be at the core of that.</p>

<p><strong>This is our time!</strong></p>

<p>The more influence we have on the products and services our companies and clients create, the more places they can go and the more successful they will be.</p>

<p>Take WhatsApp for instance. Fundamentally, it is a chat application. That’s not terribly groundbreaking. But it developed into a way to avoid costly SMS messages. Still, even that’s not all that special: the App Store lists over 7,900 messaging apps for the iPhone.</p>

<p>What made WhatsApp matter was the shrewd business decision to move beyond the bubble. They chose to embrace access and embrace diversity. They made their messaging application available on a ton of platforms, especially low cost ones. So sure, they support iOS and Android, but unlike a lot of app developers, they officially support Android 2.1+, iOS 4.3+, Blackberry 4.7+, Symbian, Nokia Series 40, Windows Phone. Some of those aren’t even smartphone OSes!</p>

<p>While many may not consider this an “accessibility” win, it absolutely is. WhatsApp made a decision to open up access to their messaging application to people who were traditionally ignored by mobile app developers. And they were rewarded handsomely for this: as of last count, they had somewhere around 600 million users globally. And then there’s that little thing about them selling to Facebook for $19 billion.</p>

<p>And WhatsApp isn’t a fluke in benefiting from making itself more accessible: China’s WeChat boasts a user base of 600 million and Japan’s LINE has over 400 million users. All of these messaging platforms have benefitted greatly from embracing devices and technologies available to people outside of our bubble.</p>

<p>We can and should be advising our companies and clients on why and how to be more accessible. We need to look at the big picture and we should not be afraid to be bold in asserting that <strong>accessibility creates opportunity</strong>.</p>

<p>We already know that strong content guidelines pay dividends by creating opportunities for our content to work harder for us. Not only do they improve the readability of content on the sites we build, but they facilitate social sharing through more engaging summaries and headlines.</p>

<p>The clear, well-written, jargon-free content we advocate for is easier to translate into other languages. It also makes the content easier to follow via screen readers and other vocalization tools like <a href="http://www.readspeaker.com/">Readspeaker</a>, which in turn makes it possible to offer novel ways of accessing our content, like automated podcasts.</p>

<p>Our focus on semantic, meaningful, markup allows our content to be pulled into other contexts including focused reading apps like Pocket, Readability, and Instapaper.</p>

<p>And while we can certainly do a lot to make rich, JavaScript-based interactions far more accessible to assistive technology, our advocacy for progressive enhancement ensures that our content and tools work no matter what.</p>

<p><figure id="fig-2014-11-06-18" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/18-sm.jpg"
     srcset="/i/posts/2014-11-06/18-lg.jpg 1920w, /i/posts/2014-11-06/18-md.jpg 600w, /i/posts/2014-11-06/18-sm.jpg 320w"
     alt="Headline: “Sky’s internet service mistakenly blocks web-critical plugin” (Source: The Guardian)"
     &gt;
</code></pre>

<p></figure></p>

<p>Let’s say an ISP blocks jQuery as malware. No problem.</p>

<p><figure id="fig-2014-11-06-19" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/19-sm.jpg"
     srcset="/i/posts/2014-11-06/19-lg.jpg 1920w, /i/posts/2014-11-06/19-md.jpg 600w, /i/posts/2014-11-06/19-sm.jpg 320w"
     alt="Headline: “FCC to Marriott: No, you can’t force your customers onto terrible hotel WiFi” (Source: The Washington Post)"
     &gt;
</code></pre>

<p></figure></p>

<p>Let’s say the page is taking a long time to download on a high-latency mobile network (or hotel Wi-Fi). No big deal.</p>

<p>The products we build just work because we know that we don’t control how they are delivered.</p>

<p>It’s our job to educate others on this reality and to demonstrate why these are central to user experience.</p>

<h2>IV: We are Agents of Change</h2>

<p>The shift to handheld computers has been huge for accessibility. After all, the computers in our pockets are assistive technology. This is our world!</p>

<p>I’m going to make a somewhat bold prediction: while touch has been revolutionary in many ways toward improving digital access, voice is the future. And the user experience of voice-based interfaces is going to be critical in creating more opportunities for people to interact with and participate in the digital world.</p>

<p>We’ve got the jump on the other folks working in user experience when it comes to voice: We’ve been considering how interfaces sound for years. On top of that, we already understand how to design alternate interaction methods because we see experience as a continuum.</p>

<p>As voice UX technology—for example, Siri, Google Now, and Cortana—improves, we should be the ones people should look to as the experts. We will empower the next generation of websites and applications to become voice-enabled. And in so doing, we will improve the lives of billions. Because “accessibility” is not about disabilities, it’s about access and <strong>it’s about people</strong>.</p>

<p>Sure, we’ll make it easier to look up movie times and purchase tickets to see the latest <cite>Transformers</cite> debacle, but we will also empower the nearly 900 million people globally—over 60% of whom are female—that are illiterate. And that’s a population we have not traditionally viewed as our purview either.</p>

<p>We will create new opportunities for the poor and disadvantaged to participate in a world that has largely excluded them. You may not be aware, but 80% of Fortune 500 companies—think Target, Walmart—only accept job applications online or via computers.</p>

<p>We will enable people who have limited computer skills or who struggle with reading to apply for jobs with these companies.</p>

<p>We will empower immigrants to read lease agreements and their postal mail.</p>

<p>We will enable people with visual disabilities to vote, even on paper ballots, without human assistance.</p>

<p>We can help bridge the digital divide and the literacy gap. We can create opportunities for people to better their lives and the lives of their families. We have the power to create more equity in this world than most of us have ever dreamed.</p>

<p>This is an incredibly exciting time, not just for the accessibility experts, not just for user experience, not just the Web, but for the world! I can’t wait to see how awesome you make it!</p>

<p><figure id="fig-2014-11-06-20" class="media-container"></p>

<pre><code>&lt;img src="http://aaron-gustafson.com/i/posts/2014-11-06/20-sm.jpg"
     srcset="/i/posts/2014-11-06/20-lg.jpg 1920w, /i/posts/2014-11-06/20-md.jpg 600w, /i/posts/2014-11-06/20-sm.jpg 320w"
     alt="A photo of the opening ceremony of the 2012 London Olympic Games when Sir Tim Berners-Lee (creator of the World Wide Web) typed “This is for Everyone” across the stadium."
     &gt;
</code></pre>

<p></figure></p>

<p>Thank you.</p>
]]></content>
  </entry>
  
</feed>
