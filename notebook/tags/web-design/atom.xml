<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Web Design | Aaron Gustafson]]></title>
  <link href="http://www.aaron-gustafson.com/notebook/tags/web-design/atom.xml" rel="self"/>
  <link href="http://www.aaron-gustafson.com/"/>
  <updated>2015-05-06T10:09:16-07:00</updated>
  <id>http://www.aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lessons Learned From Atari]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/lessons-learned%20from-atari/"/>
    <updated>2015-05-05T15:05:40-07:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/lessons-learned from-atari</id>
    <content type="html"><![CDATA[<p>In watching <a href="http://www.slashfilm.com/watch-atari-game-over/"><cite>Atari: Game Over</cite></a>, I couldn&rsquo;t help but see all of the parallels between the early video game industry and the web design industry. The boys’ club… Engineers as rockstars… It&rsquo;s a tale of a meteoric commercial rise followed by a swift and dismal collapse.</p>

<!-- more -->


<p>The film centers around the urban legend of millions of <cite>E.T. The Videogame</cite> cartridges being buried in a landfill in New Mexico as Atari burying it&rsquo;s shame over producing such a bad video game. Many cite <cite>E.T. The Videogame</cite> as the reason for the collapse of the industry in 1983, but it wasn&rsquo;t the case.</p>

<p>Xbox co-creator <a href="https://twitter.com/seamusblackley">Seamus Blackley</a> offered this:</p>

<blockquote><p>The behavior patterns that created the conditions for the E.T. failure is what destroyed the video game industry.</p></blockquote>

<p>The behavior patterns in question: greed; ridiculous timelines (E.T. was conceived and programmed in 5 weeks by one man: <a href="http://en.wikipedia.org/wiki/Howard_Scott_Warshaw">Howard Scott Warshaw</a>); and hubris.</p>

<p>There are a lot of parallels with the Silicon Valley of today. Food for thought.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collected Reactions to //build/]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/collected-reactions-to-build/"/>
    <updated>2015-04-30T07:53:11-07:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/collected-reactions-to-build</id>
    <content type="html"><![CDATA[<p>I may work for Microsoft, but I don’t know everything that’s going on across the company. It’s big and I don’t have that kind of time.</p>

<!-- more -->


<p>Anyway <a href="http://aka.ms/ktlsyd">//build/</a>, the Microsoft conference, is going on right now and as you’d expect, there are a ton of new announcements. I’ve watched a few of the talks virtualy and am particularly excited about the new browser (whose name has finally been revealed): <a href="https://www.microsoft.com/en-us/windows/browser-for-doing">Microsoft Edge</a>. I’m also very interested to see where things go with <a href="https://www.microsoft.com/microsoft-hololens/en-us">HoloLens</a>.</p>

<p>One graphic that cropped up that blew my mind was this one talking about where Windows 10 is going:</p>

<p><figure id="fig-2015-04-30-01" class="media-container"></figure></p>

<p>You’ve often heard me discuss <a href="http://adaptivewebdesign.info/1st-edition/chapter-1.html">experience as a continuum</a>. Microsoft is living it.</p>

<p>If you didn’t watch the streaming talks and want to hear about what was announced from some independent sources, I’d recommend reading these:</p>

<ul>
<li><a href="http://www.wired.com/2015/04/microsoft-build-hololens/">Microsoft Shows HoloLens’ Augmented Reality Is No Gimmick</a> — <cite>Wired</cite>
A good overview of the possibilities of HoloLens with a recap of what was shown. I caught this demo on the lifestream. It was pretty impressive. I can’t wait to try a HoloLens myself.</li>
<li><a href="http://thenextweb.com/microsoft/2015/04/30/microsoft-opens-up-applications-for-developers-to-test-ios-and-android-app-conversion-tools/">Microsoft opens up applications for developers to test iOS and Android app conversion tools</a> — <cite>The Next Web</cite>
The Microsoft App Store is a little scant on first-rate programs right now, so in a play to make it stupid-simple for iOS and Android developers to run on Windows 10, the folks at Microsoft have built a conversion tool that ports the app for you. It’s worth noting that you can also port a website into a native Windows app. Smart move on Microsoft’s part if you ask me.</li>
<li><a href="http://thenextweb.com/microsoft/2015/04/30/hands-on-with-the-new-minimalist-microsoft-edge-browser/">Hands-on: The new Microsoft Edge browser is a picture of minimalism</a> — <cite>The Next Web</cite>
Obviously the web is where I live and work. I’ve been playing with early builds of the new Microsoft browser for a few months now and have been pretty happy with its speed and capabilities, but it is nice to read an outside perspective on it.</li>
<li><a href="http://gizmodo.com/microsoft-just-nonchalantly-showed-us-the-single-device-1701020050">Microsoft Just Nonchalantly Showed Us the Single-Device UI of the Future</a>
I don’t know about &ldquo;nonchalantly&rdquo;, but the whole Continuum feature is pretty amazing. The potential for being able to use the computer in your pocket with other peripherals is pretty intriguing. Imagine using your phone, a set of holographic or <a href="http://www.amazon.com/Cinemizer-1909-127-Multimedia-Video-Glasses/dp/B0091OI530/">virtual screen glasses</a>, and a bluetooth keyboard &amp; mouse to get work done on a plane. No need to worry about someone leaning back and breaking your laptop!</li>
<li><a href="http://techcrunch.com/2015/04/30/hololens-is-real/">HoloLens Hands-On: How We Built An App For Microsoft’s Augmented Reality Headset</a><br/>
One reporter’s experience developing for and playing with HoloLens. Sounds like it was pretty cool. I wonder if it can be tweaked to work for people with poor vision like me or if it fits nicely over glasses.</li>
<li><a href="http://www.wired.com/2015/05/microsofts-one-billion-device-vision-genius-next-impossible/">Microsoft’s Windows 10 Vision Isn’t As Simple as It Seems</a><br/>
A deeper analysis of Microsoft’s play for more developer (and consumer) mindshare.</li>
</ul>


<p><em>I will continue adding to this list as new &amp; interesting pieces come out</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Surviving Google’s “Mobilegeddon”]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/tips-for-surviving-googles-mobilegeddon/"/>
    <updated>2015-04-21T06:10:12-07:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/tips-for-surviving-googles-mobilegeddon</id>
    <content type="html"><![CDATA[<p>Today is the day <a href="http://www.economist.com/news/business-and-finance/21648947-worlds-biggest-search-engine-shakes-up-its-algorithms-mobilegeddon">Google updates it algorithm to take into account mobile-friendliness</a>. Here are a few tips that will help you embrace mobile without tearing your hair out.</p>

<!-- more -->


<h2>1. Embrace mobile-first CSS</h2>

<p>This is a quick win. I’ve done the mobile-first overhaul on a number of existing sites over the last few years and the best strategy I’ve found is this:</p>

<ol>
<li>Create two CSS files. Name the first something like &ldquo;basic.css&rdquo; and link to it with <code>media="all"</code>. Name the second something like &ldquo;advanced.css&rdquo; and link to it with <code>media="only screen"</code>.</li>
<li>Move all of your existing desktop-only CSS into advanced.css and wrap the rules in a media query corresponding to your design width (e.g. <code>@media (min-width:60em)</code> for a 960px max width).</li>
<li>Open a page from your site in a new browser window and make it as small as possible. Move any basic typographic and color styles from advanced.css to default.css and refresh the page. How does it look? Make the browser wider. Still acceptable? Awesome! This is the CSS you’ll serve to older browsers that don’t understand media queries and it forms the basis of your larger screen styles.</li>
<li>Shrink the browser back down to the smallest it can go and create a breakpoint for that size in advanced.css (e.g. <code>@media (min-width:10.5em)</code> if you want to small target devices like the <a href="https://getpebble.com/">Pebble</a>). Move any styles you want applied in this scenario from your &ldquo;full screen&rdquo; breakpoint and add any new rules you need to make things look good.</li>
<li>Increase the browser width until the layout looks odd, then make a new breakpoint and move in or add the necessary styles.</li>
<li>Rinse &amp; repeat until you get up to the &ldquo;full screen&rdquo; layout.</li>
<li>Move your print styles—you do have print styles, right?—into default.css and wrap them in a print <code>@media</code> block.</li>
</ol>


<p>For another approach to responsive retrofitting, check out <a href="http://webstandardssherpa.com/reviews/responsive-retrofitting/">this piece from Ben Callahan</a>.</p>

<h2>2. Focus on key tasks</h2>

<p>Every page has a purpose. If it doesn’t, you don’t need it. Find the page’s purpose and make that the focus. Eliminate distractions and reduce the amount of friction a user encounters when trying to accomplish the task.</p>

<p>If company or client politics preclude you from getting rid of all distractions on a page, consider <a href="http://www.filamentgroup.com/lab/ajax-includes-modular-content.html">a lazy-loading strategy</a> to bring them in with JavaScript only when there is more screen real estate.</p>

<h2>3. Get smarter about images</h2>

<p>Images are great, but they often comprise the majority of a web page’s bulk. To slim things down, first consider whether a given image is actually needed. If it isn’t, get rid of it. If it offers an enhancement, but isn’t crucial, consider lazy-loading it after page load. If the image is really important, <a href="https://ericportis.com/posts/2014/srcset-sizes/">use <code>srcset</code> and <code>sizes</code></a> (or the <code>picture</code> element) to deliver the smallest and yet most appropriate image to your users, based on their device.</p>

<h2>4. Embrace the continuum</h2>

<p>As designers and developers, we often try to control everything. But we have to realize that we can’t control everything on the Web. People on different devices have different capabilities and considerations. They will need your website to be flexible enough to allow them to accomplish their goals no matter what.</p>

<p>Understanding that is key to building experiences that move seamlessly across devices. You know, <a href="http://alistapart.com/article/understandingprogressiveenhancement">progressive enhancement</a>. It’s key to embracing the Web for all of its inherent web-iness.</p>

<hr>


<p>And there you have it: 4 simple, but effective guidelines for creating awesome websites that will fair well under Google’s new algorithm. And guess what: Your users will benefit too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#HonoringWebFolk]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/honoringwebfolk/"/>
    <updated>2015-04-09T12:05:21-07:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/honoringwebfolk</id>
    <content type="html"><![CDATA[<p>A lot of folks have helped me on the way to becoming the web professional that I am. When <a href="https://twitter.com/mollydotcom/status/586187780113309697">Molly declared today &ldquo;Unsung Leaders of the Web Day&rdquo;</a>, I had to join in.</p>

<!-- more -->


<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p>For more honorees, be sure to check out <a href="https://twitter.com/hashtag/HonoringWebFolk?src=hash">the other responses in the thread</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Apply Progressive Enhancement When JavaScript Seems Like a Requirement]]></title>
    <link href="http://www.aaron-gustafson.com/notebook/how-to-apply-progressive-enhancement-when-javascript-seems-like-a-requirement/"/>
    <updated>2015-04-02T07:14:40-07:00</updated>
    <id>http://www.aaron-gustafson.com/notebook/how-to-apply-progressive-enhancement-when-javascript-seems-like-a-requirement</id>
    <content type="html"><![CDATA[<p>On Stack Overflow last week, <a href="http://stackoverflow.com/users/4719194/jamham">JamHam</a> asked how to apply progressive enhancement in interfaces that seem to require JavaScript. Unfortunately he deleted the question before I could post my response, so I thought I would post it all here for posterity.</p>

<!-- more -->


<blockquote><p>I&rsquo;ve been trying to make my site (a content publishing &ldquo;web app&rdquo;) work fully without JavaScript, however, I&rsquo;ve found myself in situations where I can&rsquo;t honestly think how I would do some features without it.</p>

<p>For instance:</p>

<ul>
<li>I have a form submission page where you change certain settings, and the form changes accordingly.This is alright, I can apply query strings in the url and have some logic in my layout so that certain fields are shown/hidden according to the query string. The thing is, I also need to update a &ldquo;price&rdquo; dynamically, according to what fields are filled in, how they are filled in, and some other factors, and I don&rsquo;t honestly see how I could do that without JavaScript.</li>
<li>I have a messaging section where I&rsquo;m using WebSockets (with the help of Socket.io). The UI of the messaging (and of course, the
WebSockets) stuff pretty much depends on JavaScript, with &lsquo;messages&rsquo; being created as they arrive and appended into DOM and also a form that allows you to quickly look up an user via AJAX so you can send a message easily, among many other things.</li>
</ul>


<p>I mean, I could probably come up with very complicated solutions for each situation, and obviously the functionality wouldn&rsquo;t be the same. I&rsquo;m thinking I might as well just require JavaScript for the whole thing</p>

<p>But it kinda sucks, since I&rsquo;ve been making everything work without JavaScript, up until this point. And I would like some consistency across the whole site. In these kind of situations, is it acceptable to not support non-js clients? What would you suggest in this case?</p></blockquote>

<p>My response (which I was drafting when he deleted the question):</p>

<blockquote><p>First off, I applaud your interest in using progressive enhancement. It will ensure the most users possible have access to your content and will also result in a more robust application overall. As a general guiding principle, look to the past. How did we solve these issues before widespread JavaScript availability? Those &ldquo;Web 1.0&rdquo; solutions will still work and can be overtaken by supplanted by your JavaScript solution whenever it is possible to do so.</p>

<p>Every situation is different, but it is even possible to reuse a lot of code in both scenarios.</p>

<p>Now to address your interfaces…</p>

<p><strong>Your Submission Page</strong> &ndash; I could be wrong, but this sounds like a shopping cart to me (at least in essence). You are on the right track with query parameters, but you could also store info about the cart (and the user’s capabilities) in a session or cookie.</p>

<p>In terms of updating the &ldquo;cart&rdquo;, a simple &ldquo;update&rdquo; submit button that posts the form and triggers a redirection back to this page with the updated info would be sufficient. And if you need to show or hide fields based on choices made, you simply apply that logic on the server side. You could even have the server generate that same markup into the page, but hidden for situations where JavaScript is available.</p>

<p><strong>Your Messaging App</strong> &ndash; This can seem like a daunting challenge, but before we had web sockets and even Ajax, we relied on a small form which posts messages to the back end and a running feed of messages being sent from the back-end. One of the most common way to handle this involved frames and a &ldquo;meta refresh&rdquo; like this one:</p>

<pre><code>&lt;meta http-equiv="refresh" content="30"&gt;
</code></pre>

<p>That simple <code>meta</code> tag will make any browser refresh the page every 30 seconds. Now if you put that in an <code>iframe</code> to keep it from causing a refresh of the entire interface, any new messages would be picked up and displayed automatically at that interval (which you should tune to be appropriate for your app).</p>

<p>Once that is in place the page itself could even post to that frame by using the non-standard but well-supported <code>_target</code> attribute on the <code>form</code>.</p>

<p>Obviously with JavaScript enabled, you’d probably throw away that <code>iframe</code>, but the rest of the setup (including the templates for displaying the messages) could certainly be reused with WebSockets.</p></blockquote>

<p>I hope this helps. Progressive enhancement may seem like a huge challenge, but when you take a few moments to think about how we handled these challenges in the past, the way forward becomes clear.</p>
]]></content>
  </entry>
  
</feed>
