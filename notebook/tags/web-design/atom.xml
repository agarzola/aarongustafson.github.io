<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Web Design | Aaron Gustafson]]></title>
  <link href="https://www.aaron-gustafson.com/notebook/tags/web-design/atom.xml" rel="self"/>
  <link href="https://www.aaron-gustafson.com/"/>
  <updated>2015-11-24T12:11:52-05:00</updated>
  <id>https://www.aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speeding Things Up With Service Worker, Resource Hints, and More]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/speeding-things-up-with-service-worker-resource-hints-and-more/"/>
    <updated>2015-11-20T16:39:09-05:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/speeding-things-up-with-service-worker-resource-hints-and-more</id>
    <content type="html"><![CDATA[<p>User experience encompasses more than just the interface. Download speed, render performance, and the cost of accessing a site are often overlooked areas when it comes to the practice of UX, but they all affect how users experience what we build on the Web.</p>

<!-- more -->

<p>I’m always looking for ways to improve these aspects of my own site. And, since it’s my own personal playground, I often use it as a test-bed for new technologies, ideas, and techniques. My latest adventure was inspired by a bunch of <a href="https://www.aaron-gustafson.com/notebook/links/">articles and posts I’ve linked to recently</a>, especially</p>

<ul>
  <li><a href="https://adactio.com/journal/9775">Jeremy Keith’s “My First Service Worker”</a>,</li>
  <li><a href="https://css-tricks.com/serviceworker-for-offline/">Nicolas Bevacqua’s “Making a Simple Site Work Offline with ServiceWorker”</a>,</li>
  <li><a href="http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/">Dean Hume’s “Service Workers: Dynamic Responsive Images Using Webp Images”</a>, and</li>
  <li><a href="https://medium.com/@cramforce/not-so-micro-optimizations-f867c47b832d#.satdv0fap">Malte Ubl’s “Not so micro optimizations”</a></li>
</ul>

<p>After reading these pieces, I decided to see how much I could do to improve the performance of this site, especially on posts with a lot of images and embedded code samples, like <a href="https://www.aaron-gustafson.com/notebook/labeled-with-love/">my recent post on form labels</a>.</p>

<h2 id="using-resource-hints">Using Resource Hints</h2>

<p>To kick things off, I followed Malte’s advice and used <a href="https://w3c.github.io/resource-hints/">Resource Hints</a> to <em>prime the pump</em> for any third-party servers hosting assets I use frequently (e.g. Disqus, Twitter, etc.). I used the code Malte references in <a href="https://github.com/ampproject/amphtml">the AMP Project</a> as my starting point and <a href="https://github.com/aarongustafson/aarongustafson.github.io/blob/source/source/_javascript/main/resource-hints.js">added two new methods (<code>preconnect()</code> and <code>prefetch()</code>) to my global <code>AG</code> object</a>. With that library code in place, I can call those methods as necessary from within my other JavaScript files. Here’s a simplified extract from <a href="https://github.com/aarongustafson/aarongustafson.github.io/blob/source/source/_javascript/post/disqus.js">my Disqus integration script</a>:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist28197221" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-resource-hints-sample-js" class="file">
    

  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-resource-hints-sample-js-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-resource-hints-sample-js-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">if</span> ( <span class="pl-s"><span class="pl-pds">&#39;</span>AG<span class="pl-pds">&#39;</span></span> <span class="pl-k">in</span> <span class="pl-c1">window</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-s"><span class="pl-pds">&#39;</span>preconnect<span class="pl-pds">&#39;</span></span> <span class="pl-k">in</span> <span class="pl-smi">window</span>.<span class="pl-c1">AG</span> ) {</td>
      </tr>
      <tr>
        <td id="file-resource-hints-sample-js-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-resource-hints-sample-js-LC2" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">window</span>.<span class="pl-c1">AG</span>.<span class="pl-en">preconnect</span>( <span class="pl-s"><span class="pl-pds">&#39;</span>//disqus.com/<span class="pl-pds">&#39;</span></span> );</td>
      </tr>
      <tr>
        <td id="file-resource-hints-sample-js-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-resource-hints-sample-js-LC3" class="blob-code blob-code-inner js-file-line">  <span class="pl-smi">window</span>.<span class="pl-c1">AG</span>.<span class="pl-en">prefetch</span>( <span class="pl-s"><span class="pl-pds">&#39;</span>//<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> disqus_shortname <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.disqus.com/count.js<span class="pl-pds">&#39;</span></span> );</td>
      </tr>
      <tr>
        <td id="file-resource-hints-sample-js-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-resource-hints-sample-js-LC4" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/7f05709cca9293e4efea/raw/b6ca32d30643137603def7b4805d7bdcbfe63137/resource-hints-sample.js" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/7f05709cca9293e4efea#file-resource-hints-sample-js">resource-hints-sample.js</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>While a minor addition, the speed improvement in <a href="http://caniuse.com/#search=resource%20hints">supporting browsers</a> was noticeable.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<h2 id="integrating-service-worker">Integrating Service Worker</h2>

<p>With that in the bag, I set about making my first <a href="http://www.w3.org/TR/service-workers/">Service Worker</a>. I started off gently, using Dean’s piece as a guide. I added a WebP conversion bit to <a href="https://github.com/aarongustafson/aarongustafson.github.io/blob/source/tasks/gulp/images.js">my image processing Gulp task</a> to get the files in place and then I created the Service Worker. By default, <a href="https://gist.github.com/deanhume/c04478df744ce833925c#file-client-hints-service-worker-js">Dean’s code</a> converts <em>all</em> JPG and PNG requests to WebP responses, so I set it up to limit the requests to only those files being requested directly from my server. I have no way of knowing if WebP equivalents of every JPG and PNG exist on the open web (probably not), but I know they exist on my server. Here’s the updated code:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist28206589" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-webp-service-worker-js" class="file">
    

  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-webp-service-worker-js-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-webp-service-worker-js-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&quot;</span>use strict<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-webp-service-worker-js-LC2" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-webp-service-worker-js-LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">self</span>.<span class="pl-en">addEventListener</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>fetch<span class="pl-pds">&#39;</span></span>, <span class="pl-k">function</span>(<span class="pl-smi">event</span>) {</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-webp-service-worker-js-LC4" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-webp-service-worker-js-LC5" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">var</span> request <span class="pl-k">=</span> <span class="pl-smi">event</span>.<span class="pl-smi">request</span>,</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-webp-service-worker-js-LC6" class="blob-code blob-code-inner js-file-line">        url <span class="pl-k">=</span> <span class="pl-smi">request</span>.<span class="pl-smi">url</span>,</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-webp-service-worker-js-LC7" class="blob-code blob-code-inner js-file-line">        url_object <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">URL</span>( url ),</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-webp-service-worker-js-LC8" class="blob-code blob-code-inner js-file-line">        re_jpg_or_png <span class="pl-k">=</span><span class="pl-sr"> <span class="pl-pds">/</span><span class="pl-cce">\\.</span>(?:jpg<span class="pl-k">|</span>png)<span class="pl-k">$</span><span class="pl-pds">/</span></span>,</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-webp-service-worker-js-LC9" class="blob-code blob-code-inner js-file-line">        supports_webp <span class="pl-k">=</span> <span class="pl-c1">false</span>, <span class="pl-c">// pessimism</span></td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-webp-service-worker-js-LC10" class="blob-code blob-code-inner js-file-line">        webp_url;</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-webp-service-worker-js-LC11" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-webp-service-worker-js-LC12" class="blob-code blob-code-inner js-file-line">    <span class="pl-c">// Check if the image is a local jpg or png</span></td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-webp-service-worker-js-LC13" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ( <span class="pl-smi">re_jpg_or_png</span>.<span class="pl-c1">test</span>( <span class="pl-smi">request</span>.<span class="pl-smi">url</span> ) <span class="pl-k">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-webp-service-worker-js-LC14" class="blob-code blob-code-inner js-file-line">         <span class="pl-smi">url_object</span>.<span class="pl-smi">origin</span> <span class="pl-k">==</span> <span class="pl-smi">location</span>.<span class="pl-smi">origin</span> ) {</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-webp-service-worker-js-LC15" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file-webp-service-worker-js-LC16" class="blob-code blob-code-inner js-file-line">        <span class="pl-c">// console.log(&#39;WORKER: caught a request for a local PNG or JPG&#39;);</span></td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file-webp-service-worker-js-LC17" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file-webp-service-worker-js-LC18" class="blob-code blob-code-inner js-file-line">        <span class="pl-c">// Inspect the accept header for WebP support</span></td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file-webp-service-worker-js-LC19" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ( <span class="pl-smi">request</span>.<span class="pl-c1">headers</span>.<span class="pl-en">has</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>accept<span class="pl-pds">&#39;</span></span>) )</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file-webp-service-worker-js-LC20" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="file-webp-service-worker-js-LC21" class="blob-code blob-code-inner js-file-line">            supports_webp <span class="pl-k">=</span> <span class="pl-smi">request</span>.<span class="pl-c1">headers</span>.<span class="pl-en">get</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>accept<span class="pl-pds">&#39;</span></span>).<span class="pl-en">includes</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>webp<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="file-webp-service-worker-js-LC22" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="file-webp-service-worker-js-LC23" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="file-webp-service-worker-js-LC24" class="blob-code blob-code-inner js-file-line">        <span class="pl-c">// Browser supports WebP</span></td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="file-webp-service-worker-js-LC25" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ( supports_webp )</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="file-webp-service-worker-js-LC26" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="file-webp-service-worker-js-LC27" class="blob-code blob-code-inner js-file-line">            <span class="pl-c">// Make the new URL</span></td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="file-webp-service-worker-js-LC28" class="blob-code blob-code-inner js-file-line">            webp_url <span class="pl-k">=</span> <span class="pl-smi">url</span>.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, <span class="pl-smi">url</span>.<span class="pl-c1">lastIndexOf</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>)) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.webp<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="file-webp-service-worker-js-LC29" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="file-webp-service-worker-js-LC30" class="blob-code blob-code-inner js-file-line">            <span class="pl-smi">event</span>.<span class="pl-en">respondWith</span>(</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="file-webp-service-worker-js-LC31" class="blob-code blob-code-inner js-file-line">                <span class="pl-en">fetch</span>(</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="file-webp-service-worker-js-LC32" class="blob-code blob-code-inner js-file-line">                    webp_url,</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="file-webp-service-worker-js-LC33" class="blob-code blob-code-inner js-file-line">                    { mode<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>no-cors<span class="pl-pds">&#39;</span></span> }</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="file-webp-service-worker-js-LC34" class="blob-code blob-code-inner js-file-line">                )</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="file-webp-service-worker-js-LC35" class="blob-code blob-code-inner js-file-line">            );</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="file-webp-service-worker-js-LC36" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="file-webp-service-worker-js-LC37" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file-webp-service-worker-js-L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="file-webp-service-worker-js-LC38" class="blob-code blob-code-inner js-file-line">});</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/ff6aef09a10038e1728a/raw/078af4350bca2900c2d4dc10b3827948bc401c9b/webp-service-worker.js" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/ff6aef09a10038e1728a#file-webp-service-worker-js">webp-service-worker.js</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>When I began tucking to the caching possibilities of Service Workers, following Nicolas’ and Jeremy’s posts, I <a href="https://github.com/aarongustafson/aarongustafson.github.io/blob/source/source/_javascript/serviceworker/fetch-cached.js">opted to tweak Nicholas’ caching setup a bit</a>. I’m still not completely thrilled with it, but it’s a work in progress. I’m sure I will tweak as I get more familiar with the technology.</p>

<p>To keep my Service Worker code modularized (like my other JavaScript code), I opted to <a href="https://github.com/aarongustafson/aarongustafson.github.io/tree/source/source/_javascript/serviceworker">break it up into separate files</a> and am using Gulp to merge them all together and move the combined file into the root of the site. If you’d like to follow a similar path, feel free to adapt this Gulp task (which builds all of my JavaScript):</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist28197221" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-gulp-scripts-js" class="file">
    

  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-gulp-scripts-js-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-gulp-scripts-js-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>gulp<span class="pl-pds">&#39;</span></span>),</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-gulp-scripts-js-LC2" class="blob-code blob-code-inner js-file-line">    path <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>path<span class="pl-pds">&#39;</span></span>),</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-gulp-scripts-js-LC3" class="blob-code blob-code-inner js-file-line">    folder <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>gulp-folders<span class="pl-pds">&#39;</span></span>),</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-gulp-scripts-js-LC4" class="blob-code blob-code-inner js-file-line">    gulpIf <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>gulp-if<span class="pl-pds">&#39;</span></span>),</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-gulp-scripts-js-LC5" class="blob-code blob-code-inner js-file-line">    insert <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>gulp-insert<span class="pl-pds">&#39;</span></span>),</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-gulp-scripts-js-LC6" class="blob-code blob-code-inner js-file-line">    concat <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>gulp-concat<span class="pl-pds">&#39;</span></span>),</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-gulp-scripts-js-LC7" class="blob-code blob-code-inner js-file-line">    uglify <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>gulp-uglify<span class="pl-pds">&#39;</span></span>),</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-gulp-scripts-js-LC8" class="blob-code blob-code-inner js-file-line">    notify <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>gulp-notify<span class="pl-pds">&#39;</span></span>),</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-gulp-scripts-js-LC9" class="blob-code blob-code-inner js-file-line">    rename <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>gulp-rename<span class="pl-pds">&#39;</span></span>),</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-gulp-scripts-js-LC10" class="blob-code blob-code-inner js-file-line">    <span class="pl-c">//handleErrors = require(&#39;handleErrors&#39;),</span></td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-gulp-scripts-js-LC11" class="blob-code blob-code-inner js-file-line">    source_folder <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>source/_javascript<span class="pl-pds">&#39;</span></span>,</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-gulp-scripts-js-LC12" class="blob-code blob-code-inner js-file-line">    destination_root <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>source<span class="pl-pds">&#39;</span></span>,</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-gulp-scripts-js-LC13" class="blob-code blob-code-inner js-file-line">    destination_folder <span class="pl-k">=</span> destination_root <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/j<span class="pl-pds">&#39;</span></span>,</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-gulp-scripts-js-LC14" class="blob-code blob-code-inner js-file-line">    public_root <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>public<span class="pl-pds">&#39;</span></span></td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-gulp-scripts-js-LC15" class="blob-code blob-code-inner js-file-line">    public_folder <span class="pl-k">=</span> public_root <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/j<span class="pl-pds">&#39;</span></span>,</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file-gulp-scripts-js-LC16" class="blob-code blob-code-inner js-file-line">    rename_serviceworker <span class="pl-k">=</span> <span class="pl-en">rename</span>({</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file-gulp-scripts-js-LC17" class="blob-code blob-code-inner js-file-line">        dirname<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>../<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file-gulp-scripts-js-LC18" class="blob-code blob-code-inner js-file-line">    });</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file-gulp-scripts-js-LC19" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file-gulp-scripts-js-LC20" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>scripts<span class="pl-pds">&#39;</span></span>, <span class="pl-en">folder</span>(source_folder, <span class="pl-k">function</span>(<span class="pl-smi">folder</span>){</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="file-gulp-scripts-js-LC21" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-smi">path</span>.<span class="pl-c1">join</span>(source_folder, folder, <span class="pl-s"><span class="pl-pds">&#39;</span>*.js<span class="pl-pds">&#39;</span></span>))</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="file-gulp-scripts-js-LC22" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-c1">concat</span>(folder <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.js<span class="pl-pds">&#39;</span></span>))</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="file-gulp-scripts-js-LC23" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-smi">insert</span>.<span class="pl-en">transform</span>(<span class="pl-k">function</span>(<span class="pl-smi">contents</span>, <span class="pl-smi">file</span>){</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="file-gulp-scripts-js-LC24" class="blob-code blob-code-inner js-file-line">            <span class="pl-c">// insert a build time variable</span></td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="file-gulp-scripts-js-LC25" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">var</span> build_time <span class="pl-k">=</span> (<span class="pl-k">new</span> <span class="pl-en">Date</span>()).<span class="pl-c1">getTime</span>() <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="file-gulp-scripts-js-LC26" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-smi">contents</span>.<span class="pl-c1">replace</span>( <span class="pl-s"><span class="pl-pds">&#39;</span>{{BUILD_TIME}}<span class="pl-pds">&#39;</span></span>, build_time );</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="file-gulp-scripts-js-LC27" class="blob-code blob-code-inner js-file-line">         }))</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="file-gulp-scripts-js-LC28" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(destination_folder))</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="file-gulp-scripts-js-LC29" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(public_folder))</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="file-gulp-scripts-js-LC30" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-en">rename</span>({suffix<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>.min<span class="pl-pds">&#39;</span></span>}))</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="file-gulp-scripts-js-LC31" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-en">uglify</span>())</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="file-gulp-scripts-js-LC32" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-en">gulpIf</span>(folder<span class="pl-k">==</span><span class="pl-s"><span class="pl-pds">&#39;</span>serviceworker<span class="pl-pds">&#39;</span></span>,rename_serviceworker))</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="file-gulp-scripts-js-LC33" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(destination_folder))</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="file-gulp-scripts-js-LC34" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(public_folder))</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="file-gulp-scripts-js-LC35" class="blob-code blob-code-inner js-file-line">        .<span class="pl-en">pipe</span>(<span class="pl-en">notify</span>({ message<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>Scripts task complete<span class="pl-pds">&#39;</span></span> }));</td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="file-gulp-scripts-js-LC36" class="blob-code blob-code-inner js-file-line">        <span class="pl-c">//.on(&#39;error&#39;, handleErrors);</span></td>
      </tr>
      <tr>
        <td id="file-gulp-scripts-js-L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="file-gulp-scripts-js-LC37" class="blob-code blob-code-inner js-file-line">}));</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/7f05709cca9293e4efea/raw/b6ca32d30643137603def7b4805d7bdcbfe63137/gulp-scripts.js" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/7f05709cca9293e4efea#file-gulp-scripts-js">gulp-scripts.js</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>As most of the walkthroughs recommended that you version your Service Worker if you’re doing any caching, I set mine up to be auto-versioned by inserting a timestamp (lines 23-27, above) into my Service Worker header file (line 3, below):</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist28197221" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-_header-js" class="file">
    

  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-_header-js-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-_header-js-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">&#39;</span>use strict<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="file-_header-js-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-_header-js-LC2" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-_header-js-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-_header-js-LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> version <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>v{{BUILD_TIME}}:<span class="pl-pds">&#39;</span></span>,</td>
      </tr>
      <tr>
        <td id="file-_header-js-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-_header-js-LC4" class="blob-code blob-code-inner js-file-line">    default_avatar <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mm&amp;f=y<span class="pl-pds">&#39;</span></span>,</td>
      </tr>
      <tr>
        <td id="file-_header-js-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-_header-js-LC5" class="blob-code blob-code-inner js-file-line">    missing_image <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&#39;</span>https://i.imgur.com/oWLuFAa.gif<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/7f05709cca9293e4efea/raw/b6ca32d30643137603def7b4805d7bdcbfe63137/_header.js" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/7f05709cca9293e4efea#file-_header-js">_header.js</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>Service Workers are still pretty new (and <a href="http://caniuse.com/#feat=serviceworkers">modestly supported</a>), but it’s definitely interesting to see what’s possible using them. <a href="https://adactio.com/journal/9844">Like Jeremy</a>, I want to do a bit more exploration into caching and how it may actually <em>increase</em> the monetary cost of accessing a website if not used properly. Like any powerful tool, we need to wield it wisely.</p>

<figure><img src="https://media.giphy.com/media/dlmcYrvalMmAw/giphy.gif" alt="Animated GIF of a guy accidentally launching a board into his helper while power sanding." /></figure>

<h2 id="making-gists-static">Making Gists Static</h2>

<p>On particularly code-heavy posts (yes, like this one), I make liberal use of Gists. They’re quite useful, but <a href="https://gist.github.com/BinaryMuse/803483">the Gist plugin for Jekyll</a>, while good, still requests a script from Github in order to load the pretty printed version of the Gist. On some posts, that can mean 5 or more additional network requests, not to mention execution time for the JavaScript. It’s yet another dependency that could prohibit you from quickly getting to the content you’re looking for. Additionally, <a href="https://gds.blog.gov.uk/2013/10/21/how-many-people-are-missing-out-on-javascript-enhancement/">if JavaScript should be available, but isn’t</a>, you get nothing (since the <code>noscript</code> content is only evaluated if JavaScript support isn’t available or if a user turns it off).</p>

<p>With all of this in mind, I decided to revise the plugin and make it capable of downloading the JavaScript code directly. It then extracts the HTML markup that the JavaScript would be writing into the page and just embeds it directly. It also caches the result, which is handy for speeding up the build process.</p>

<p>You can grab <a href="https://gist.github.com/aarongustafson/b98add8f3580f6707cf5">my fork of the Gist Jekyll Plugin as, well, a Gist</a>. It’s also <a href="https://github.com/aarongustafson/aarongustafson.github.io/blob/source/plugins/gist_tag.rb">in the source of this site on Github</a>.</p>

<h2 id="hopefully-a-little-faster">(Hopefully) A Little Faster</h2>

<p>All told, these changes have gotten the render time of this site down significantly across the board.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> Even more so on browsers that support Service Workers and Resource Hints. I’ll likely continue tweaking as I go, but I wanted to share my process, code, and thoughts in case any of it might be useful to you in your own work. In the end, it’s all about creating better experiences for our users. How our sites perform is a big part of that.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Sadly I forgot to run some speed tests prior to rolling out this change and I didn’t feel like rolling back the site, so I don’t have solid numbers for you. That said, it seemed to shave nearly 2 seconds off of the load time on heavy pages like the post I mentioned. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Again, I don’t have the numbers, but I am routinely seeing <code>DOMContentLoaded</code> reached between 400-600ms with Service Worker caching in play. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Labeled With Love]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/labeled-with-love/"/>
    <updated>2015-11-11T21:05:33-05:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/labeled-with-love</id>
    <content type="html"><![CDATA[<p>Forms exist on pretty much every site on the web in one form or another. They are the primary mechanism by which we gather information from our users.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> Of course, before anyone can fill out a form, they need to know what it’s asking for. Labeling is key.</p>

<!-- more -->

<p>A few months back, I relayed <a href="https://www.aaron-gustafson.com/notebook/consider-how-your-forms-read/">a story from Facebook</a> about how important the wording of their questions was in getting accurate responses from their users. The words we choose are incredibly important—your interface is a conversation with your users. I highly recommend reading up on that (and <a href="http://www.radiolab.org/story/trust-engineers/">listening to the Radiolab episode</a> that spurred me to write it), but I’m going to spend the remainder of this post talking about the utilitarian aspects of labels and how to use them properly in your forms.</p>

<h2 id="connecting-the-dots">Connecting the Dots</h2>

<p>When you look at a basic form field, you have two bits of information: the field and the label.</p>

<figure id="fig-2015-11-11-01" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2015-11-11/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2015-11-11/01.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2015-11-11/01.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2015-11-11/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>A typical form control: a label and a field.</figcaption></figure>

<p>You could achieve this with a minimum of markup:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-unlabeled-field-html" class="file">
    

  <div class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-unlabeled-field-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-unlabeled-field-html-LC1" class="blob-code blob-code-inner js-file-line">Your Name</td>
      </tr>
      <tr>
        <td id="file-unlabeled-field-html-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-unlabeled-field-html-LC2" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">input</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>full_name<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/unlabeled-field.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-unlabeled-field-html">unlabeled-field.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>The thing is, the text “Your Name” is not associated in any way with the <code>input</code>. Sure, a sighted person would likely be able to tell that that text is associated with the field, but no computer can tell that. And if a computer can’t tell the text and <code>input</code> are associated, your form control is inaccessible to anyone who uses assistive technology like a screen reader. It’s also going to pose a problem in the near-future of “headless UIs” like those hinted at by Cortana, Siri, and the Echo.</p>

<p>Thankfully, establishing a relationship between the two is quite easy using the <code>label</code> element. The most common (and preferable) way to do this is to wrap the labeling text in a <code>label</code> element. Then you create an explicit association with the field using the <code>for</code> attribute, which is an <code>id</code> reference. In other words, the value of the <code>for</code> attribute needs to match the value of the <code>id</code> attribute on the field you want to associate with that <code>label</code>.</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-labeled-field-html" class="file">
    

  <div class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-labeled-field-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-labeled-field-html-LC1" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">label</span> <span class="pl-e">for</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>full_name<span class="pl-pds">&quot;</span></span>&gt;Your Name&lt;/<span class="pl-ent">label</span>&gt;</td>
      </tr>
      <tr>
        <td id="file-labeled-field-html-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-labeled-field-html-LC2" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">input</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>full_name<span class="pl-pds">&quot;</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>full_name<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/labeled-field.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-labeled-field-html">labeled-field.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>With that markup in place, the programmatic connection between the elements is made and the results speak for themselves: When you focus the field, the contents of the <code>label</code> are read out.</p>

<p><figure id="fig-WR4_MAjalsU" class="figure figure--video"><div class="video-embed video-embed--youtube video-embed--16x9"><a class="video-embed__lazy-link" style="background-image:url(//i2.ytimg.com/vi/WR4_MAjalsU/0.jpg);" href="//www.youtube.com/watch?v=WR4_MAjalsU" data-lazy-video-src="//www.youtube.com/embed/WR4_MAjalsU?autoplay=1&amp;modestbranding=1&amp;iv_load_policy=3"><div class="video-embed__lazy-div"></div><div class="video-embed__lazy-info">ChromeVox reading the label associated with a form control.</div></a></div></figure></p>

<h2 id="an-alternate-approach">An Alternate Approach</h2>

<p>Since I specifically referred to this approach as <em>explicit</em> association, you probably assumed that there’s another kind of association. And you were right: <em>implicit</em> association. Implicit association is created by wrapping a form control and its associated label text in a <code>label</code> element. I like to use this approach with radio and checkbox controls:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-implicitly-labeled-checkbox-html" class="file">
    

  <div class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-implicitly-labeled-checkbox-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-implicitly-labeled-checkbox-html-LC1" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">label</span>&gt;</td>
      </tr>
      <tr>
        <td id="file-implicitly-labeled-checkbox-html-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-implicitly-labeled-checkbox-html-LC2" class="blob-code blob-code-inner js-file-line">  &lt;<span class="pl-ent">input</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>checkbox<span class="pl-pds">&quot;</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>devices[]<span class="pl-pds">&quot;</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>Asus Nexus 7<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
      <tr>
        <td id="file-implicitly-labeled-checkbox-html-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-implicitly-labeled-checkbox-html-LC3" class="blob-code blob-code-inner js-file-line">  Asus Nexus 7</td>
      </tr>
      <tr>
        <td id="file-implicitly-labeled-checkbox-html-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-implicitly-labeled-checkbox-html-LC4" class="blob-code blob-code-inner js-file-line">&lt;/<span class="pl-ent">label</span>&gt;</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/implicitly-labeled-checkbox.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-implicitly-labeled-checkbox-html">implicitly-labeled-checkbox.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>It’s worth noting that there’s nothing wrong with explicit association in this context either.</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-explicitly-labeled-checkbox-html" class="file">
    

  <div class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-explicitly-labeled-checkbox-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-explicitly-labeled-checkbox-html-LC1" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">input</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>checkbox<span class="pl-pds">&quot;</span></span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>asus-nexus-7<span class="pl-pds">&quot;</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>devices[]<span class="pl-pds">&quot;</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>Asus Nexus 7<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
      <tr>
        <td id="file-explicitly-labeled-checkbox-html-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-explicitly-labeled-checkbox-html-LC2" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">label</span> <span class="pl-e">for</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>asus-nexus-7<span class="pl-pds">&quot;</span></span>&gt;Asus Nexus 7&lt;/<span class="pl-ent">label</span>&gt;</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/explicitly-labeled-checkbox.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-explicitly-labeled-checkbox-html">explicitly-labeled-checkbox.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>You can even combine the two approaches.</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-combo-labeled-checkbox-html" class="file">
    

  <div class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-combo-labeled-checkbox-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-combo-labeled-checkbox-html-LC1" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">label</span> <span class="pl-e">for</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>asus-nexus-7<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
      <tr>
        <td id="file-combo-labeled-checkbox-html-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-combo-labeled-checkbox-html-LC2" class="blob-code blob-code-inner js-file-line">  &lt;<span class="pl-ent">input</span> <span class="pl-e">type</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>checkbox<span class="pl-pds">&quot;</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>devices[]<span class="pl-pds">&quot;</span></span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>asus-nexus-7<span class="pl-pds">&quot;</span></span> <span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>Asus Nexus 7<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
      <tr>
        <td id="file-combo-labeled-checkbox-html-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-combo-labeled-checkbox-html-LC3" class="blob-code blob-code-inner js-file-line">  Asus Nexus 7</td>
      </tr>
      <tr>
        <td id="file-combo-labeled-checkbox-html-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-combo-labeled-checkbox-html-LC4" class="blob-code blob-code-inner js-file-line">&lt;/<span class="pl-ent">label</span>&gt;</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/combo-labeled-checkbox.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-combo-labeled-checkbox-html">combo-labeled-checkbox.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>The reason I like to use implicit association with checkbox and radio controls has to do with ensuring the greatest breadth of support when it comes to styling inputs. For instance, if I set <code>width: 80%</code> on all <code>input</code> elements using a simple <a href="https://developer.mozilla.org/docs/Web/CSS/Type_selectors">type selector</a>, that width would be applied to <em>all</em> <code>input</code> elements, including radio and checkbox controls. In order to prevent radio and checkbox controls from getting rendered at that width, I would need to assign an override value of <code>width: auto</code> to them them specifically. I can do that using <a href="https://developer.mozilla.org/docs/Web/CSS/Attribute_selectors">attribute selectors</a>:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-modern-only-css" class="file">
    

  <div class="blob-wrapper data type-css">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-modern-only-css-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-modern-only-css-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">input</span> {</td>
      </tr>
      <tr>
        <td id="file-modern-only-css-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-modern-only-css-LC2" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">width</span></span>: <span class="pl-c1">80<span class="pl-k">%</span></span>;</td>
      </tr>
      <tr>
        <td id="file-modern-only-css-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-modern-only-css-LC3" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file-modern-only-css-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-modern-only-css-LC4" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">input</span>[type=checkbox],</td>
      </tr>
      <tr>
        <td id="file-modern-only-css-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-modern-only-css-LC5" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">input</span>[type=radio] {</td>
      </tr>
      <tr>
        <td id="file-modern-only-css-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-modern-only-css-LC6" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">width</span></span>: <span class="pl-c1">auto</span>;</td>
      </tr>
      <tr>
        <td id="file-modern-only-css-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-modern-only-css-LC7" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/modern-only.css" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-modern-only-css">modern-only.css</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>While completely valid, that approach leaves out any browsers that don’t support attribute selection (e.g. IE 6). That may not seem like a deal-breaker in your book, but on the off chance some poor soul happens to be stuck using an out-of-date browser (as many are on mobile), I like to show them a little love. And, thankfully, using the implicit markup pattern for checkboxes and radio controls allows for this quite easily: I just use a <a href="https://developer.mozilla.org/docs/Web/CSS/Descendant_selectors">descendent selector</a> instead.</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-universal-css" class="file">
    

  <div class="blob-wrapper data type-css">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-universal-css-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-universal-css-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">input</span> {</td>
      </tr>
      <tr>
        <td id="file-universal-css-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-universal-css-LC2" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">width</span></span>: <span class="pl-c1">80<span class="pl-k">%</span></span>;</td>
      </tr>
      <tr>
        <td id="file-universal-css-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-universal-css-LC3" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file-universal-css-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-universal-css-LC4" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">label</span> <span class="pl-ent">input</span> {</td>
      </tr>
      <tr>
        <td id="file-universal-css-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-universal-css-LC5" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">width</span></span>: <span class="pl-c1">auto</span>;</td>
      </tr>
      <tr>
        <td id="file-universal-css-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-universal-css-LC6" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/universal.css" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-universal-css">universal.css</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>This approach results in a greater amount of support and, incidentally, less CSS.</p>

<h2 id="added-benefit-interactivity">Added Benefit: Interactivity</h2>

<p>Obviously, associated labels are great for folks who use screen readers, but they have another benefit: tapping on a <code>label</code> will focus or activate the associated form control.</p>

<figure id="fig-2015-11-11-02" class="media-container"><img src="https://www.aaron-gustafson.com/i/posts/2015-11-11/02.gif" alt="" /><figcaption>Animation showing how clicking a <code>label</code> will focus the associated form control.</figcaption></figure>

<p>This isn’t a game-changer when it comes to standard text fields, but it’s an exceptional affordance when it comes to radio and checkbox controls, especially on mobile, as it vastly increases the tappable region used to activate the control.</p>

<figure id="fig-2015-11-11-03" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2015-11-11/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2015-11-11/03.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2015-11-11/03.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2015-11-11/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>A screenshot of a group of checkbox controls with their labels outlined.</figcaption></figure>

<p>To create incredibly generous tap targets on mobile devices, we can take things a little further. Add padding to the top and bottom of the <code>label</code> to make it bigger and then use negative margins to counter that enlargement and keep the layout as it was before the padding was applied.</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-larger-labels-css" class="file">
    

  <div class="blob-wrapper data type-css">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-larger-labels-css-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-larger-labels-css-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-e">.grouped</span> <span class="pl-ent">label</span> {</td>
      </tr>
      <tr>
        <td id="file-larger-labels-css-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-larger-labels-css-LC2" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">margin</span></span>: <span class="pl-c1">-1<span class="pl-k">em</span></span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="file-larger-labels-css-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-larger-labels-css-LC3" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">padding</span></span>: <span class="pl-c1">1<span class="pl-k">em</span></span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="file-larger-labels-css-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-larger-labels-css-LC4" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/larger-labels.css" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-larger-labels-css">larger-labels.css</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<figure id="fig-2015-11-11-04" class="media-container"><img src="https://www.aaron-gustafson.com/i/posts/2015-11-11/04.gif" alt="" /><figcaption>An animation showing very generous tap targets on a narrow screen.</figcaption></figure>

<p>It’s worth noting that older versions of Internet Explorer only provide the focus/interaction benefit when you use explicit label association. That’s why I like the combo approach of implicit <em>and</em> explicit association for checkbox and radio controls.</p>

<h2 id="placeholders-arent-labels">Placeholders Aren’t Labels</h2>

<p>HTML5 ushered in a new option for working with <code>input</code> elements: the <code>placeholder</code> attribute. This declarative attribute makes it possible to offer hint as to the sort of content you were looking for in a field. In <a href="http://caniuse.com/#feat=input-placeholder">supporting browsers</a>, it appears in the field, ghosted back a bit, and disappears when you start typing a response.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<figure id="fig-2015-11-11-05" class="media-container"><img src="https://www.aaron-gustafson.com/i/posts/2015-11-11/05.gif" alt="" /><figcaption>An animation showing a placeholder in action on <a href="http://webstandardssherpa.com"><cite>Web Standards Sherpa</cite></a>.</figcaption></figure>

<p>Having this natively supported in the browser was a huge boon. For years we’d been using JavaScript to achieve this very effect—albeit typically for label text—in an effort to create more compact forms. Now we get the effect without having to include any additional files or libraries.</p>

<p>Of course, since <code>placeholder</code> implements an existing pattern, it came with baggage. People commonly achieved this effect by (ab)using the <code>value</code> attribute as a fake label. As such, its introduction didn’t do much to increase the accessibility of forms. <em>Form controls need a label</em>. If you want to make your form more compact, you can do that using proper markup and a little clever CSS.</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-fancy-example-html" class="file">
    

  <div class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-fancy-example-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-fancy-example-html-LC1" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">p</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>form-control<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-html-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-fancy-example-html-LC2" class="blob-code blob-code-inner js-file-line">  &lt;<span class="pl-ent">input</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>full_name<span class="pl-pds">&quot;</span></span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>full_name<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-html-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-fancy-example-html-LC3" class="blob-code blob-code-inner js-file-line">  &lt;<span class="pl-ent">label</span> <span class="pl-e">for</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>full_name<span class="pl-pds">&quot;</span></span>&gt;Your Name&lt;/<span class="pl-ent">label</span>&gt;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-html-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-fancy-example-html-LC4" class="blob-code blob-code-inner js-file-line">&lt;/<span class="pl-ent">p</span>&gt;</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/fancy-example.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-fancy-example-html">fancy-example.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist/embed-e75a8866f2a8f51e8bbbf8ca746676f1e7cacb08f4b1d9b52ea62524b333cc6d.css">
<div id="gist27925529" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-fancy-example-css" class="file">
    

  <div class="blob-wrapper data type-css">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-fancy-example-css-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-fancy-example-css-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-e">.form-control</span> {</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-fancy-example-css-LC2" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">position</span></span>: <span class="pl-c1">relative</span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-fancy-example-css-LC3" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-fancy-example-css-LC4" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">label</span> {</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-fancy-example-css-LC5" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">display</span></span>: <span class="pl-c1">block</span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-fancy-example-css-LC6" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">position</span></span>: <span class="pl-c1">absolute</span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-fancy-example-css-LC7" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">top</span></span>: <span class="pl-c1">50<span class="pl-k">%</span></span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-fancy-example-css-LC8" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">margin-top</span></span>: <span class="pl-c1">-.5<span class="pl-k">em</span></span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-fancy-example-css-LC9" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">left</span></span>: <span class="pl-c1">.25<span class="pl-k">em</span></span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-fancy-example-css-LC10" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">transition</span></span>: <span class="pl-c1">.25<span class="pl-k">s</span></span> transform;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-fancy-example-css-LC11" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-fancy-example-css-LC12" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">input</span> {</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-fancy-example-css-LC13" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">display</span></span>: <span class="pl-c1">block</span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-fancy-example-css-LC14" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">border</span></span>: <span class="pl-c1">1<span class="pl-k">px</span></span> <span class="pl-c1">solid</span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-fancy-example-css-LC15" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">border-radius</span></span>: <span class="pl-c1">3<span class="pl-k">px</span></span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file-fancy-example-css-LC16" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">padding</span></span>: <span class="pl-c1">.25<span class="pl-k">em</span></span>;</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file-fancy-example-css-LC17" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file-fancy-example-css-LC18" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">input</span><span class="pl-e">:focus</span> + <span class="pl-ent">label</span> {</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file-fancy-example-css-LC19" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">transform</span></span>: translateY(<span class="pl-c1">-1.5<span class="pl-k">em</span></span>);</td>
      </tr>
      <tr>
        <td id="file-fancy-example-css-L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file-fancy-example-css-LC20" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568/raw/af7d34e88830a540478fcb49839be692d47248f2/fancy-example.css" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/3585c019108025b2f568#file-fancy-example-css">fancy-example.css</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<figure id="fig-2015-11-11-06" class="media-container"><p class="codepen" data-user="aarongustafson" data-href="BoGgYM" data-height="112" data-type="result" data-preview="true">See the Pen <a href="http://codepen.io/aarongustafson/pen/BoGgYM">Simple Compact Labels</a> by Aaron Gustafson (<a href="//codepen.io/aarongustafson">aarongustafson</a>) on <a href="//codepen.io">CodePen</a>.</p><script async src="//codepen.io/assets/embed/ei.js"></script></figure>

<p>Mary Lou assembled some beautiful examples of this approach in her <a href="http://tympanus.net/codrops/2015/01/08/inspiration-text-input-effects/">Inspiration for Text Input Effects</a>. I highly recommend you check those out, but here’s a teaser to whet your whistle:</p>

<figure id="fig-2015-11-11-07" class="media-container"><img src="https://www.aaron-gustafson.com/i/posts/2015-11-11/07.gif" alt="" /><figcaption>A fancy, accessible form field and label from Mary Lou’s collection.</figcaption></figure>

<hr />

<p>We don’t have a ton of elements in HTML, which is why it’s important that we properly use the ones we do have. Hopefully this has provided a helpful overview of how to properly label form controls using HTML.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>When we’re not, you know, tracking them with a <a href="http://arstechnica.com/security/2015/10/verizons-zombie-cookie-gets-new-life/">super cookie</a> or something. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Browsers typically exhibit two different behaviors here. Some hide the placeholder text as soon as you focus the field, others hide it only when you start typing. Either one works although, admittedly, I favor the text disappearing when you type rather than when the field receives focus. I can see how that approach might confuse some users, I just prefer it because it ensures you see the placeholder. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Future of Web Design &amp; Øredev]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/future-of-web-design-and-oredev/"/>
    <updated>2015-11-09T15:17:15-05:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/future-of-web-design-and-oredev</id>
    <content type="html"><![CDATA[<p>Between <a href="https://futureofwebdesign.com/nyc-2015/">Future of Web Design</a> in New York City and <a href="http://lanyrd.com/2015/oredev/">Øredev</a> in Malmö, Sweden, I was a busy boy last week. I delivered three talks and a workshop in total and am a bit exhausted.</p>

<!-- more -->

<p>Øredev has already posted videos of my talks to their Vimeo account, so I’ve included links to them here along with links to the slide decks, so you can download them if you’d like:</p>

<h2 id="falling-in-love-with-forms">Falling in Love with Forms</h2>

<p><figure id="fig-144870932" class="figure figure--video"><div class="video-embed video-embed--vimeo video-embed--16x9"><a class="video-embed__lazy-link" style="background-image:url(https://i.vimeocdn.com/video/542903228_1280.jpg)" href="//vimeo.com/144870932" data-lazy-video-src="//player.vimeo.com/video/144870932?autoplay=1"><div class="video-embed__lazy-div"></div><div class="video-embed__lazy-info">Falling in Love with Forms</div></a></div></figure></p>

<p>This one’s a survey of current forms best practices. This one’s a bit abbreviated from my previous iterations as the talks were only 40 minutes at FoWD and Øredev, but I distilled out the most important bits.</p>

<ul>
  <li><strong>Slides</strong>: http://www.slideshare.net/AaronGustafson/falling-in-love-with-forms-redev-2015</li>
  <li><strong>Video</strong>: https://vimeo.com/144870932</li>
</ul>

<h2 id="there-are-no-buts-in-progressive-enhancement">There Are No “Buts” in Progressive Enhancement</h2>

<p><figure id="fig-144979022" class="figure figure--video"><div class="video-embed video-embed--vimeo video-embed--16x9"><a class="video-embed__lazy-link" style="background-image:url(https://i.vimeocdn.com/video/542999481_1280.jpg)" href="//vimeo.com/144979022" data-lazy-video-src="//player.vimeo.com/video/144979022?autoplay=1"><div class="video-embed__lazy-div"></div><div class="video-embed__lazy-info">There Are No “Buts” in Progressive Enhancement</div></a></div></figure></p>

<p>Wherein I dispel the myth that progressive enhancement has no place in news, healthcare, education, financial, commerce, and single-page app websites. Lots of goodies in here.</p>

<p>This version is an updated 40-minute distillation of the hour and a half talk <a href="http://jennlukas.com/">Jenn Lukas</a> and I gave at <a href="https://uxim15.uie.com/">UX Immersion Mobile</a> back in April. The video of that one is available from <a href="https://aycl.uie.com/">UIE’s All You Can Learn</a>. Jenn designed the slides and <a href="http://cargocollective.com/mattsutter">Matt Sutter</a> did the wonderful illustrations.</p>

<ul>
  <li><strong>Slides</strong>: http://www.slideshare.net/AaronGustafson/there-are-no-buts-in-progressive-enhancement-redev-2015</li>
  <li><strong>Video</strong>: https://vimeo.com/144979022</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strapless]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/strapless/"/>
    <updated>2015-10-19T11:33:37-04:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/strapless</id>
    <content type="html"><![CDATA[<p>On Friday, <a href="https://twitter.com/ShirleyTemper">Kelly</a> and I were having a conversation over lunch about the ubiquity of Bootstrap. It’s a topic we’ve been kvetching about for the the last few years—we’ve grown tired of seeing the same site everywhere we look.</p>

<!-- more -->

<p>It’s not that we have any issues with Bootstrap specifically. It’s a solid framework for rapidly prototyping an idea before deciding if it’s got legs. It’s also a great tool to learn from when considering your own pattern library. That said, we don’t think it should be used in the way it so often is: as the entirety of your front end design with only a teensiest amount of theming applied.</p>

<p>The reasons we aren’t big Bootstrap fans are manifold. <a href="https://twitter.com/hellofisher">Steve Fisher</a>, <a href="https://twitter.com/yeseniaa">Yesenia Perez-Cruz</a>, <a href="https://twitter.com/samanthatoy">Samantha Warren</a> and I hashed out a bunch of them in our SXSW panel <a href="http://schedule.sxsw.com/2013/events/event_IAP137">“The Real Responsive Process?”</a>. Here are a few of the highlights:</p>

<ol>
  <li><strong>Bootstrap doesn’t solve your problems.</strong> Design is problem solving. The design decisions made by the creators/maintainers of Bootstrap solve <em>their</em> problems, not <em>yours</em>. You may share some of those problems—a need for responsive layouts, for example—but not others. You need a system that is tailored to solve your problems and only you (and your team) know what those problems are. Have you ever tried on an article of clothing that’s “one size fits all”? How well did it fit your body type? Unless you are absolutely average in all respects, probably not all that well. Solve <em>your</em> problems with <a href="http://daverupert.com/2013/04/responsive-deliverables/"><em>your own</em> Bootstrap-esque pattern library</a>.</li>
  <li><strong>Bootstrap offers more than you’ll need.</strong> Bootstrap contains a lot of components and design patterns. It was created to address a wide array of project needs (“one size fits all”, see above). As such, there’s a lot of code in there. The defaults with some basic theming put you at a minimum of around 200KB for the CSS, JavaScript, and fonts (and that doesn’t include jQuery, which is also required). <a href="http://getbootstrap.com/customize/">Customizing your Bootstrap build can help</a>, but if you’re gonna use Bootstrap in production, you need to ruthlessly rip out anything you aren’t using. That takes time. And then you need to maintain your customized version of Bootstrap, making upgrading to new versions of the framework painful.</li>
  <li><strong>Differentiating yourself from you competition is harder.</strong> Bootstrap sites have a very common look to them. You can easily pick them out of a lineup and they are especially prolific within the startup space. If you’re trying to separate your company from the pack, having a site that looks just like every other startup (including your competition) is probably not a great idea. Spend some time (and, yes, money) creating a design that matches your brand and reflects who <em>you</em> are.</li>
</ol>

<p>I’m not saying these things because I’m a Bootstrap hater. I’m not, I just think it’s a crutch for a lot of people and it’s led to an era of bland, look-alike design on the web I’d love to see us transcend.</p>

<p>In my conversation with Kelly, I jokingly said it would be funny to create a browser extension that removed Bootstrap’s CSS and JavaScript from any page that included it. Something subversive along the lines of <a href="http://archive.oreilly.com/pub/a/network/2000/07/21/magazine/css_anarchist.html">Eric Meyer’s hilariously destructive table layout and <code>font</code> demolishing user stylesheet</a> or <a href="https://github.com/richardharrington/disrupt-to-bullshit">Richard Harrington’s “disrupt” to “bullshit” converter</a>. On Friday I decided to see what I could throw together in 15 minutes and I dubbed the result “Strapless”. Using <a href="https://crossrider.com/">Crossrider</a>, I converted <a href="https://gist.github.com/aarongustafson/081d6e950c1f2cc57e22">some simple JavaScript</a> into an extension for <a href="https://chrome.google.com/webstore/detail/strapless/ninnlimehlghihnalgelhhafbmhlhojg">Chrome</a> and <a href="http://crossrider.com/download/ff/79799">Firefox</a>. I didn’t bother with Safari as I couldn’t justify spending $99 to add a prank extension to their catalog. I have a version for Internet Explorer, but the installer is failing, which I suspect is an issue with Crossrider.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved to HTTPS]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/moved-to-https/"/>
    <updated>2015-09-03T16:06:03-04:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/moved-to-https</id>
    <content type="html"><![CDATA[<p>I’ve been complaining about <a href="https://www.aaron-gustafson.com/notebook/more-proof-we-dont-control-our-web-pages/">“man in the middle” attacks brought on by internet service providers</a> a bunch over the last year. The only way to keep uninvited third parties from injecting JavaScript and more—potentially screwing up your page—is to move to HTTPS. So, as much as it pains me to abandon good old fashioned HTTP, I’ve decided to lock things down a bit.</p>

<!-- more -->

<p>I was using <a href="https://github.com/">Github</a> to host my site as a <a href="https://pages.github.com/">Github page</a>. It worked really well given this is a static site, but you can’t run Github-hosted sites under HTTPS unless you go with their <code>*.github.io</code> domain name (they have a <a href="https://en.wikipedia.org/wiki/Wildcard_certificate">wildcard certificate</a> for that domain). There’s been <a href="https://github.com/isaacs/github/issues/156">a ton of interest in Github allowing custom cert installation, but no movement yet</a>, so… <i>onward!</i><sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<p>I opted to move to <a href="https://www.digitalocean.com/?refcode=5270a681c6fe">DigitalOcean</a> since <a href="http://easy-designs.net">my consultancy</a> recently relocated all of its sites there in a mass exodus from MediaTemple. Migrating the site was as simple as <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps">setting up the DigitalOcean server as a new “live” <code>remote</code> on my local git install</a> and pushing it up there. Since it’s a static site, I didn’t have to worry too much about the server config. Apache is really great at hosting static files.</p>

<p>With the contents in place, I went through <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-with-a-free-signed-ssl-certificate-on-a-vps">the rather convoluted process of getting SSL set up following the instructions from DigitalOcean</a>. I opted for the free <a href="http://www.startssl.com/">StartSSL</a> certificate to begin with (a rather convoluted process, but we got there in the end) and then flipped the DNS records to point to the new box. Given that the StartSSL certificate needs to be renewed every 30 days, I may opt for a paid certificate in the not too distant future.</p>

<p>Once the DNS propagated, I had to go back and button up a few scripts that were requesting non-HTTPS content. I also had to tweak my Jekyll plugins and Rake tasks to include the legacy “http://” URLs when querying for webmentions and the like (since I didn’t want to lose those references). I also updated the Apache’s <code>VirtualHost</code> configuration for the non-secure site to make all traffic redirect:</p>

<pre><code>Redirect permanent / https://www.aaron-gustafson.com/
</code></pre>

<p>All in all, it was a relatively painless migration. Admittedly, the initial re-build of the site (after updating the Rake tasks) did re-submit all of the webmentions I’d previously sent in order to provide the new address. If I referenced you a bunch in the past, I apologize for the flood of traffic, but it had to be done.</p>

<p>Anyway, so now this site is running under HTTPS. If you encounter any issues, please let me know. And if you want to read a really good account of migrating a site to HTTPS, you should definitely <a href="https://adactio.com/articles/7435">read Jeremy Keith’s step-by-step guide</a>.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>It’s worth noting that <a href="https://github.com/aarongustafson/aarongustafson.github.io/tree/source">the source of the site</a> (and even <a href="https://github.com/aarongustafson/aarongustafson.github.io/tree/master">a back-up build</a>) will remain on Github for the forseeable future. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
