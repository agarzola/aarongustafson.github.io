<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Progressive Enhancement | Aaron Gustafson]]></title>
  <link href="http://aaron-gustafson.com/notebook/tags/progressive-enhancement/atom.xml" rel="self"/>
  <link href="http://aaron-gustafson.com/"/>
  <updated>2015-03-11T14:14:18-04:00</updated>
  <id>http://aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lines in the Sand]]></title>
    <link href="http://aaron-gustafson.com/notebook/lines-in-the-sand/"/>
    <updated>2015-03-11T09:21:29-04:00</updated>
    <id>http://aaron-gustafson.com/notebook/lines-in-the-sand</id>
    <content type="html"><![CDATA[<p>A new site, <a href="http://breakupwithie8.com/">Break Up with Internet Explorer 8</a> by <a href="http://www.humaan.com/">Humaan</a>, has been making the rounds on the Interwebs of late. It’s cleverly done and an attractive site, but I don’t really agree with the premise:</p>

<blockquote><p>Join the intervention and stop supporting IE8. It&rsquo;s time for an upgrade.</p></blockquote>

<!-- more -->


<p>The reality is that some users don’t have control over the browsers installed on their computers and <a href="http://www.networkworld.com/article/2224510/microsoft-subnet/some-windows-xp-users-just-can-t-afford-to-upgrade.html">IE8 may be the best they can muster</a>. Most of us have had the luxury of moving on, but they haven’t. Does that mean we should banish those users from our sites by treating IE8 like that ex who just won’t take a hint? I don’t think so.</p>

<p>Instead, we should approach this problem rationally. Be the bigger person. Call it <a href="http://bradfrost.com/blog/mobile/support-vs-optimization/">support vs. optimization</a>, call it <a href="http://responsivenews.co.uk/post/18948466399/cutting-the-mustard">cutting the mustard</a>, call it what you will, but by understanding how browsers work, we can reduce our own development headaches and serve more users in the process. Yes, even when they use aging browsers like IE8 or IE7 or (gasp) IE6.</p>

<p>When it comes to HTML and CSS, browsers ignore what they don’t understand. It’s why you can use the <code>section</code> element and the content will still be exposed in Lynx. It’s also why you can use RGBa without IE6 collapsing. <a href="http://adaptivewebdesign.info/1st-edition/chapter-1.html#the-rise-of-tolerance">Fault tolerance is a really powerful tool</a> and is the foundation of progressive enhancement in HTML and CSS. (In JavaScript things are a little more complicated… we have to use <a href="http://learn.jquery.com/code-organization/feature-browser-detection/">feature detection</a>.)</p>

<p>A simple way to rid yourself of IE8 related headaches is to embrace the idea that <a href="http://dowebsitesneedtolookexactlythesameineverybrowser.com/">web pages don’t need to look (or behave) the same in every browser</a> and look for ways to achieve this while still providing access to your content and tools for less-capable browsers and devices. For example:</p>

<p><div><script src='https://gist.github.com/b9bca995a67ba298225d.js?file=css-filter.html'></script>
<noscript><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;simple.css&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;complex.css&quot; media=&quot;only screen&quot;&gt;</code></pre></noscript></div>
</p>

<p>This simple stylesheet setup will deliver only the <code>simple.css</code> file to browsers that are incapable of understanding media queries. Browsers that do understand them will get both stylesheets. Media queries support is an easy line in the sand we can draw because <a href="http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu/79">lack of media query support is in fact the first media query</a>.</p>

<p>Once you’ve done that, it’s as simple as putting all of your advanced styles in the <code>complex.css</code> file. No drama.</p>

<p>On the JavaScript end, you can draw a line in the sand too. Let’s say you don’t want to spend your time debugging JavaScript in IE8. You can just skip it using <a href="http://www.quirksmode.org/css/condcom.html">Conditional Comments</a>:</p>

<p><div><script src='https://gist.github.com/b9bca995a67ba298225d.js?file=js-filter.html'></script>
<noscript><pre><code>&lt;!--[if gte IE 9]&gt;&lt;!--&gt;
  &lt;script src=&quot;not-for-ie8.js&quot;&gt;&lt;/script&gt;
&lt;!--&lt;![endif]--&gt;</code></pre></noscript></div>
</p>

<p>Using an approach like this avoids delivering the contained JavaScript files to IE8 at all, but all other browsers will see them.</p>

<p>If that’s too drastic, use <a href="http://learn.jquery.com/code-organization/feature-browser-detection/">feature detection</a> in your JavaScript files to determine if it is safe to rely on a particular method or capability. Program defensively.</p>

<p>Honestly, I’ve found that approaches like these lead to fewer grey hairs and a lower overall stress level. They make me a happier developer and let me concentrate on building for the future rather than worrying about the past.</p>

<p>But it’s not about breaking up with IE8, it’s about having a realistic and honest relationship with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who Should Pay?]]></title>
    <link href="http://aaron-gustafson.com/notebook/who-should-pay/"/>
    <updated>2015-02-18T23:35:06-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/who-should-pay</id>
    <content type="html"><![CDATA[<p>In more than a handful of conversations lately, it’s become quite clear that we, the web development community, are prioritizing our own convenience and our own time over that of our users. With our industry’s focus on “user-centered design”, you might find that hard to believe, but it’s true.</p>

<!-- more -->


<p>Here’s one example. In reaction to <a href="/notebook/css-variables-are-a-bad-idea/">my post on why I think CSS variables are a bad idea</a>, <a href="http://sass-lang.com">SASS</a> core team member <a href="https://twitter.com/chriseppstein/">Chris Eppstein</a> had this to say:</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p>Fundamentally, I agree with his sentiment: A preprocessor should <em>not</em> be a requirement for authoring CSS. Thankfully, <em>it never was</em>; you can build amazing things using only hand-authored CSS. And if you find a preprocessor helpful to your process for one reason or another, great. But using a preprocessor never has been (nor should it ever be) a requirement.</p>

<p>But Chris was not railing against preprocessors. Instead, he is echoing a sentiment held by many people in the preprocessor community. He feels CSS is not as powerful as it could/should be and he hopes that one day soon preprocessors won’t need to exist because CSS will have all of the features they offer natively. Like variables.</p>

<p>I used to feel that way. I used to want variables… and mixins… and functions… and loops… and declaration block-level inheritance. But I’ve changed my mind.</p>

<p>Don’t get me wrong, I love these constructs. I use them nearly every day in the SASS I write and I am incredibly thankful for the hard work that has gone into their creation and maintenance.  Chris alone has probably saved me several weeks worth of work over the last four years through his contributions to SASS and <a href="http://compass-style.org/">Compass</a>. I definitely owe him a beer (or three).</p>

<p>Ok, so if my issue is not with the idea of programmatically generating styles, why would I not want these to be part of CSS, the <i>lingua franca</i> for design on the Web? Well, it’s pretty simple: Converting all of these constructs into something that is actionable by the browser takes time and processing power. Someone has to pay that cost and I wouldn’t feel right passing that cost on to my end users if there are better options.</p>

<p>This is a topic I bring up often in my conference talks and workshops: Every decision we make affects the user experience in some way.</p>

<p>When we add another JavaScript library or plugin, it’s no big deal from our perspective. We tend to have fast connections and faster processors. For our users it’s another story: It’s one more thing to request. One more thing to download. One more script to parse. One more thing holding up page rendering. One more reason to leave our site and seek out a competitor who actually values their time.</p>

<p>When we hide an <code>img</code> in the small screen version of our responsive design using <code>display: none</code>, the cost to us is quite minimal. It’s just one little declaration. What’s the harm? But the cost to our end users is quite significant: Longer load times, slower performance, and (in some cases) in real dollars if they are on a <a href="http://blog.kaspersky.com/cost-aware/">metered data connection</a>. And they don’t even get to see the image they paid for!</p>

<p>When we decide to build a site using a front-end JavaScript MVC framework, it can make the development process go so much faster for us and we can reduce our need for a robust back-end infrastructure. I mean everyone has JavaScript these days… <a href="/notebook/a-fundamental-disconnect/">the browser is the new VM</a>. But when we do this, our users suffer because we don’t give their browsers real HTML. Instead we force them to download a hefty framework so we can move all of the processing we would normally handle on a much faster, dedicated server to their questionably-capable machine instead. Oh, and if the browser encounters an error while parsing or executing the JavaScript execution, they don’t get anything at all. Welcome to the Modern Web™!</p>

<hr>


<p>When I look around, I see our community spending a lot of time coming up with new tools and techniques to make our jobs easier. To ship faster. And it’s not that I’m against efficiency, but I think we need to consider the implications of our decisions. And if one of those implications is making our users suffer—or potentially suffer—in order to make our lives easier, I think we need to consider their needs above our own.</p>

<p>So yes, I would love a world where preprocessors are unnecessary, but I would much rather spend a few seconds (or even a few minutes) transcompiling my SASS into CSS in order to save my users even a few milliseconds. It’s the same reason I optimize my images, minify my JavaScript, use Gzip, and lazy load design and experience enhancements only in contexts where they provide a real benefit.</p>

<p>Our users should never foot the bill for our convenience. We need to put their needs above our own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three Worthwhile Posts on Progressive Enhancement]]></title>
    <link href="http://aaron-gustafson.com/notebook/three-worthwhile-posts-on-progressive-enhancement/"/>
    <updated>2015-02-13T10:14:40-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/three-worthwhile-posts-on-progressive-enhancement</id>
    <content type="html"><![CDATA[<p>Jason Garber has penned a series of posts on progressive enhancement. Here’s a quick rundown on what they cover and why you should read them.</p>

<!-- more -->


<h2><a href="http://sixtwothree.org/posts/designing-experience-layers">Designing Experience Layers</a></h2>

<p>In his first post, Jason picks up on a drumbeat I’ve been hammering on for years: we need to consider experience a continuum, not a monolithic thing.</p>

<blockquote><p>Today’s Web makes no guarantees. Every bit of code—HTML, CSS, and JavaScript—shipped from a server across the wire acts as a suggestion as to how the browser should interpret and display content. More often than not, everything works planned, but for any number of reasons, a browser could fail to request or render a particular asset.</p></blockquote>

<p>In other words, get to know <a href="http://adaptivewebdesign.info/1st-edition/chapter-1.html#adapt-or-die">fault tolerance as it applies to web design</a> and <a href="http://aaron-gustafson.com/notebook/a-fundamental-disconnect/">don’t make any assumptions about how your content will be rendered/experienced</a>.</p>

<p>His conclusion is an important one:</p>

<blockquote><p>Approaching design through the lens of experience layers is the design strategy for the Web; one that’s better for users and designers alike.</p></blockquote>

<p>Amen!</p>

<h2><a href="http://sixtwothree.org/posts/in-defense-of-progressive-enhancement">In Defense of Progressive Enhancement</a></h2>

<p>In his follow-up, Jason defends his position against <a href="http://viget.com/inspire/designing-experience-layers#comment-1847156038">a lengthy comment from his supervisor at Viget</a>. Jason’s responses are dead on:</p>

<ol>
<li>JavaScript is not a baseline (or a given) and</li>
<li>When large sites put their eggs in the JS basket, they set a bad example for other developers.</li>
</ol>


<p>His summation is perfect:</p>

<blockquote><p>I remain unconvinced that abandoning progressive enhancement in favor of JavaScript-first development is better for users or is the direction the Web is inevitably heading. It’s our responsibility to do right by the billions already online and the next billion preparing to come online. We can achieve this by designing robust, resilient, layered experiences using techniques like progressive enhancement.</p></blockquote>

<p>Again, fantastic.</p>

<h2><a href="http://sixtwothree.org/posts/the-practical-case-for-progressive-enhancement">The Practical Case for Progressive Enhancement</a></h2>

<p>Continuing the thread, Jason assembles more reasons to adopt the progressive enhancement philosophy.</p>

<ol>
<li><strong>The “Moral” Argument for Progressive Enhancement</strong> &ndash; Personally, I think Jason gives in too easily on this. Access to content is <a href="http://www.pewinternet.org/topics/digital-divide/">a social justice issue</a> and that is nothing to gloss over. In some cases it is also a <a href="http://www.section508.gov/">legal requirement</a>.</li>
<li><strong>The “Cost” of Progressive Enhancement</strong> &ndash; Jason does a good job addressing the costs (monetarily and temporally) associated with adopting progressive enhancement in terms of building, testing, and supporting websites. As he says, it is more costly to &ldquo;bolt on&rdquo; accessibility and progressive enhancement at the end of a project. He is also correct in his assertion that progressively-enhanced websites actually require less testing. And when you <a href="http://bradfrost.com/blog/mobile/support-vs-optimization/">draw a stark line between support and optimization</a>, support for additional browsers and devices also becomes far less costly. What Jason was missing was numbers to back all this up. <a href="http://blog.easy-designs.net/archives/the-true-cost-of-progressive-enhancement/">I have those numbers</a>. Enjoy.</li>
<li><strong>Practicality</strong> &ndash; Finally, Jason calls out games and their ilk as edge cases. He correctly asserts that the vast majority of properties on the Web could easily be built following progressive enhancement. Sure, you might not build a Photoshop clone using progressive enhancement, but how many of you are building an image editor for the Web? I didn’t think so.</li>
</ol>


<h2>Conclusion</h2>

<p>In all, this was a nice little series. Great work Jason! If you want to dig into this progressive enhancement stuff a bit more, you can read the entirety of my award-winning book <a href="http://adaptivewebdesign.info/1st-edition/"><cite>Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement</cite> online, for free</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The One Weird Trick That Takes the Pain Out of Cross-browser Testing]]></title>
    <link href="http://aaron-gustafson.com/notebook/the-one-weird-trick-that-takes-the-pain-out-of-cross-browser-testing/"/>
    <updated>2015-01-26T11:24:25-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/the-one-weird-trick-that-takes-the-pain-out-of-cross-browser-testing</id>
    <content type="html"><![CDATA[<p>Love this!</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adaptive Images in ExpressionEngine With CE Image]]></title>
    <link href="http://aaron-gustafson.com/notebook/adaptive-images-in-expressionengine-with-ce-image/"/>
    <updated>2014-11-21T18:18:23-05:00</updated>
    <id>http://aaron-gustafson.com/notebook/adaptive-images-in-expressionengine-with-ce-image</id>
    <content type="html"><![CDATA[<p>One of the biggest headaches of responsive design has been dealing with images. Thankfully our work on the <a href="http://ricg.io">Responsive <del>Images</del> <ins>Issues</ins> Community Group</a> has resulted in a rock-solid set of elements and attributes to address all of your adaptive image needs. My company, <a href="http://easy-designs.net">Easy Designs</a>, recently redesigned <a href="http://www.nichols.edu">Nichols College’s website</a> and that project just happened to coincide adaptive images landing in <a href="http://www.chromium.org/blink">Blink</a> (the rendering engine that powers Chrome and Opera). Naturally, we jumped at the opportunity to use them.</p>

<!-- more -->


<p>Most Nichols College sites run on <a href="http://ellislabs.com/expressionengine">EllisLab’s ExpressionEngine</a>, a solid little workhorse of a CMS we’ve been using for years. We love it because it gives us complete control over the markup it generates. Now EE offers some pretty decent file management and image manipulation utilities out of the box, but the options it provides were not enough to handle our adaptive image needs; we needed backup. <a href="http://www.causingeffect.com/software/expressionengine/ce-image">Causing Effect’s CE Image</a> add-on is reasonably priced and offered exactly the functionality we needed to make our adaptive image dreams a reality.</p>

<p>I won’t bore you with how to set up CE Image as there is <a href="http://www.causingeffect.com/software/expressionengine/ce-image/user-guide">documentation on that</a>, but I will walk you through two different responsive image use-cases we had and how we addressed them using this add-on.</p>

<h2>Header images</h2>

<p>The first use case we had was a series of large, focal images. You can find different examples of them on <a href="http://www.nichols.edu">the homepage</a> and landing pages (like <a href="http://www.nichols.edu/admissions/">this one for Admissions</a>). The first pass on making these images adaptive involved the <code>picture</code> element for which <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#adaptive-images">the spec</a> is known. The markup we were generating was based on the pattern outlined for <a href="http://scottjehl.github.io/picturefill/">Picturefill</a>, a JavaScript polyfill that implements adaptive images in browsers that don’t do it natively:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-result.html'></script>
<noscript><pre><code>&lt;picture class=&quot;page__image-header__photo&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;video style=&quot;display: none;&quot;&gt;&lt;![endif]--&gt;
    &lt;source srcset=&quot;about_940_343_int_s_c1_full.jpg&quot; media=&quot;(min-width: 40em)&quot;&gt;
    &lt;source srcset=&quot;about_800_350_int_c1_medium.jpg&quot; media=&quot;(min-width: 20em)&quot;&gt;
    &lt;source srcset=&quot;about_480_350_int_c1_small.jpg&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;/video&gt;&lt;![endif]--&gt;
    &lt;img src=&quot;{made}&quot; alt=&quot;&quot;&gt;
&lt;/picture&gt;</code></pre></noscript></div>
</p>

<p>To get to that point, however, we needed to use CE Image to generate (and cache) the specific sizes we needed:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-element.html'></script>
<noscript><pre><code>&lt;picture class=&quot;page__image-header__photo&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;video style=&quot;display: none;&quot;&gt;&lt;![endif]--&gt;
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_full&quot;
        width=&quot;940&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 40em)&quot;&gt;
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_medium&quot;
        width=&quot;800&quot;
        height=&quot;600&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 20em)&quot;&gt;
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_small&quot;
        width=&quot;480&quot;
        height=&quot;360&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot;&gt;
        &lt;!--[if IE 9]&gt;&lt;/video&gt;&lt;![endif]--&gt;
        &lt;img src=&quot;{made}&quot; alt=&quot;&quot;&gt;
    {/exp:ce_img:pair}
&lt;/picture&gt;
</code></pre></noscript></div>
</p>

<p>Not what’s a lot of code, so let’s just look at one segment of that jumble:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-excerpt.html'></script>
<noscript><pre><code>{exp:ce_img:pair
    src=&quot;{content_focal_image}&quot;
    filename_suffix=&quot;_full&quot;
    width=&quot;940&quot;
    allow_scale_larger=&quot;yes&quot;
    crop=&quot;yes&quot;
    interlace=&quot;yes&quot;
    cache_dir=&quot;/&quot;
    }
    &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 40em)&quot;&gt;
{/exp:ce_img:pair}</code></pre></noscript></div>
</p>

<p>This is an example using CE Image’s tag pair option, which lets you control the markup output. In the opening tag, we set several properties:</p>

<ul>
<li><code>src</code> is the path to the original image uploaded by content authors;</li>
<li><code>filename_suffix</code> is the suffix we want added to the cached file to differentiate it from others in the cache (and make the files more easily scannable);</li>
<li><code>width</code> is our desired output width for the generated image;</li>
<li><code>allow_scale_larger</code> does exactly what you’d expect: it dictates whether or not CE Image should scale the image to reach the desired width;</li>
<li><code>crop</code> tells CE Image whether it’s okay to crop the image;</li>
<li><code>interlace</code> tells CE Image to use image interlacing (which can speed load time); and</li>
<li><code>cache_dir</code> tells CE Image where to store the cached image (in relation to our global configuration)</li>
</ul>


<p>Then, within the tag pair is the <code>source</code> element with the <code>srcset</code> value set to the path to the file CE Image generated (referenced by the <code>made</code> variable) and the associated media query.</p>

<p>Multiply that a few times for the different sizes and you have the full <code>picture</code> element.</p>

<p>Now that’s all well and good, but shortly after launch, <a href="http://ericportis.com/">Eric Portis</a> wrote <a href="http://ericportis.com/posts/2014/srcset-sizes/">an amazing post explaining how the <code>srcset</code> and <code>sizes</code> attributes operate</a> and it cleared up a lot of my confusion on the matter. He convinced me that the age-old <code>img</code> element, with these new attributes, would be far more maintainable. With a fire in my belly, I rewrote the markup:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=simple-resize.html'></script>
<noscript><pre><code>&lt;img class=&quot;page__image-header__photo&quot; alt=&quot;&quot;
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_small&quot;
        width=&quot;480&quot;
        height=&quot;320&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        } 
        src=&quot;{made}&quot;
        srcset=&quot;{made} 480w,
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_medium&quot;
        width=&quot;800&quot;
        height=&quot;600&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        {made} 800w,
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_full&quot;
        width=&quot;940&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        {made} 940w&quot;
    {/exp:ce_img:pair}
    &gt;</code></pre></noscript></div>
</p>

<p>The CE Image behavior is exactly the same, but the resulting markup is much clearer:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=srcset-result.html'></script>
<noscript><pre><code>&lt;img class=&quot;page__image-header__photo&quot; alt=&quot;&quot;
     src=&quot;about_480_320_int_c1_small.jpg&quot;
     srcset=&quot;about_480_320_int_c1_small.jpg 480w,
             about_800_350_int_c1_medium.jpg 800w,
             about_940_343_int_s_c1_full.jpg 940w&quot;&gt;</code></pre></noscript></div>
</p>

<p>The added bonus of this approach is that I am not hard-coding any media queries and the browser gets to make the ultimate decision of which image to request. All I am doing is telling the browser the image options and their respective widths within the <code>srcset</code> attribute. As all of the images take up 100% of their containers, I didn’t even need to use the <code>sizes</code> attribute. Easy peasy.</p>

<h2>&ldquo;Nice to Have&rdquo; Images</h2>

<p>Not every image adds something to the page. Some are purely optional, a visual enhancement. In order to reduce the size of pages on smaller screens, we often choose to &ldquo;lazy load&rdquo; certain image assets after page load, when we know there is enough room to display the image or when we feel it would be an enhancement to the design.</p>

<p>Now some of you might be wondering: <em>Why not just <code>display:none</code> below a certain threshold?</em> Well, I’ll tell you: images that are hidden with CSS are still requested by the browser. That means users who don’t see the images are still paying to download them (whether in terms of time waiting for the page to render or actual money on a metered connection). That kinda sucks for them. We should show our users a bit more respect and only request the images when we need them.</p>

<p>We wrote <a href="https://github.com/easy-designs/easy-lazy-images.js">a lazy-loading image script</a> a few years back and have battle tested it on numerous sites to great success. It’s all based on a simple markup pattern:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-markup.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
     data-image-src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;&gt;&lt;/div&gt;</code></pre></noscript></div>
</p>

<p>The <code>data-img-src</code> attribute defines the path to the &ldquo;nice to have&rdquo; image and then the JavaScript adds the image element into the page when the appropriate conditions are met:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-result.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
    data-image-src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;
    data-image-loaded=&quot;&quot;
    &gt;
    &lt;img alt=&quot;&quot; src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;&gt;
&lt;/div&gt;</code></pre></noscript></div>
</p>

<p>Pretty simple. It even supports <code>srcset</code>:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-srcset.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
     data-image=&quot;about_480_320_int_c1_small.jpg&quot;
     data-image-srcset=&quot;about_480_320_int_c1_small.jpg 480w,
                      about_800_350_int_c1_medium.jpg 800w,
                      about_940_343_int_s_c1_full.jpg 940w&quot;&gt;&lt;/div&gt;</code></pre></noscript></div>
</p>

<p>The <a href="https://github.com/easy-designs/easy-lazy-images.js#usage">full documentation is up on Github</a>.</p>

<p>Implementing this in the context of CE Image was a breeze and builds on the <code>source</code> pattern I showed earlier:</p>

<p><div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loading.html'></script>
<noscript><pre><code>{if testimonial_photo}
    {exp:ce_img:pair
        src=&quot;{testimonial_photo}&quot;
        width=&quot;223&quot;
        height=&quot;140&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;div class=&quot;module__image image--lazy&quot; data-image-src=&quot;{made}&quot;&gt;&lt;/div&gt;
    {/exp:ce_img:pair}
{/if}</code></pre></noscript></div>
</p>

<p>We are only just beginning to scratch the surface of what’s possible with adaptive images and I am sure we will come up with newer, better ways to do this stuff. Heck, there may even be an adaptive images add-on in the pipeline for ExpressionEngine. But, in the meantime, if you are trying to implement adaptive images with ExpressionEngine, CE Image is a good way to go.</p>
]]></content>
  </entry>
  
</feed>
