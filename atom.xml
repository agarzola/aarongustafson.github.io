<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Aaron Gustafson]]> Latest Posts &amp; Links</title>
	<link href="http://aaron-gustafson.com/atom.xml" rel="self"/>
	<link href="http://aaron-gustafson.com/"/>
	<updated>2014-12-21T15:32:16-05:00</updated>
	<id>http://aaron-gustafson.com/</id>
	<author>
		<name><![CDATA[Aaron Gustafson]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
		
			<entry>
				<title type="html"><![CDATA[Autoplay, Don’t Do It]]></title>
				<link href="http://aaron-gustafson.com/notebook/autoplay-dont-do-it/"/>
				<updated>2014-12-21T15:12:50-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/autoplay-dont-do-it</id>
				<content type="html"><![CDATA[<p>A while back <a href="https://gigaom.com/2014/09/04/facebooks-autoplay-has-led-to-a-60-boost-in-traffic-on-mobile-networks/">GogOm reported on how Facebook’s decision to autoplay videos led to a 60% increase in mobile data usage</a>. It was a business decision with the intent of increasing engagement, but it was a bad decision from a user experience. It’s a tax on users and they weren’t to happy about it.</p>

<p>You may be wondering <em>Why is this a bad thing for users? They want to see videos, so we’re just giving them what they want.</em> Well, let me share a little story.</p>

<!-- more -->


<p>I was in Lisbon for <a href="http://lanyrd.com/2013/uxlx/">UxLx</a> last year and was on roaming data through my mobile provider. At the hotel, the Wifi was giving me trouble, so I opted to tether my computer so I can pull down a document I needed. Chrome crashed. Lame, but no big deal. I relaunched it and, Chrome being the helpful browser that it is, all of my tabs were restored and I got back to work.</p>

<p>A few minutes later I got a text message from my provider: I’d just used a tremendous amount of my data in a very short amount of time. And I had only landed an hour before. I was understandably concerned. And perplexed. What happened?</p>

<p>Well, it turns out one of the tabs that re-spawned after Chrome crashed was a page on YouTube. And on that page was an hour-long video. In HD. And it auto-played. I had the volume off and it was in background tab, so I had no idea.</p>

<p>YouTube’s “business decision” to autoplay their videos cost me real money. A lot of it.</p>

<p>Don’t autoplay. Any benefits you might see in user engagement are probably going to be drowned out by legitimate complaints from your users. Just don’t do it.</p>

<p>Incidentally, you can <a href="https://www.facebook.com/help/633446180035470">disable auto-play in Facebook</a>, but first of all you have to know it’s an option. Facebook gives you the choice of turning it on or off entirely or to turn it on only over Wifi. That may seem like a great compromise, but I’d like to put forward a few arguments as to why it’s not:</p>

<ol>
<li><em>Tethering:</em> If I am tethered to my phone, it is likely being done over Wifi. Even if my browser is aware that I am on Wifi and even if the website is paying attention to that (using the <a href="http://www.w3.org/TR/netinfo-api/">Network Informaion API</a>), the website is probably going to get a false positive for Wifi even though the <em>actual</em> data connection is over a mobile network.</li>
<li><em>Metered Wifi:</em> Hotels and other providers often limit how much data you can use. You could be on an awesomely fast Wifi network, but if you are limited to 100MB—it happens—being on Wifi doesn’t matter.</li>
</ol>


<p>So again: Autoplay, don’t do it.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Visualizing CSS3 Transformations]]></title>
				<link href="http://aaron-gustafson.com/notebook/visualizing-css3-transformations/"/>
				<updated>2014-12-18T16:53:18-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/visualizing-css3-transformations</id>
				<content type="html"><![CDATA[<p>It’s pretty amazing what you can do with <a href="http://dev.w3.org/csswg/css-transforms">CSS3 transforms</a> these days, but I often struggle with explaining the importance of function order when I am training people on how to use them. Transformation functions are a visual thing, so they require a visual tool to fully understand them and the implications of your function order decisions.</p>

<!-- more -->


<p>To address this need, I put together <a href="http://codepen.io/aarongustafson/full/jEryLV/">a tool that dissects CSS3 transforms</a> so the transform process would be more clear for my students. I decided to throw it up on Codepen so you could learn from it as well. Why don’t you open that link and I’ll explain how it works. (Obviously, you’ll need to be in <a href="http://caniuse.com/#feat=transforms2d">a browser that supports transforms</a> for the tool to be useful to you.)</p>

<p>The tool starts you off with a simple three-function <code>transform</code> that includes both <code>translate</code> and <code>rotate</code> functions. If you hit the &ldquo;Show Me&rdquo; button, the browser will draw a box and step you through the application of the <code>transform</code> functions, one by one, animating their application so it’s easy to follow. This makes it pretty clear why an element ends up where it does.</p>

<p>Beside the &ldquo;Show Me&rdquo; button is the &ldquo;Rearrange&rdquo; button. It does exactly what you’d think: It rearranges the functions into a new, random order. If you press it and then press &ldquo;Show Me&rdquo; again, you can see if (and why) the element ends up in a different place. The original box remains ghosted out so you can see any differences.</p>

<p>Here’s a video of me playing around with the default <code>transform</code> stack:</p>

<p><figure id="fig-114921831" class="figure figure--video"><div class="video-embed video-embed--vimeo video-embed--16x9"><a class="video-embed__lazy-link" style="background-image:url(http://i.vimeocdn.com/video/500772734_1280.jpg)" href="//vimeo.com/114921831" data-lazy-video-src="//player.vimeo.com/video/114921831?autoplay=1"><div class="video-embed__lazy-div"></div><div class="video-embed__lazy-info">Dissecting CSS3 Transforms</div></a></div></figure></p>

<p>Have a play and let me know your thoughts. I hope you find this tool as helpful as I (and my students) have.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Indecisiveness and URLs]]></title>
				<link href="http://aaron-gustafson.com/notebook/indecisiveness-and-urls/"/>
				<updated>2014-12-16T10:23:15-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/indecisiveness-and-urls</id>
				<content type="html"><![CDATA[<p>If you know me, you know I am a pretty indecisive guy. It is not uncommon for <a href="https://twitter.com/shirleytemper">Kelly</a> and I to spend 15 minutes or more just trying to figure out where we want to grab a meal.</p>

<!-- more -->


<p>What I’m trying to say (or rather excuse) is that I have been struggling with some of my initial decisions with respect to URLs on this site and finally decided to make some changes before too many links to its content get out there. I was a bit reluctant to do so as we all know <a href="http://www.w3.org/Provider/Style/URI.html">what Sir Tim Berners-Lee says</a></p>

<blockquote><p>Cool URIs don’t change.</p></blockquote>

<p>Well, consider me uncool as I decided to change some things around here:</p>

<ol>
<li>I dropped the year indicator from blog post URLs. I realized that the likelihood of me having two posts with the same name was pretty much nil, so it was unnecessary to disambiguate like that. Plus it would save me from having to create the annual archives I would feel compelled to make in order to justify the “2014” directory in the URL.</li>
<li>I consolidated my book and article pages to <a href="http://aaron-gustafson.com/publications">a single page or publications</a>. I thought it might be nice to maintain them separately, but in retrospect that seems unnecessarily complicated.</li>
<li>I changed the URL to my speaking engagements from “events” to “speaking-engagements” as it just made more sense.</li>
</ol>


<p>On the off chance you ever consider changing URLs on a Jekyll or Octopress site, I thought I’d share my process.</p>

<h2>Redirecting Old Links</h2>

<p>I was quite concerned concerned about old links being broken in this site. It’s just not a good thing to do.</p>

<p>In a traditional hosting scenario, I could use <code>.htaccess</code> to set up <a href="https://en.wikipedia.org/wiki/HTTP_302">302 redirects</a>, but I am hosting on Github so that isn’t an option. On top of that, this site is built using Octopress (and Jekyll), so there is no dynamic system in place to programmatically manage those redirects.</p>

<p>Thankfully, there is <a href="https://github.com/jekyll/jekyll-redirect-from">a plugin for Jekyll to manage redirects</a>. With it, you can redirect from an an existing page in the YAML front matter using the <code>redirect_to</code> key or you can use the <code>redirect_from</code> key in the YAML front matter on the destination page. I ended up using the former for old pages (articles, books, and events), and the latter for blog posts.</p>

<p>The plugin covers all the bases. It generates pages at the old URLs that redirect using the good old <code>meta</code> refresh, a JavaScript redirect, and a fallback link just in case neither of those work. Oh, and it sets the new URL as the <a href="https://support.google.com/webmasters/answer/139066?hl=en">canonical reference</a> to boot.</p>

<p>Done and done.</p>

<h2>Keeping Webmentions</h2>

<p>As I mentioned a few weeks back, I wrote <a href="http://aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll/">a Jekyll plugin to enable webmentions</a>. As web mentions are tied to the “mentioned” URL, changing a post’s URL was going to cause me to lose any previous webmentions. I didn’t like that idea, so <a href="https://github.com/aaronpk/webmention.io/issues/31">I talked to Aaron about adding multiple URL support to the webmention.io API</a> and he agreed it was a good idea.</p>

<p>The feature landed late last week and I adjusted <a href="https://github.com/aarongustafson/jekyll-webmention_io">my Jekyll Webmention.io plugin</a> to allow you to supply multiple URLs. While I was at it, I did some other upgrades: I added caching, downloading of webmention titles if the API didn’t supply one, and a test for the existence of avatars before inserting them (so you don’t end up with missing images).</p>

<p>If you were using the plugin, I definitely recommend upgrading as it performs a lot better now. I also added <a href="https://github.com/aarongustafson/jekyll-webmention_io/blob/master/webmention.Rakefile">a Rake task for sending webmentions</a> which is super handy.</p>

<h2>Pardon My Dust</h2>

<p>I apologize for changing URLs on you, but I am hopeful this will be the last major change on the site. As it (currently) says at the top, <a href="http://aaron-gustafson.com/notebook/a-grand-experiment/">this is an open redesign</a>, so there are bound to be a few bumps here and there. That said, I will try to keep them to a minimum in the future.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Update Your SSH Keys on Github]]></title>
				<link href="https://developer.github.com/changes/2014-12-12-replace-older-ssh-keys-created-by-your-application/"/>
				<updated>2014-12-16T08:21:08-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/update-your-ssh-keys-on-github</id>
				<content type="html"><![CDATA[<p>Honestly, it’s probably good to get into the habit of updating your SSH keys regularly anyway, but in case you needed a reminder:</p>

<blockquote><p>Back in February, we improved the security audit trail for SSH keys. Soon, organizations will be able to block access for SSH keys that were created prior to those improvements. If your application relies on deploy keys or user keys for repository access, we recommend replacing any keys created before February 24, 2014.</p></blockquote>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Adaptive Images in ExpressionEngine With CE Image]]></title>
				<link href="http://aaron-gustafson.com/notebook/adaptive-images-in-expressionengine-with-ce-image/"/>
				<updated>2014-11-21T18:18:23-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/adaptive-images-in-expressionengine-with-ce-image</id>
				<content type="html"><![CDATA[<p>One of the biggest headaches of responsive design has been dealing with images. Thankfully our work on the <a href="http://ricg.io">Responsive <del>Images</del> <ins>Issues</ins> Community Group</a> has resulted in a rock-solid set of elements and attributes to address all of your adaptive image needs. My company, <a href="http://easy-designs.net">Easy Designs</a>, recently redesigned <a href="http://www.nichols.edu">Nichols College’s website</a> and that project just happened to coincide adaptive images landing in <a href="http://www.chromium.org/blink">Blink</a> (the rendering engine that powers Chrome and Opera). Naturally, we jumped at the opportunity to use them.</p>

<!-- more -->


<p>Most Nichols College sites run on <a href="http://ellislabs.com/expressionengine">EllisLab’s ExpressionEngine</a>, a solid little workhorse of a CMS we’ve been using for years. We love it because it gives us complete control over the markup it generates. Now EE offers some pretty decent file management and image manipulation utilities out of the box, but the options it provides were not enough to handle our adaptive image needs; we needed backup. <a href="http://www.causingeffect.com/software/expressionengine/ce-image">Causing Effect’s CE Image</a> add-on is reasonably priced and offered exactly the functionality we needed to make our adaptive image dreams a reality.</p>

<p>I won’t bore you with how to set up CE Image as there is <a href="http://www.causingeffect.com/software/expressionengine/ce-image/user-guide">documentation on that</a>, but I will walk you through two different responsive image use-cases we had and how we addressed them using this add-on.</p>

<h2>Header images</h2>

<p>The first use case we had was a series of large, focal images. You can find different examples of them on <a href="http://www.nichols.edu">the homepage</a> and landing pages (like <a href="http://www.nichols.edu/admissions/">this one for Admissions</a>). The first pass on making these images adaptive involved the <code>picture</code> element for which <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#adaptive-images">the spec</a> is known. The markup we were generating was based on the pattern outlined for <a href="http://scottjehl.github.io/picturefill/">Picturefill</a>, a JavaScript polyfill that implements adaptive images in browsers that don’t do it natively:</p>

<div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-result.html'></script>
<noscript><pre><code>&lt;picture class=&quot;page__image-header__photo&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;video style=&quot;display: none;&quot;&gt;&lt;![endif]--&gt;
    &lt;source srcset=&quot;about_940_343_int_s_c1_full.jpg&quot; media=&quot;(min-width: 40em)&quot;&gt;
    &lt;source srcset=&quot;about_800_350_int_c1_medium.jpg&quot; media=&quot;(min-width: 20em)&quot;&gt;
    &lt;source srcset=&quot;about_480_350_int_c1_small.jpg&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;/video&gt;&lt;![endif]--&gt;
    &lt;script&gt;
      document.write(&#39;&lt;img src=&quot;&quot; srcset=&quot;{made}&quot; alt=&quot;&quot;&gt;&#39;);
    &lt;/script&gt;
    &lt;noscript&gt;
        &lt;p class=&quot;noscript-picture&quot;&gt;&lt;img src=&quot;{made}&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    &lt;/noscript&gt;
&lt;/picture&gt;</code></pre></noscript></div>


<p>To get to that point, however, we needed to use CE Image to generate (and cache) the specific sizes we needed:</p>

<div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-element.html'></script>
<noscript><pre><code>&lt;picture class=&quot;page__image-header__photo&quot;&gt;
    &lt;!--[if IE 9]&gt;&lt;video style=&quot;display: none;&quot;&gt;&lt;![endif]--&gt;
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_full&quot;
        width=&quot;940&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 40em)&quot;&gt;
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_medium&quot;
        width=&quot;800&quot;
        height=&quot;600&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 20em)&quot;&gt;
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{content_focal_image}&quot;
        filename_suffix=&quot;_small&quot;
        width=&quot;480&quot;
        height=&quot;360&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;source srcset=&quot;{made}&quot;&gt;
        &lt;!--[if IE 9]&gt;&lt;/video&gt;&lt;![endif]--&gt;
        &lt;script&gt;
            document.write(&#39;&lt;img src=&quot;&quot; srcset=&quot;{made}&quot; alt=&quot;&quot;&gt;&#39;);
        &lt;/script&gt;
        &lt;noscript&gt;
            &lt;p class=&quot;noscript-picture&quot;&gt;&lt;img src=&quot;{made}&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;/noscript&gt;
    {/exp:ce_img:pair}
&lt;/picture&gt;
</code></pre></noscript></div>


<p>Not what’s a lot of code, so let’s just look at one segment of that jumble:</p>

<div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=picture-excerpt.html'></script>
<noscript><pre><code>{exp:ce_img:pair
    src=&quot;{content_focal_image}&quot;
    filename_suffix=&quot;_full&quot;
    width=&quot;940&quot;
    allow_scale_larger=&quot;yes&quot;
    crop=&quot;yes&quot;
    interlace=&quot;yes&quot;
    cache_dir=&quot;/&quot;
    }
    &lt;source srcset=&quot;{made}&quot; media=&quot;(min-width: 40em)&quot;&gt;
{/exp:ce_img:pair}</code></pre></noscript></div>


<p>This is an example using CE Image’s tag pair option, which lets you control the markup output. In the opening tag, we set several properties:</p>

<ul>
<li><code>src</code> is the path to the original image uploaded by content authors;</li>
<li><code>filename_suffix</code> is the suffix we want added to the cached file to differentiate it from others in the cache (and make the files more easily scannable);</li>
<li><code>width</code> is our desired output width for the generated image;</li>
<li><code>allow_scale_larger</code> does exactly what you’d expect: it dictates whether or not CE Image should scale the image to reach the desired width;</li>
<li><code>crop</code> tells CE Image whether it’s okay to crop the image;</li>
<li><code>interlace</code> tells CE Image to use image interlacing (which can speed load time); and</li>
<li><code>cache_dir</code> tells CE Image where to store the cached image (in relation to our global configuration)</li>
</ul>


<p>Then, within the tag pair is the <code>source</code> element with the <code>srcset</code> value set to the path to the file CE Image generated (referenced by the <code>made</code> variable) and the associated media query.</p>

<p>Multiply that a few times for the different sizes and you have the full <code>picture</code> element.</p>

<p>Now that’s all well and good, but shortly after launch, <a href="http://ericportis.com/">Eric Portis</a> wrote <a href="http://ericportis.com/posts/2014/srcset-sizes/">an amazing post explaining how the <code>srcset</code> and <code>sizes</code> attributes operate</a> and it cleared up a lot of my confusion on the matter. He convinced me that the age-old <code>img</code> element, with these new attributes, would be far more maintainable. With a fire in my belly, I rewrote the markup:</p>

<div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=simple-resize.html'></script>
<noscript><pre><code>&lt;img class=&quot;page__image-header__photo&quot; alt=&quot;&quot;
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_small&quot;
        width=&quot;480&quot;
        height=&quot;320&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        } 
        src=&quot;{made}&quot;
        srcset=&quot;{made} 480w,
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_medium&quot;
        width=&quot;800&quot;
        height=&quot;600&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        {made} 800w,
    {/exp:ce_img:pair}
    {exp:ce_img:pair
        src=&quot;{embed:image}&quot;
        filename_suffix=&quot;_full&quot;
        width=&quot;940&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        {made} 940w&quot;
    {/exp:ce_img:pair}
    &gt;</code></pre></noscript></div>


<p>The CE Image behavior is exactly the same, but the resulting markup is much clearer:</p>

<div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=srcset-result.html'></script>
<noscript><pre><code>&lt;img class=&quot;page__image-header__photo&quot; alt=&quot;&quot;
     src=&quot;about_480_320_int_c1_small.jpg&quot;
     srcset=&quot;about_480_320_int_c1_small.jpg 480w,
             about_800_350_int_c1_medium.jpg 800w,
             about_940_343_int_s_c1_full.jpg 940w&quot;&gt;</code></pre></noscript></div>


<p>The added bonus of this approach is that I am not hard-coding any media queries and the browser gets to make the ultimate decision of which image to request. All I am doing is telling the browser the image options and their respective widths within the <code>srcset</code> attribute. As all of the images take up 100% of their containers, I didn’t even need to use the <code>sizes</code> attribute. Easy peasy.</p>

<h2>&ldquo;Nice to Have&rdquo; Images</h2>

<p>Not every image adds something to the page. Some are purely optional, a visual enhancement. In order to reduce the size of pages on smaller screens, we often choose to &ldquo;lazy load&rdquo; certain image assets after page load, when we know there is enough room to display the image or when we feel it would be an enhancement to the design.</p>

<p>Now some of you might be wondering: <em>Why not just <code>display:none</code> below a certain threshold?</em> Well, I’ll tell you: images that are hidden with CSS are still requested by the browser. That means users who don’t see the images are still paying to download them (whether in terms of time waiting for the page to render or actual money on a metered connection). That kinda sucks for them. We should show our users a bit more respect and only request the images when we need them.</p>

<p>We wrote <a href="https://github.com/easy-designs/easy-lazy-images.js">a lazy-loading image script</a> a few years back and have battle tested it on numerous sites to great success. It’s all based on a simple markup pattern:</p>

<div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-markup.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
     data-image-src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;&gt;&lt;/div&gt;</code></pre></noscript></div>


<p>The <code>data-img-src</code> attribute defines the path to the &ldquo;nice to have&rdquo; image and then the JavaScript adds the image element into the page when the appropriate conditions are met:</p>

<div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-result.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
    data-image-src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;
    data-image-loaded=&quot;&quot;
    &gt;
    &lt;img alt=&quot;&quot; src=&quot;Tim-Smith_220x140_220_140_int_c1.jpg&quot;&gt;
&lt;/div&gt;</code></pre></noscript></div>


<p>Pretty simple. It even supports <code>srcset</code>:</p>

<div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loaded-srcset.html'></script>
<noscript><pre><code>&lt;div class=&quot;module__image image--lazy&quot;
     data-image=&quot;about_480_320_int_c1_small.jpg&quot;
     data-image-srcset=&quot;about_480_320_int_c1_small.jpg 480w,
                      about_800_350_int_c1_medium.jpg 800w,
                      about_940_343_int_s_c1_full.jpg 940w&quot;&gt;&lt;/div&gt;</code></pre></noscript></div>


<p>The <a href="https://github.com/easy-designs/easy-lazy-images.js#usage">full documentation is up on Github</a>.</p>

<p>Implementing this in the context of CE Image was a breeze and builds on the <code>source</code> pattern I showed earlier:</p>

<div><script src='https://gist.github.com/96dd157a0206d59ac30a.js?file=lazy-loading.html'></script>
<noscript><pre><code>{if testimonial_photo}
    {exp:ce_img:pair
        src=&quot;{testimonial_photo}&quot;
        width=&quot;223&quot;
        height=&quot;140&quot;
        allow_scale_larger=&quot;yes&quot;
        crop=&quot;yes&quot;
        interlace=&quot;yes&quot;
        cache_dir=&quot;/&quot;
        }
        &lt;div class=&quot;module__image image--lazy&quot; data-image-src=&quot;{made}&quot;&gt;&lt;/div&gt;
    {/exp:ce_img:pair}
{/if}</code></pre></noscript></div>


<p>We are only just beginning to scratch the surface of what’s possible with adaptive images and I am sure we will come up with newer, better ways to do this stuff. Heck, there may even be an adaptive images add-on in the pipeline for ExpressionEngine. But, in the meantime, if you are trying to implement adaptive images with ExpressionEngine, CE Image is a good way to go.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Enabling Webmentions in Jekyll]]></title>
				<link href="http://aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll/"/>
				<updated>2014-11-18T17:01:08-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll</id>
				<content type="html"><![CDATA[<p>While I am really happy with my choice to move away from a dynamic website/blog to a static one—powered by <a href="http://octopress.org/">Octopress</a>, hosted for free on <a href="https://github.com">Github</a>—it’s been pretty limiting when it comes to integrating comments and other more necessarily dynamic components.</p>

<!-- more -->


<p>Like many folks in the Octopress/Jekyll community, I’ve opted to use <a href="https://disqus.com/websites/">Disqus’ free service to manage comments</a>, but I’m not in love with it. First of all, it requires JavaScript. You know <a href="http://aaron-gustafson.com/notebook/2014/a-fundamental-disconnect/">my stance on that</a>. Now I’m willing to accept comments as an <a href="https://en.wikipedia.org/wiki/Progressive_enhancement">enhancement</a> to the reading process, but it doesn’t mean I like the situation. Secondly, they control the content and if they go away, so do all of your comments.</p>

<p>I’ve become quite intrigued by the potential of <a href="http://indiewebcamp.com/webmention">webmentions</a> as a way of taking back control of our content. They are a brilliant way to loosely connect related posts on personal blogs and third-parties like Twitter, Facebook, and Google+. With my mind unable to think about anything else, I decided to see what it would take to get webmentions up and running here.</p>

<p>At first I went to <a href="http://aaronparecki.com/">Aaron Parecki</a>’s <a href="http://webmention.io">webmention.io</a> project and looked through <a href="https://github.com/aaronpk/webmention.io/blob/master/README.md">the docs</a>. It looked like it could fit the bill, but I noticed there was no way to directly apply for an account, so I moved on to <a href="http://voxpelli.com/">Pelle Wessman</a>’s <a href="https://webmention.herokuapp.com/">webmention Heroku app</a>.</p>

<p>I really like Pelle’s solution and easily implemented it locally, but the JavaScript reliance was nagging at me. I returned to webmention.io and decided to <a href="https://twitter.com/aarongustafson/status/534394789152948224">reach out to Aaron</a> on the off change he’d give me access to his service. <a href="https://twitter.com/aaronpk/status/534398408815964160">He responded pretty quickly</a> and I was off to the races.</p>

<p>In preparation for building my plugin, I looked over a few other Jekyll plugins (Octopress is built on Jekyll) and got a sense of the structure and how to go about creating a <a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Programmers#create-your-own-tags">Liquid tag</a> (Liquid being the default templating language used by Jekyll). Then I created a new Ruby file and got cracking. Now I’ll warn you, I don’t normally write Ruby. The last time I did it professionally was when <a href="https://github.com/rails/rails/tree/v0.12.0">Rails was at 0.12</a>, so that should tell you something. That said, it was pretty easy to get back into the flow and I managed to put together <a href="https://github.com/aarongustafson/jekyll-webmention_io">a basic Liquid Tag for webmentions and webmention counts</a> in about two hours.</p>

<p>The tag to display webentions for a page is pretty simple:</p>

<div><script src='https://gist.github.com/cb15ead6bf3a72b8f92a.js?file=webmentions.html'></script>
<noscript><pre><code>{% webmentions YOUR_URL %}</code></pre></noscript></div>


<p>This tag outputs a container <code>div</code> and an ordered list of every webmention found when the site is generated (or previewed). To show the current webmention count, you use a slightly different tag which just outputs a number:</p>

<div><script src='https://gist.github.com/cb15ead6bf3a72b8f92a.js?file=webmention_count.html'></script>
<noscript><pre><code>{% webmention_count YOUR_URL %}</code></pre></noscript></div>


<p>These two tags allows me to bypass the JavaScript used in webmention.io’s integration examples and have Ruby consult the API directly. The plugin then creates the necessary markup using the JSON data the API provided.</p>

<p>Unfortunately, Liquid tags are only processed by Jekyll when the site is compiled. The actual site exists only as static HTML files on Github’s servers, so any webmentions created after I generate the site won’t show up. That’s a little less than ideal.</p>

<p>I don’t regenerate the site that often, nor do I want to set up a cron to automatically do it in order to update the webmentions. I took the afternoon to mull over some options to address this challenge. <em>How do I add in missing webmentions dynamically when the site itself is static?</em></p>

<p>Then it dawned on me: JavaScript can fill in the gaps. Using the examples Aaron had put together, I cobbled together a script to update the webmention list and fill in any missing mentions. In the interest of reducing dependencies, I used <a href="http://vanilla-js.com">the infamous Vanilla.js library</a> to create and insert new webmentions when the page was loaded.</p>

<p>And, as an added bonus, I adapted another bit of Aaron’s code to make the webmention list update in real time as new mentions are created elsewhere on the Web. The code uses <a href="http://www.w3.org/TR/websockets/">WebSockets</a>, <a href="http://caniuse.com/#feat=websockets">if available</a>, to make the magic happen. It’s pretty nifty and I tip my hat to Aaron for implementing that feature in the webmention.io service.</p>

<p>It’s been a pretty fun mini-project. In the end, I created a useful bit of kit that provides three distinct experiences:</p>

<ol>
<li>Static webmentions collected when the site was generated form the baseline experience;</li>
<li>JavaScript-enabled browsers get any webmentions that were published since I last generated the site; and</li>
<li>JavaScript-enabled browsers with WebSockets support get real-time updates with any webmentions that are published after the page loads.</li>
</ol>


<p>And, even better, the next time I generate the site, any missing webmentions will be inserted into the static files for safe keeping.</p>

<p>That’s a pretty nice continuum of experience if you ask me.</p>

<p>If you are a Jekyll or Octopress user, you can pick up <a href="https://github.com/aarongustafson/jekyll-webmention_io">the plugin and optional JavaScript file on Github</a>. Feel free to fork and sent me your bug fixes and enhancements.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[What Do We Own?]]></title>
				<link href="http://aaron-gustafson.com/notebook/what-do-we-own/"/>
				<updated>2014-11-17T09:43:54-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/what-do-we-own</id>
				<content type="html"><![CDATA[<p>My good friend <a href="http://adactio.com">Jeremy</a> is <a href="https://adactio.com/journal/6801">incredibly excited</a> about the <a href="http://indiewebcamp.com/">Indie Web movement</a> and I am right there with him. I love the idea of owning your content and then syndicating it out to social networks, photo sites, and the like. It makes complete sense… <a href="http://www.gyford.com/phil/writing/2009/04/28/geocities.php">Web-based services have a habit of disappearing</a>, so we shouldn’t rely on them. The only Web that is permanent is the one we control.</p>

<!-- more -->


<p>But going down this rabbit hole got me wondering <em>how much do we really control?</em> And beyond that, <em>what do we own?</em></p>

<p>To borrow <a href="http://aworkinglibrary.com/writing/index-cards/">a quote from Mandy Brown</a> (which also Jeremy referenced):</p>

<blockquote><p>No one owns this domain but me, and no one but me can take it down. I will not wake up one morning to discover that my service has been “sunsetted” and I have some days or weeks to export my data (if I have that at all). These URLs will never break.</p></blockquote>

<p>I don’t know if her statement is true. Idealistically, I want it to be true, but consider the following:</p>

<ol>
<li><strong>We rent domain names through registrars.</strong> We “purchase” domain names, but we must renew them from time to time to remain in control. Assuming you keep up the payments, they can still be <a href="http://www.wired.com/2012/03/feds-seize-foreign-sites/">seized for any number of reasons</a> or <a href="https://en.wikipedia.org/wiki/Domain_hijacking">they can be stolen</a>. Or the <a href="https://en.wikipedia.org/wiki/RegisterFly">registrar can go out of business</a> and you have to scramble to move it to a new registrar.</li>
<li><strong>Most of us rent space on the Web.</strong> I can’t think of a single friend of mine who still personally hosts his or her website. As such, we are beholden to our hosts. Even if we keep on top of our payments, things can go wrong: They could <a href="https://wordpress.org/support/topic/acenet-hosting-crashed-and-lost-all-my-data-what-do-i-do-now">crash or have another issue</a> and <a href="http://www.startupsmart.com.au/technology/crazy-domains-loses-web-hosting-data-as-startups-suffer/2014051912326.html">lose all of our data</a>. <a href="http://www.danrichard.com/2014/03/30/p2lhosting-is-now-closed-thank-you-everyone/">They could go under</a>. Or they could simply <a href="http://webdesignfromscratch.com/blog/how-123reg-almost-crippled-my-business/">lose your domain</a>.</li>
</ol>


<p>Knowing all of this—and realizing that when I am dead and gone all of the content I created could be lost to the ether if my family doesn’t know how to keep things going or doesn’t care to keep making these payments—I am left wondering <em>how do we achieve the permanence of print on the Web?</em></p>

<p>I don’t have any answers, so I pose it as an open question to the Indie Web community. If you have some thoughts, I encourage you to post them on your own site and use <a href="http://indiewebcamp.com/webmention">webmentions</a> to add them to this page. Or you can default to <a href="#disqus">the comments</a>.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Web Is for Everyone]]></title>
				<link href="http://aaron-gustafson.com/notebook/the-web-is-for-everyone/"/>
				<updated>2014-11-06T15:47:54-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/the-web-is-for-everyone</id>
				<content type="html"><![CDATA[<p><em>I gave this speech as the closing keynote at <a href="http://a11yqc.org/">A11yQC</a>, a conference on Web accessibility, on 14 October 2014 in Québec City, Canada. I have published my script here as the slides can’t really convey its message on their own.</em></p>

<p>We, as an industry, tend to have a pretty myopic view of experience. Those of us who work day-to-day in accessibility probably have a broader perspective than most, but I would argue that even we all fall short now and again when it comes to seeing the Web as others do.</p>

<!-- more -->


<h2>I: We are surrounded by technology</h2>

<p>We live in a bubble. We are surrounded by technology. Most of us grew up on desktops and laptops. Most of us carry at least one device on us at all times. For some of us, it’s a smartphone of some sort. For others it might be some sort of wearable—a fitness tracker or smart watch. And I’m willing to bet that a large number of us here in this auditorium may even have three or more devices on us at this very moment. I know I do.</p>

<p>And our technology is some of the newest, fastest, and most fully-featured in the world. Our devices are incredibly powerful and make us even more powerful, enabling us to tackle a wide range of tasks with ease. Most of the smartphones we carry come standard with pretty impressive assistive technology built in too, from adjustable text sizes to voice assist and screen reading tools to haptic, and other forms of feedback.</p>

<p>And they are brimming with sensors that extend our natural abilities: GPS, cameras, accelerometers. If you’re blind, your smartphone can help you pick out a matching outfit by identifying complementary colors. It can tell you who is standing in front of you by running facial recognition software. It can help you take a photograph of a document and then read it to you.</p>

<p>This is amazing stuff.</p>

<p>And, if headlines are to be believed, the smartphone revolution is spreading like wildfire. It seems nearly every other week there is some new report about how smartphone sales are continuing to soar. Heck, no one even seems to mention the humble feature phone anymore. And if you keep up with the tech press, CPUs, GPUs, operating systems and browsers keep getting faster and faster and JavaScript is the savior of us all.</p>

<p>The sky is the limit!</p>

<p>Beyond the devices we carry with us everywhere, more and more of our homes are being assimilated into the Borg of the Internet through smart appliances and fixtures like Nest. Tools like these make it easier to control our homes (and our budgets). They empower previously dependent people to live more independent lives.</p>

<p>And of course there’s the coolness factor of being able to turn on your heat while on your way home from work. These advancements are incredible!</p>

<figure id="fig-2014-11-06-01" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/01-sm.jpg"
         srcset="/i/posts/2014-11-06/01-lg.jpg 1920w, /i/posts/2014-11-06/01-md.jpg 600w, /i/posts/2014-11-06/01-sm.jpg 320w"
         alt="Two pie charts comparing Internet usage in the U.S. and Canada."
         >
</figure>


<p>Of course, what enables all of these things to be as amazing as they are is our ubiquitous connectivity. According to <a href="http://www.InternetLiveStats.com">Internet Live Stats</a>, roughly 86% of Americans use the Internet. You Canadians are a wee bit more “online” at 93%.</p>

<figure id="fig-2014-11-06-02" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/02-sm.jpg"
         srcset="/i/posts/2014-11-06/02-lg.jpg 1920w, /i/posts/2014-11-06/02-md.jpg 600w, /i/posts/2014-11-06/02-sm.jpg 320w"
         alt="Two pie charts comparing the number of mobile data connections in the U.S. and Canada."
         >
</figure>


<p>America does have you beat when it comes to mobile connectivity: there are over 100 mobile data subscriptions per 100 individuals in the U.S. (probably because of the whole multi-device thing). Mobile connections in Canada are around 53 per 100 people. <small><a href="http://www.oecd.org/sti/broadband/oecdbroadbandportal.htm">(source)</a></small></p>

<figure id="fig-2014-11-06-03" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/03-sm.jpg"
         srcset="/i/posts/2014-11-06/03-lg.jpg 1920w, /i/posts/2014-11-06/03-md.jpg 600w, /i/posts/2014-11-06/03-sm.jpg 320w"
         alt="Two pie charts comparing wired Internet connections in the U.S. and Canada."
         >
</figure>


<p>Wired connectivity is a bit lower: 30 for every 100 in the U.S. and 33 for every 100 in Canada. <small><a href="http://www.oecd.org/sti/broadband/oecdbroadbandportal.htm">(source)</a></small></p>

<figure id="fig-2014-11-06-04" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/04-sm.jpg"
         srcset="/i/posts/2014-11-06/04-lg.jpg 1920w, /i/posts/2014-11-06/04-md.jpg 600w, /i/posts/2014-11-06/04-sm.jpg 320w"
         alt="A bar chart depicting the cost range, per megabit per month, in the U.S. and Canada."
         >
</figure>


<p>Connectivity is relatively cheap for you Canadians as well. You pay somewhere in the neighborhood of 39¢-$9.86 per megabyte per month. In the U.S., fees range widely from 53¢ to a whopping $41.70 per megabyte per month. <small><a href="http://www.oecd.org/sti/broadband/oecdbroadbandportal.htm">(source)</a></small></p>

<p>Comcast and Rogers may be equally hated on our respective sides of the 49th parallel, but Comcast clearly sucks just a little bit more. (America!)</p>

<p>This technology and access makes it possible for us to live richer lives and post photos of our cats and kids on Instagram, but it has insulated us. We live in a fantasy world of speed, high definition, and Beats by Dre. Sadly, our experience is far from the reality most of the world lives in.</p>

<figure id="fig-2014-11-06-05" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/05-sm.jpg"
         srcset="/i/posts/2014-11-06/05-lg.jpg 1920w, /i/posts/2014-11-06/05-md.jpg 600w, /i/posts/2014-11-06/05-sm.jpg 320w"
         alt="A bar chart comparing the average monthly incomes of people living in the U.S., Canada, China, and India."
         >
</figure>


<p>The average American takes home $3,263 a month. For the average Canadian, that figure is $2,724. By comparison, the average worker in China makes $656 a month. But that is a fortune compared to folks in India, who only take home $295 for a month of hard work. <small><a href="http://en.wikipedia.org/wiki/List_of_countries_by_average_wage">(source)</a></small></p>

<p>How much is an unlocked iPhone 6 again? It starts around $649. That’s more than two months salary for the average Indian. The Galaxy S5? $799 or nearly three months of hard work. In places like India, feature phones are still quite prevalent. And even when a smartphone is introduced for their market, it pales in comparison to the sort of tech we are used to seeing.</p>

<figure id="fig-2014-11-06-06" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/06-sm.jpg"
         srcset="/i/posts/2014-11-06/06-lg.jpg 1920w, /i/posts/2014-11-06/06-md.jpg 600w, /i/posts/2014-11-06/06-sm.jpg 320w"
         alt="The Samsung Galaxy S5 smartphone with a specification summary (relevant details follow)."
         >
</figure>


<p>Here we have <a href="http://www.samsung.com/gr/microsite/galaxys5/">Samsung’s flagship Galaxy S5</a> with an amazing set of specs. A 16GB camera?! A quad-core processor?! This is the stuff of dreams for anyone who has been working with computers for more than 10 years. My first desktop was a 5150.</p>

<p>No not <a href="https://en.wikipedia.org/wiki/5150_(album">that awesome Van Halen record</a>), <a href="http://www-03.ibm.com/ibm/history/exhibits/pc25/pc25_intro.html">this beast from IBM</a>:</p>

<figure id="fig-2014-11-06-08" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/08-sm.jpg"
         srcset="/i/posts/2014-11-06/08-lg.jpg 1920w, /i/posts/2014-11-06/08-md.jpg 600w, /i/posts/2014-11-06/08-sm.jpg 320w"
         alt="The IBM 5150 personal computer."
         >
</figure>


<p>It weighted over 20 lbs, 28 lbs with two floppy drives. The screen weighed another 13 lbs and the keyboard was 6 lbs. It maxed out at 256K of memory and offered 40K of read only memory. I couldn‘t even find a spec detailing how slow the processor was, but let’s just say that the computer I began my Web career with nearly 15 years later was only a Pentium 90 with something like 16 MB of RAM.</p>

<p>And here, this pocket-sized computer just blows all of that out of the water.</p>

<figure id="fig-2014-11-06-09" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/09-sm.jpg"
         srcset="/i/posts/2014-11-06/09-lg.jpg 1920w, /i/posts/2014-11-06/09-md.jpg 600w, /i/posts/2014-11-06/09-sm.jpg 320w"
         alt="The Intex Cloud FX smartphone with specification summary (relevant details follow)."
         >
</figure>


<p>By contrast, here we have <a href="http://www.intexmobile.in/product_detail.aspx?PID=191&amp;PCatID=3">Intex’s Cloud FX</a>, a new phone with specs that read like the state of the art in 2007. A crappy camera, no front camera, a slow 1 GHz processor, a paltry 128 MB of RAM and barely double that in internal storage. It’s a crappy phone by our standards.</p>

<p>But that’s a Firefox OS phone aimed at the Indian market vs. an Android one aimed at the “developed” world. Perhaps you’d like to look at a more apples-to-apples comparison:</p>

<figure id="fig-2014-11-06-10" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/10-sm.jpg"
         srcset="/i/posts/2014-11-06/10-lg.jpg 1920w, /i/posts/2014-11-06/10-md.jpg 600w, /i/posts/2014-11-06/10-sm.jpg 320w"
         alt="The BLU Dash Jr K smartphone with specification summary (relevant details follow)."
         >
</figure>


<p>Here we have the <a href="http://www.gsmarena.com/blu_dash_jr-5662.php">BLU Dash Jr K</a>.</p>

<p>Both it and the Galaxy S5 run Android 4.4 (Kitkat), but that’s where their similarities end. Look at the resolution of the Dash Jr K: 320×480 versus the 1920×1080 of the S5. Look at the processor speed. Look at the RAM.</p>

<p>Now, honestly, how many of you would willingly carry the Dash Jr K or the Cloud FX as your primary phone? Maybe as a laugh, maybe ironically, but I highly doubt many in our profession would subject themselves to that. Why? Because we don’t have to.</p>

<p>Now I don’t know your salary, but I’m willing to bet you make more money and have far more disposable income available to spend on cutting edge gadgets than most people in the world. Surely that’s the case when you compare us to China and India, but it’s equally true here in North America.</p>

<p>In the U.S., we see stats like “Smartphone sales accounted for nearly 85% of all mobile phone sales” and “Smartphones have reached 50% penetration” with relative frequency. But those headlines often lead us to draw incorrect conclusions about what devices people actually use to access the Web.</p>

<p>The dirty little secret behind that 50% penetration number is that the penetration in question was concentrated in a scant 30% of U.S. households. Kinda burying the lead if you ask me. <small><a href="http://www.chetansharma.com/usmarketupdateq12013.htm">(source)</a></small></p>

<figure id="fig-2014-11-06-12" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/12-sm.jpg"
         srcset="/i/posts/2014-11-06/12-lg.jpg 1920w, /i/posts/2014-11-06/12-md.jpg 600w, /i/posts/2014-11-06/12-sm.jpg 320w"
         alt="A pie chart breakdown of the findings by the Pew Research Center on smartphone penetration by household income (relevant details follow)."
         >
</figure>


<p>The Pew Research Center released a study earlier this year that showed smartphone penetration in the US, broken down by income bracket. As expected, the higher the household income, the more likely you were to find someone with a smartphone.</p>

<p>In the &lt; $30,000 income bracket, smartphones were found in 47% of households. But it starts to get really interesting when you cross-reference that data with how many people fall into those income brackets. <small><a href="http://www.pewinternet.org/2014/02/27/part-1-how-the-internet-has-woven-itself-into-american-life/">(source)</a></small></p>

<figure id="fig-2014-11-06-13" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/13-sm.jpg"
         srcset="/i/posts/2014-11-06/13-lg.jpg 1920w, /i/posts/2014-11-06/13-md.jpg 600w, /i/posts/2014-11-06/13-sm.jpg 320w"
         alt="The Pew Research Center’s findings when compared to U.S. Census Data (relevant details follow)."
         >
</figure>


<p>$30,000 was the average income in the U.S. in 2013. And, according to the 2010 census, the overwhelming majority of American households earn less than that. <small><a href="http://www.census.gov/2010census/data/">(source)</a></small></p>

<p>Now both the Samsung Galaxy S5 and the BLU Dash are technically smartphones, but one costs $43 and the other costs $799. On a limited budget, which do you think you’d be more likely to get?</p>

<p>Sure, in the US, carriers subsidize phone prices, but even the subsidized $199 AT&amp;T offers the S5 for (with a 2-year agreement) ends up costing $1319 once you factor in the $40 activation and the minimum of $45 a month for a data plan.</p>

<p>So again I’ll ask: On a limited budget, which do you think you’d be more likely to get?</p>

<p>So even if a household has a smartphone, there’s probably decent odds on it being something a little lackluster compared to what we are used to carrying.</p>

<p>While it may not be a big deal for us to pay $60, $100, or more a month for mobile data access with fast speeds and high bandwidth limits, that would be a burden for most people. It’s worth noting that the cheaper pay-as-you-go plans typically have substantially lower data caps, frequently cost more per megabit, and often run at far slower speeds. Accordingly, while the Galaxy S5 supports blazingly fast 4G LTE speeds, both the Cloud FX and the Dash Jr K run on 2G technology.</p>

<figure id="fig-2014-11-06-14" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/14-sm.jpg"
         srcset="/i/posts/2014-11-06/14-lg.jpg 1920w, /i/posts/2014-11-06/14-md.jpg 600w, /i/posts/2014-11-06/14-sm.jpg 320w"
         alt="A photo of a Blackberry device experiencing an error loading a webpage because the page was too large. Photo Credit: Brad Frost."
         >
</figure>


<p>All of this is to say that we must be hyper-aware of how big our Web pages are. Large pages with tons of high-resolution images cost our users real money and, frankly, waste their time. Some might not even load. Big Web pages are a barrier to access.</p>

<p>Beyond page size, we should also be concerned with how much work we we are requiring of the browser. JavaScript-intensive sites and applications can run really poorly on devices with slow processors and minimal RAM, like the BLU Dash Jr K or the Intex Cloud FX.</p>

<p>These are just a few of the concerns we’re having to deal with today, and only about a third of our planet is online. There are 4.8 billion people with no Internet access. But it’s coming. And when it happens, we will likely have even more to deal with. Like language barriers.</p>

<figure id="fig-2014-11-06-15" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/15-sm.jpg"
         srcset="/i/posts/2014-11-06/15-lg.jpg 1920w, /i/posts/2014-11-06/15-md.jpg 600w, /i/posts/2014-11-06/15-sm.jpg 320w"
         alt="A pie chart comparison of the global population that speaks English versus the percentage of the Web that is in English."
         >
</figure>


<p>Consider this: <a href="http://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers">About 11.7% of the world speaks English as its first or second language</a> yet <a href="http://en.wikipedia.org/wiki/Languages_used_on_the_Internet">55.7% of the Web is in English</a>. (French is spoken by roughly 1.4% of the world and 4% of the Web is in French.)</p>

<figure id="fig-2014-11-06-16" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/16-sm.jpg"
         srcset="/i/posts/2014-11-06/16-lg.jpg 1920w, /i/posts/2014-11-16/15-md.jpg 600w, /i/posts/2014-11-06/16-sm.jpg 320w"
         alt="Pie charts detailing the percentage of people in India and China who speak English."
         >
</figure>


<p>This presents some significant challenges as the Web expands into places like India and China. Only 18.61% of India’s 1.2 billion people speak English as a first, second, or even third language. In China, only about 0.73% of their 1.2 billion people speak English. Network availability is only the first of many hurdles to accessing the Web for much of the planet. <small><a href="http://en.wikipedia.org/wiki/List_of_countries_by_English-speaking_population">(source)</a></small></p>

<p>We need to look beyond our technological and cultural bubble and consider how others experience the Web. As an industry, we must figure out how we can make their experiences better.</p>

<h2>II: We are UX professionals</h2>

<p>We are technologists who focus on accessibility, the capacity to tackle these challenges should come naturally to us. We were drawn to this field because we empathize with the struggles of others and want to help empower them to live independently.</p>

<p>We are user experience professionals and yet we’re often pigeon-holed outside of that practice. Our knowledge and contributions are often seen as only being applicable for people with “disabilities.” But our purview goes way beyond helping people with less than perfect vision, hearing, or mobility. Our purview is improving Web experiences for all people, regardless of physical or mental abilities, gender, race, or language.</p>

<p>Our purview is user experience and we need to assert ourselves and our role in that capacity.</p>

<p>More than most, we understand the importance of experience, of access, of independence because we work with people for whom “little things” like the ability to press a button can be a big problem. And beyond that, we also understand that experience is not a binary thing. <strong>It is a continuum.</strong></p>

<p>This is a crucial fact that the Web industry is only just beginning to come to terms with. <strong>We can help ease that transition.</strong></p>

<p>We are the champions of the egalitarian dream: equality of opportunity with the understanding that it does not guarantee equality of outcome or experience. We are pragmatic idealists who want to enable everyone access to amazing products and services.</p>

<p>We provide <em>tremendous</em> business value.</p>

<p>But we have a lot of work to do.</p>

<p>Sadly, many people still don’t value accessibility. They don’t get why it is important. They see it as expensive. They see it as a “nice to have”. They see it as an add-on.</p>

<p>I have gotten this reaction from designers. I have gotten it from developers. I have gotten it from other user experience professionals. And I have most often gotten it from managers and business owners. I’m sure you have as well.</p>

<p>I once had someone tell me he didn’t need to make his website accessible because he sold televisions and “blind people don’t watch TV.” I was floored. I mean holy crap!? This guy had no idea.</p>

<p>I had to educate him, but I needed to do it softly. I need to explain to him that his view of “special needs” was wrong. I had to be gentle because people don’t often react well to being told their world-view is fundamentally flawed. I’m sure I’m not the only one in this room who has been in a situation like this either.</p>

<p>If our primary job is to empower people to live independently, our second job is surely to educate the world, not just on how to make the Web more accessible, but why it matters. <strong>We need to bring everyone into the fold.</strong></p>

<figure id="fig-2014-11-06-17" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/17-sm.jpg"
         srcset="/i/posts/2014-11-06/17-lg.jpg 1920w, /i/posts/2014-11-06/17-md.jpg 600w, /i/posts/2014-11-06/17-sm.jpg 320w"
         alt="A photo of the philosopher John Rawls."
         >
</figure>


<p>I love exercises that create opportunities for revelation. One of my favorites originates from John Rawls. Rawls was a philosopher who used to run a social experiment with students, church groups, and the like.</p>

<p>In the experiment, individuals were allowed to create their ideal society. It could follow any philosophy. It could be a monarchy or democracy or anarchy. It could be capitalist or socialist. The people in this experiment had free rein to control absolutely every facet of the society… but then he’d add the twist: They could not control what position they occupied in that society.</p>

<p>This twist is what John Harsanyi—an early game theorist—refers to as the <a href="https://en.wikipedia.org/wiki/Veil_of_ignorance">“Veil of Ignorance”</a> and what Rawls found, time and time again, was that individuals participating in the experiment would gravitate toward creating the most egalitarian societies.</p>

<p>It makes sense: what rational, self-interested human being would treat the elderly, the sick, people of a particular gender or race or creed or color, poorly if they could find themselves in that position?</p>

<p>We’re often put in a box and told to only concern ourselves with folks with “special needs.” Well news flash: <strong>we all have special needs</strong>. Some we’re born with. Some we develop. Some are temporary. Some have nothing to do with us personally, but are situational or purely dependent on the hardware we are using, the interaction methods we have available to us, or even the speed at which we can access the Internet or process data.</p>

<p>We need to look beyond the world of assistive Web technology and explain the value and insight we bring to approaches like Responsive Web Design. After all, what is RWD about if not access? Yes, its fundamental tenets are concerned with visual design, but in terms of the big picture, they’re all about providing the best possible reading experience. Responsive web design is also a perfect example of the continuum of experience we are so intimately familiar with.</p>

<p>We understand special needs. We understand fallbacks. And we understand how to design robust experiences that work under a wide variety of conditions. That knowledge is invaluable.</p>

<p><strong>We are invaluable.</strong></p>

<h2>III: We are the future</h2>

<p>This is an incredibly exciting time to be working in accessibility. User experience is becoming central to how organizations work and how they design their products and accessibility should be at the core of that.</p>

<p><strong>This is our time!</strong></p>

<p>The more influence we have on the products and services our companies and clients create, the more places they can go and the more successful they will be.</p>

<p>Take WhatsApp for instance. Fundamentally, it is a chat application. That’s not terribly groundbreaking. But it developed into a way to avoid costly SMS messages. Still, even that’s not all that special: the App Store lists over 7,900 messaging apps for the iPhone.</p>

<p>What made WhatsApp matter was the shrewd business decision to move beyond the bubble. They chose to embrace access and embrace diversity. They made their messaging application available on a ton of platforms, especially low cost ones. So sure, they support iOS and Android, but unlike a lot of app developers, they officially support Android 2.1+, iOS 4.3+, Blackberry 4.7+, Symbian, Nokia Series 40, Windows Phone. Some of those aren’t even smartphone OSes!</p>

<p>While many may not consider this an “accessibility” win, it absolutely is. WhatsApp made a decision to open up access to their messaging application to people who were traditionally ignored by mobile app developers. And they were rewarded handsomely for this: as of last count, they had somewhere around 600 million users globally. And then there’s that little thing about them selling to Facebook for $19 billion.</p>

<p>And WhatsApp isn’t a fluke in benefiting from making itself more accessible: China’s WeChat boasts a user base of 600 million and Japan’s LINE has over 400 million users. All of these messaging platforms have benefitted greatly from embracing devices and technologies available to people outside of our bubble.</p>

<p>We can and should be advising our companies and clients on why and how to be more accessible. We need to look at the big picture and we should not be afraid to be bold in asserting that <strong>accessibility creates opportunity</strong>.</p>

<p>We already know that strong content guidelines pay dividends by creating opportunities for our content to work harder for us. Not only do they improve the readability of content on the sites we build, but they facilitate social sharing through more engaging summaries and headlines.</p>

<p>The clear, well-written, jargon-free content we advocate for is easier to translate into other languages. It also makes the content easier to follow via screen readers and other vocalization tools like <a href="http://www.readspeaker.com/">Readspeaker</a>, which in turn makes it possible to offer novel ways of accessing our content, like automated podcasts.</p>

<p>Our focus on semantic, meaningful, markup allows our content to be pulled into other contexts including focused reading apps like Pocket, Readability, and Instapaper.</p>

<p>And while we can certainly do a lot to make rich, JavaScript-based interactions far more accessible to assistive technology, our advocacy for progressive enhancement ensures that our content and tools work no matter what.</p>

<figure id="fig-2014-11-06-18" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/18-sm.jpg"
         srcset="/i/posts/2014-11-06/18-lg.jpg 1920w, /i/posts/2014-11-06/18-md.jpg 600w, /i/posts/2014-11-06/18-sm.jpg 320w"
         alt="Headline: “Sky’s internet service mistakenly blocks web-critical plugin” (Source: The Guardian)"
         >
</figure>


<p>Let’s say an ISP blocks jQuery as malware. No problem.</p>

<figure id="fig-2014-11-06-19" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/19-sm.jpg"
         srcset="/i/posts/2014-11-06/19-lg.jpg 1920w, /i/posts/2014-11-06/19-md.jpg 600w, /i/posts/2014-11-06/19-sm.jpg 320w"
         alt="Headline: “FCC to Marriott: No, you can’t force your customers onto terrible hotel WiFi” (Source: The Washington Post)"
         >
</figure>


<p>Let’s say the page is taking a long time to download on a high-latency mobile network (or hotel Wi-Fi). No big deal.</p>

<p>The products we build just work because we know that we don’t control how they are delivered.</p>

<p>It’s our job to educate others on this reality and to demonstrate why these are central to user experience.</p>

<h2>IV: We are Agents of Change</h2>

<p>The shift to handheld computers has been huge for accessibility. After all, the computers in our pockets are assistive technology. This is our world!</p>

<p>I’m going to make a somewhat bold prediction: while touch has been revolutionary in many ways toward improving digital access, voice is the future. And the user experience of voice-based interfaces is going to be critical in creating more opportunities for people to interact with and participate in the digital world.</p>

<p>We’ve got the jump on the other folks working in user experience when it comes to voice: We’ve been considering how interfaces sound for years. On top of that, we already understand how to design alternate interaction methods because we see experience as a continuum.</p>

<p>As voice UX technology—for example, Siri, Google Now, and Cortana—improves, we should be the ones people should look to as the experts. We will empower the next generation of websites and applications to become voice-enabled. And in so doing, we will improve the lives of billions. Because “accessibility” is not about disabilities, it’s about access and <strong>it’s about people</strong>.</p>

<p>Sure, we’ll make it easier to look up movie times and purchase tickets to see the latest <cite>Transformers</cite> debacle, but we will also empower the nearly 900 million people globally—over 60% of whom are female—that are illiterate. And that’s a population we have not traditionally viewed as our purview either.</p>

<p>We will create new opportunities for the poor and disadvantaged to participate in a world that has largely excluded them. You may not be aware, but 80% of Fortune 500 companies—think Target, Walmart—only accept job applications online or via computers.</p>

<p>We will enable people who have limited computer skills or who struggle with reading to apply for jobs with these companies.</p>

<p>We will empower immigrants to read lease agreements and their postal mail.</p>

<p>We will enable people with visual disabilities to vote, even on paper ballots, without human assistance.</p>

<p>We can help bridge the digital divide and the literacy gap. We can create opportunities for people to better their lives and the lives of their families. We have the power to create more equity in this world than most of us have ever dreamed.</p>

<p>This is an incredibly exciting time, not just for the accessibility experts, not just for user experience, not just the Web, but for the world! I can’t wait to see how awesome you make it!</p>

<figure id="fig-2014-11-06-20" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2014-11-06/20-sm.jpg"
         srcset="/i/posts/2014-11-06/20-lg.jpg 1920w, /i/posts/2014-11-06/20-md.jpg 600w, /i/posts/2014-11-06/20-sm.jpg 320w"
         alt="A photo of the opening ceremony of the 2012 London Olympic Games when Sir Tim Berners-Lee (creator of the World Wide Web) typed “This is for Everyone” across the stadium."
         >
</figure>


<p>Thank you.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[ARIA Quicktip: Labelledby vs. Describedby]]></title>
				<link href="http://aaron-gustafson.com/notebook/aria-quicktip-labelledby-vs-describedby/"/>
				<updated>2014-11-05T10:45:22-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/aria-quicktip-labelledby-vs-describedby</id>
				<content type="html"><![CDATA[<p>Last night, while we were enjoying a cool evening and a few drinks outside after day 1 of <a href="http://bdconf.com">BDConf</a>, <a href="http://adactio.com">Jeremy</a> asked me for some clarification on the ARIA attributes I had demoed as part of <a href="http://www.slideshare.net/AaronGustafson/falling-in-love-with-forms-bdconf-2014">my forms presentation</a> earlier in the afternoon. In particular, he was confused by how <code>aria-labelledby</code> and <code>aria-describedby</code> differ.</p>

<!-- more -->


<p>I hadn’t really thought about it before, but it’s a good question. They seem pretty similar in function, right? And both support a space separated list of one or more <code>id</code> references. It’s downright confusing.</p>

<p>My simple explanation was that, at least in terms of form fields, they differ in when they are read. The <code>aria-labelledby</code> attribute replaces the associated <code>label</code> element (which is, of course, associated with the field via the <code>label</code>’s <code>for</code> attribute). The <code>aria-describedby</code> attribute, on the other hand, is read after the field type is stated.</p>

<p>To demonstrate how all of this plays out, I threw together <a href="http://codepen.io/aarongustafson/pen/dmuoe/">a quick CodePen demo</a> that takes you through numerous ways you can use and combine these attributes. I also did a <a href="http://youtu.be/U8_VjI-Z1LA">screen recording to demonstrate how ChromeVox exposes these attributes</a>:</p>

<p><figure id="fig-U8_VjI-Z1LA" class="figure figure--video"><div class="video-embed video-embed--youtube video-embed--4x3"><a class="video-embed__lazy-link" style="background-image:url(http://i2.ytimg.com/vi/U8_VjI-Z1LA/0.jpg)" href="//www.youtube.com/watch?v=U8_VjI-Z1LA" data-lazy-video-src="http://www.youtube.com/embed/U8_VjI-Z1LA?autoplay=1"><div class="video-embed__lazy-div"></div><div class="video-embed__lazy-info">aria-labelledby vs. aria-describedby</div></a></div></figure></p>

<p><strong>Update:</strong> <a href="https://twitter.com/stevefaulkner">Steve Faulkner</a> shared a doc that discusses <a href="http://rawgit.com/w3c/aria/master/html-aam/html-aam.html#accessible-name-and-description-calculation">how accessible names and descriptions are calculated</a>. Thanks Steve!</p>

<p><em>Note: I did discover a bug in ChromeVox wherein the content of the elements referenced in <code>aria-describedby</code> are not read when the field receives focus via the keyboard (using the <kbd>tab</kbd> key), but it does when it receives focus via the mouse. I’ve submitted <a href="https://code.google.com/p/google-axs-chrome/issues/detail?id=158&amp;thanks=158&amp;ts=1415202123">a bug report</a> to to the powers that be.</em></p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[CSS Variables Are a Bad Idea]]></title>
				<link href="http://aaron-gustafson.com/notebook/css-variables-are-a-bad-idea/"/>
				<updated>2014-11-04T14:58:01-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/css-variables-are-a-bad-idea</id>
				<content type="html"><![CDATA[<p>I’ll level with you: I used to think I wanted variables in CSS.</p>

<p>As a programmer, I love the idea of being able to abstract reusable bits like colors, border widths, font sizes, and the like to obviously named variables. It’s a far more <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> approach and makes maintenance far easier.</p>

<!-- more -->


<p>Before I made the leap to using a CSS preprocessor, I was convinced we needed CSS variables, but I always wondered how we might make it possible without breaking one of the fundamental <a href="http://www.w3.org/TR/CSS21/intro.html#design-principles">design principles of CSS</a>: Forward and backward compatibility. Take a look at this example (which is based on <a href="http://www.w3.org/TR/css-variables/">the working draft spec</a>) and I think you’ll spot the problem:</p>

<div><script src='https://gist.github.com/c3ddcb792eb69e0703e1.js?file=css-vairables.css'></script>
<noscript><pre><code>:root {
  --foreground-color: #333;
  --background-color: #fff;
}

body {
  background: var(--background-color);
  color: var(--foreground-color);
}</code></pre></noscript></div>


<p>For a browser that understands CSS variables, the interpreted stylesheet would look like this:</p>

<div><script src='https://gist.github.com/c3ddcb792eb69e0703e1.js?file=desired-result.css'></script>
<noscript><pre><code>body {
  background: #fff;
  color: #333;
}</code></pre></noscript></div>


<p>But any browser that doesn’t understand the variables would never get the color values because browsers follow <a href="http://www.w3.org/TR/CSS21/syndata.html#parsing-errors">the rules of fault tolerance in CSS</a> and ignore anything they don’t understand. The introduction of variables to CSS would effectively build a wall between older browsers and new ones. (For the record, as of this writing, <a href="http://caniuse.com/#feat=css-variables">only Firefox has implemented CSS variables</a>).</p>

<p>In order to serve the broadest spectrum of devices, we’d have to provide a fallback like this:</p>

<div><script src='https://gist.github.com/c3ddcb792eb69e0703e1.js?file=css-variables-fallback.css'></script>
<noscript><pre><code>:root {
  --foreground-color: #333;
  --background-color: #fff;
}

body {
  background: #fff;
  background: var(--background-color);
  color: #333;
  color: var(--foreground-color);
}</code></pre></noscript></div>


<p>But that kinda defeats the whole purpose, right?</p>

<p>Preprocessors already give us this access to variables today (along with nesting, mixins, and programmatic structures like conditionals, loops, etc.). Here’s a SASS example:</p>

<div><script src='https://gist.github.com/c3ddcb792eb69e0703e1.js?file=sass-variables.scss'></script>
<noscript><pre><code>$foreground-color: #333;
$background-color: #fff;
 
 
body {
  background: $background-color;
  color: $foreground-color;
}</code></pre></noscript></div>


<p>The big difference here is that this document is a source file, it is not what is sent to the browser. This file is compiled by the preprocessor into actual CSS, which is what we send to the browser and is exactly what we wanted in the first place:</p>

<div><script src='https://gist.github.com/c3ddcb792eb69e0703e1.js?file=desired-result.css'></script>
<noscript><pre><code>body {
  background: #fff;
  color: #333;
}</code></pre></noscript></div>


<p>And it works on every browser that supports CSS, all the way back to <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets#Difficulty_with_adoption">IE 3</a>.</p>

<p>With a preprocessor like SASS, Less, or Stylus, I get all of the maintainability benefits without sacrificing browser support. It’s a no-brainer. But even if that were not true, there’s another issue to consider: If I push CSS variables to browsers, they have to parse the CSS and substitute the variables before they can apply the styles.</p>

<p>Now I’m sure browser makers can find ways to optimize this process, but it’s bound to affect the rendering time. And not in a positive way. I don’t even want to think about how bad it would be on a mobile chipset, especially on a low-end device.</p>

<p>Honestly, I love using variables… in the source files I use with a preprocessor. Given the potential loss of browser support, the pointless fallbacks I’d have to use if I wanted to continue supporting older browsers, the existence of numerous preprocessor options that solve the abstraction problem in a backward- and forward-compatible way, and the fact that CSS variables would make browsers have to work even harder to achieve the desired result, I’m not convinced we need them.</p>

<p>CSS variables are a bad idea.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Google Embraces Progressive Enhancement]]></title>
				<link href="http://aaron-gustafson.com/notebook/google-embraces-progressive-enhancement/"/>
				<updated>2014-10-28T21:07:35-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/google-embraces-progressive-enhancement</id>
				<content type="html"><![CDATA[<p>In case you missed it, <a href="http://googlewebmastercentral.blogspot.com/2014/10/updating-our-technical-webmaster.html">yesterday Pierre Far updated Google’s Webmaster Guidelines</a>. In his post, Pierre lays out their case for <a href="https://en.wikipedia.org/wiki/Progressive_enhancement">progressive enhancement</a>:</p>

<blockquote><p>Just like modern browsers, our rendering engine might not support all of the technologies a page uses. Make sure your web design adheres to the principles of progressive enhancement as this helps our systems (and a wider range of browsers) see usable content and basic functionality when certain web design features are not yet supported.</p></blockquote>

<!-- more -->


<p>As someone who has been beating the drum for progressive enhancement for over a decade, this sort of support from such an influential company gets me a little teary-eyed.</p>

<p>It’s nice to see Steve Champeon’s philosophy for web design finally beginning to gain traction outside of the ivory tower of Web standards. It is a fantastic philosophy that has been guiding our work since Steve unveiled it. And it has paid some handsome dividends for both us and our clients.</p>

<p>If you need help wrapping your head around progressive enhancement, you should read <a href="#fn-2014-10-28">my introductory series for <cite>A List Apart</cite></a>. If you want more, there’s also <a href="http://adaptivewebdesign.info">my book on progressive enhancement: <cite>Adaptive Web Design</cite></a>. And if you need help getting your team up to speed, I’m more than happy to hop on a plane and come to you. Just <a href="http://aaron-gustafson.com/contact/">drop me a line</a>. I have helped many companies embrace this philosophy and have seen it improve their productivity, increase their reach by supporting more devices, and improve the accessibility of their products. Oh… and <a href="http://blog.easy-designs.net/archives/the-true-cost-of-progressive-enhancement">progressive enhancement has saved our clients real money and reduced their time to market</a>.</p>

<p>I don’t tend to be a “magic pill” kind of believer, but I can honestly say that embracing progressive enhancement can radically change your business for the better. And I’m glad to see Google agrees with me.</p>

<h2 id="fn-2014-10-28">My (still-relevant) 2008 series on Progressive Enhancement</h2>


<ol>
<li><a href="http://www.alistapart.com/articles/understandingprogressiveenhancement/">Understanding Progressive Enhancement</a></li>
<li><a href="http://www.alistapart.com/articles/progressiveenhancementwithcss/">Progressive Enhancement with CSS</a></li>
<li><a href="http://www.alistapart.com/articles/progressiveenhancementwithjavascript/">Progressive Enhancement with JavaScript</a></li>
</ol>

]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Celebrating CSS]]></title>
				<link href="https://adactio.com/journal/7653"/>
				<updated>2014-10-14T19:07:18-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/celebrating-css</id>
				<content type="html"><![CDATA[<p>As usual, Jeremy sums up my thoughts perfectly:</p>

<blockquote><p>Personally, I don’t think there’s any reason to have variables in the CSS language; it’s enough to have them in pre-processing tools. Variables add enormous value for developers, and no value at all for end users.</p></blockquote>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Demons of On-Demand]]></title>
				<link href="http://techcrunch.com/2014/09/20/the-demons-of-on-demand/"/>
				<updated>2014-09-21T19:08:27-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/the-demons-of-on-demand</id>
				<content type="html"><![CDATA[<blockquote><p>We were promised flying cars; we were added to mailing lists.</p></blockquote>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Responsive Typography]]></title>
				<link href="http://aaron-gustafson.com/notebook/responsive-typography/"/>
				<updated>2014-09-20T16:43:22-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/responsive-typography</id>
				<content type="html"><![CDATA[<p>I’m incredibly excited to see that <a href="https://twitter.com/jpamental">Jason Pamental</a>’s fantastic <a href="http://www.amazon.com/gp/product/1491907096/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1491907096&amp;amp;linkCode=as2&amp;amp;tag=easydesign-20&amp;amp;linkId=JC6INFXF3DHODKEM"><cite>Responsive Typography</cite></a> is finally available. I had the great pleasure of reviewing an early galley and I can honestly say that it’s a book well worth reading. Jason’s natural and friendly style makes for an easy read and it’s chock-full of actionable recommendations and tips you’ll want to start using right away.</p>

<!-- more -->


<p>In fact, I think <cite>Responsive Typography</cite> is such an invaluable book, I offered to write the Foreword and Jason (and O’Reilly) have been kind enough to let me reprint it here:</p>

<blockquote><p>Back in my day, all we had was the <code>font</code> element.</p>

<p>I fully realize that makes me sound like an old man, but I’m not ready to chase young whippersnappers off my lawn quite yet. But the fact remains that when I taught myself how to build web pages back in the mid-’90s, our design options were fairly limited. Heck, my first experience on the Web was on a text-based browser that provided me access to page upon glorious page of stark, blocky Courier. White text. Black background. 100% responsive.</p>

<p>When visual browsers finally hit the scene, ushering in images and the <code>font</code> element, we web designers finally had the opportunity to move out of monospace. I’ll leave it to Jason to delve into the history of typography on the Web, but the advent of visual browsers opened the floodgates for use (and abuse) of type online. It was the desktop publishing revolution all over again: a direct assault on the sensibilities of anyone with even the slightest understanding of typography.</p>

<p>Over the years, we’ve made a lot of mistakes with web type: Fonts embedded in images. Fonts embedded in Flash. Fonts embedded in JavaScript. Many of those were attempts to bypass the gridlock created by browser makers, type foundries, and the W3C, who couldn’t come to a consensus on how to balance a desire for more type options on the Web while ensuring typographers got paid for all of their hard work. While they bickered, we soldiered on, looking for more accessible and maintainable ways to use more typefaces.</p>

<p>And while we were busy tinkering with sIFR and Cufón, eagerly awaiting the day we could abandon those hacks and have real browser support for actual font formats, an army of little black rectangles had caught a whiff of the awesome content we were serving up to desktop browsers.</p>

<p>Like ants at a Sunday picnic, these little black rectangles initially appeared one or two at a time. They were easily ignored, a nuisance. Nothing to take too seriously. But before we knew what was happening, that trickle turned into a flood and those little rectangles  were hungry. Instead of taking a crumb here and there—which we tossed to them with a great sense of self-satisfaction—these ambitious ants were carrying off whole deli trays and the friggin’ <cite>New York Times</cite>.</p>

<p>These little black rectangles are, of course, the surge of handheld (or at least hand-holdable) devices that have been redefining our concept of “the Web” almost daily. They exhibit widely variable screen sizes: from about the size of a matchbook, to ones that are bigger than an extra large pizza. They sport a plethora of pixel densities, new interaction methods, unpredictable network connection speeds, and low-powered processors that can’t possibly compete with traditional laptop and desktop CPUs (not to mention a handful of different operating systems and browsers). All of these factors affect how—and even whether—your typographic choices will make it to your customers, and it’s a lot to take in.</p>

<p>Thankfully, Jason has your back. The book you’re now reading is invaluable: it’s chock-full of useful approaches, practical code samples, and advice for dealing with typography in the age of responsive web design.</p>

<p>By the time you finish this brief book, you’ll be ready to handle pretty much any device someone may throw at you. But hopefully they won’t. Devices are hard. And expensive.</p>

<p>— Aaron Gustafson<br/>
&nbsp;&nbsp;&nbsp;Author, <cite>Adaptive Web Design</cite></p></blockquote>

<p>By the way, if you’re on a typography kick I’ll also recommend an second new book by another Jason I respect greatly: <a href="http://jasonsantamaria.com">Jason Santa Maria</a>’s <a href="http://www.abookapart.com/products/on-web-typography"><cite>On Web Typography</cite></a>. The two books books compliment each other perfectly, with very little overlap. They’d make an awesome bundle.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Missed Connections]]></title>
				<link href="http://aaron-gustafson.com/notebook/missed-connections/"/>
				<updated>2014-09-19T16:12:50-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/missed-connections</id>
				<content type="html"><![CDATA[<p>Earlier today, <a href="http://www.kryogenix.org">Stuart Langridge</a>—who I worked with on WaSP’s DOM Scripting Task Force and have the utmost respect for—<a href="http://www.kryogenix.org/days/2014/09/19/fundamentally-connected/">published a blog response</a> to <a href="http://aaron-gustafson.com/notebook/2014/a-fundamental-disconnect/">my last post</a>. In it, he made some good points I wanted to highlight, but he also misunderstood one thing I said and managed to avoid addressing the core of my argument. As comments aren’t enabled on his site, I thought I’d respond here.</p>

<!-- more -->


<p>Let’s start with the good stuff:</p>

<blockquote><p>Now, nobody is arguing that the web environment is occasionally challengingly different across browsers and devices. But a lot of it isn’t. No browser ships with a JavaScript implementation in which 1 and 1 add to make 3, or in which Arrays don’t have a length property, or in which the for keyword doesn’t exist. If we ignore some of the Mozilla-specific stuff which is becoming ES6 (things such as array comprehensions, which nobody is actually using in actual live code out there in the universe), JavaScript is pretty stable and pretty unchanging across all its implementations. Of course, what we’re really talking about here is the DOM model, not JavaScript-the-language, and to claim that “JavaScript can be the virtual machine” and then say “aha I didn’t mean the DOM” is sophistry on a par with a child asking “can I not not not not not have an ice-cream?”. But the DOM model is pretty stable too, let’s be honest. In things I build, certainly I find myself in murky depths occasionally with JavaScript across different browsers and devices, but those depths are as the sparkling waters of Lake Treviso by comparison with CSS across different browsers. In fact, when CSS proves problematic across browsers, JavaScript is the bandage used to fix it and provide a consistent experience — your keyframed CSS animation might be unreliable, but jQuery plugins work everywhere. JavaScript is the glue that binds the other bits together.</p></blockquote>

<p>To be honest, I could not agree more, nor could I put it more elegantly. JavaScript, as a language, is relatively stable in terms of its core API. Sure, there are some gaps that JavaScript libraries have always sought to even out, but by and large what works in one browser will work in another. Assuming, of course, JavaScript is available… but let’s come back to that.</p>

<p>In this passage Stuart also highlights the quagmire that is CSS support. This is a great point to hammer home: we have no assurance that the CSS we write will be understood by or interpreted the same in every browser. This is why it is so important that we provide fallbacks like a hex value for that RGBa color we want to use. It pays have a solid understanding of how fault tolerance works because it helps us author the most robust code and ultimately leads to fewer browser headaches (and happier users). I devoted a huge portion of the CSS chapter in <a href="http://adaptivewebdesign.info">my book</a> to the topic.</p>

<p>I also loved this passage:</p>

<blockquote><p>Web developers are actually better than non-web developers. And Aaron explains precisely why. It is because to build a great web app is precisely to build a thing which can be meaningfully experienced by people on any class of browser and device and capability. The absolute tip-top very best “native” app can only be enjoyed by those to whom it is native. “Native apps” are poetry: undeniably beautiful when done well, but useless if you don’t speak the language. A great web app, on the other hand, is a painting: beautiful to experience and available to everybody. The Web has trained its developers to attempt to build something that is fundamentally egalitarian, fundamentally available to everyone. That’s why the Web’s good. The old software model, of something which only works in one place, isn’t the baseline against which the Web should be judged; it’s something that’s been surpassed. Software development is easiest if it only has to work on your own machine, but that doesn’t mean that that’s all we should aim for. We’re all still collaboratively working out exactly how to build apps this way. Do we always succeed? No. But by any measure the Web is the largest, most widely deployed, most popular and most ubiquitous computing platform the world has ever known. And its programming language is JavaScript.</p></blockquote>

<p>I’ll admit I got a little teary-eyed when he said <q>The Web has trained its developers to attempt to build something that is fundamentally egalitarian, fundamentally available to everyone.</q>. Stuart is bang on with this passage. Building the Web requires more of us than traditionally software development. In many ways, it asks us to be our best selves.</p>

<p>The one thing I take issue with is that last sentence, but again, I’ll come back to it.</p>

<p>In the middle, his post got a little off-track. Most likely it was because I was not as clear in my post as I could have been:</p>

<blockquote><p>I am not at all sold that “we have knowledge of [the server environment] and can author your program accordingly so it will execute as anticipated” when doing server development. Or, at least, that’s possible, but nobody does. If you doubt this, I invite you to go file a bug on any server-side app you like and say “this thing doesn’t work right for me” and then add at the bottom “oh, and I’m running FreeBSD, not Ubuntu”. The response will occasionally be “oh really? we had better get that fixed then!” but is much more likely to be “we don’t support that. Use Ubuntu and this git repository.” Now, that’s a valid approach — we only support this specific known configuration! — but importantly, on the web Aaron sees requiring a specific browser/OS combination as an impractical impossibility and the wrong thing to do, whereas doing this on the server is positively virtuous. I believe that this is no virtue. Dismissing claims of failure with “well, you should be using the environment I demand” is just as large a sin on the server or the desktop as it is in the browser. You, the web developer, can’t require that I use your choice of browser, but equally you, the server developer, shouldn’t require that I use your particular exact combination of server packages either. Why do client users deserve more respect than server users? If a developer using your server software should be compelled to go and get a different server, how’s that different from asking someone to install a different web browser? Sure, I’m not expecting someone who built a server app running on Linux to necessarily also make it run on Windows (although wise developers will do so), but then I’m not really expecting someone who’s built a 3d game with WebGL to make the experience meaningful for someone browsing with Lynx, either.</p></blockquote>

<p>Here’s what he was reacting to:</p>

<blockquote><p>If we’re writing server-side software in Python or Rails or even PHP, one of two things is true:</p><ol><li>We control the server environment: operating system, language versions, packages, etc.; or</li><li>We don’t control the server environment, but we have knowledge of it and can author your program accordingly so it will execute as anticipated.</li></ol></blockquote>


<p>In this passage, I was talking about software we write for ourselves, our companies, and our clients. In those cases we do—or at least we <em>should</em>—know the environment our code is running in and can customize our code or the server build if a particular package or feature is missing. In fact, this is such a consistent need that we now have umpteen tools that empower us make recipes of server requirements so we can quickly build, configure, and deploy servers right from the command line. I would never write server-side code for a client running Windows without testing it on a carbon-copy of their Windows server. That would be reckless and unprofessional.</p>

<p>If, however, I was writing code to sell or license to third parties, I’d fall into the second camp I outlined:</p>

<blockquote><p>In the more traditional installed software world, we can similarly control the environment by placing certain restrictions on what operating systems our code can run on and what the dependencies for its use may be in terms of hard drive space and RAM required. We provide that information up front and users can choose to use our software or use a competing product based on what will work for them.</p></blockquote>

<p>Lots of people who offer software in this way provide an overview of hardware and software requirements for using their product, and that’s fine. But I feel Stuart was incorrectly lumping the two camps together. He asks “Why do client users deserve more respect than server users?” I agree with the sentiment—the lack of requirements documentation for some third party server utilities is certainly appalling—but if I choose to try installing a given utility or program without knowing if it will work on my system, that’s my choice. And, moreover, failing installs of server-side utilities is a concern that I—a technical-savvy software developer—can readily deal with (or at least that I am competent enough to solve with Google’s help). I don’t think we can expect the same of the people who read our content, check their bank balances on our systems, and whose experience and capabilities may not be the same as ours.</p>

<p>Stuart brings his response to a close with the gloriously uplifting statement—<q>[B]y any measure the Web is the largest, most widely deployed, most popular and most ubiquitous computing platform the world has ever known.</q>—before declaring, unequivocally, <q>[I]ts programming language is JavaScript.</q> That sounds great, but it’s not entirely true.</p>

<p>The first part is dead-on: the Web absolutely is <q>most popular and most ubiquitous computing platform the world has ever known</q>, but saying that the Web’s only programming language is JavaScript is a bit disingenuous. Yes, JavaScript is the de-facto programming language in the browser, but that’s only half of the equation: PHP, Perl, C++, Ruby, Java, Python… these (and many others) are the languages that drive the vast majority of the server-side processing that makes the dynamic Web possible. (Yes, JavaScript has made it onto the server side of things, but I don’t think that was what he was trying to say. Stuart, please correct me if I’m wrong.) These languages provide a fallback when JavaScript fails us. We need them.</p>

<p>The fact is that you can’t build a robust Web experience that relies solely on client-side JavaScript. And that’s what disappointed me about Stuart’s post: he completely avoided addressing this, the main thrust of my argument. While JavaScript may technically be available and consistently-implemented across most devices used to access our sites nowadays, we do not control how, when, or even if that JavaScript is ultimately executed. That’s the disconnect.</p>

<p>Any number of factors can bring our carefully-crafted JavaScript application to its knees. I mentioned a few in my post, but I’ll reiterate them here, along with a few others:</p>

<ol>
<li><strong>Bugs</strong>: None of us write buggy code, of course, but even if we did, we have numerous safeguards that would prohibit that buggy code from making it into production. <a href="http://blogs.wsj.com/digits/2011/02/07/gawker-outage-causing-twitter-stir/">Right? Right!?</a> But what about third-party code? I have gotten a buggy version of jQuery from the Google Ajax CDN before. And I’ve certainly come across buggy jQuery plugins. And what about the JavaScript being injected by other third party services? Advertising networks… social widgets… we test all of that code too, right? Any errors or conflicts in JavaScript code can cause all JavaScript execution to stop.</li>
<li><strong>Browser Add-ons</strong>: We can’t control which add-ons or plugins our users have installed on their browser, but each and every one has the ability to manipulate the DOM, insert CSS, and inject scripts. If we don’t code defensively, we can spend hours trying to replicate a bug report only to ultimately discover the person reporting it had an add-on installed that was causing the issue. I’ve been there. It sucks.</li>
<li><strong>Man-in-the-Middle Attacks</strong>: Back in the olden days, we used to have to worry about JavaScript being blocked at the firewall as a security threat. That issue has largely gone away, but we still run into similar issues today: Sky accidentally blocked jQuery for all of their UK subscribers when they <a href="http://www.theguardian.com/technology/2014/jan/28/sky-broadband-blocks-jquery-web-critical-plugin">mistakenly flagged the hosted version of jQuery as malware and filtered it out</a>. And routers are capable of injecting code that can break our pages too: <a href="http://aaron-gustafson.com/notebook/2014/the-network-effect/">I wrote about Comcast doing it the other day</a> and then experienced a similar issue with the Atlanta airport’s free Wi-Fi while on my way home from BlendConf. Sadly, unless we send everything via SSL, we can’t even control what code ultimately gets delivered to our users.</li>
<li><strong>Underpowered Hardware</strong>: Some devices just don’t have the RAM to store or processing power to execute large JavaScript frameworks. If we’re using one, we could be dead in the water. Oh, and iOS sandboxes in-app browsers and <a href="http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/">they run really slowly</a> compared to the native Safari browser (which is already pretty slow compared to desktop browsers). If someone opens a link to our site in the Twitter app or if we are using a native app wrapper around our Web experience, the whole thing may… just… crawl.</li>
<li><strong>Still Loading</strong>: While our JavaScript is being downloaded, processed, and executed, it’s not running. So, if JavaScript is a requirement for any interaction, the site could appear frozen until the browser finishes dealing with it.</li>
</ol>


<p>All of this adds up to JavaScript being the biggest potential single point of failure in our Web experience.</p>

<p>Again, it’s not that JavaScript is a bad thing; I love JavaScript and write it every day—some days it’s all I do. But when we write JavaScript, its critical that we recognize that we can’t be guaranteed it will run. We need a backup plan and that’s what progressive enhancement asks of us. If we do that, our bases are covered and we can sleep soundly knowing that our users are happy because they can do what they need to do, no matter what.</p>

<p>And I, for one, enjoy sleeping.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[A Fundamental Disconnect]]></title>
				<link href="http://aaron-gustafson.com/notebook/a-fundamental-disconnect/"/>
				<updated>2014-09-13T15:01:58-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/a-fundamental-disconnect</id>
				<content type="html"><![CDATA[<p>Yesterday at <a href="//2014.blendconf.com/">BlendConf</a>, <a href="//www.hanselman.com/">Scott Hanselman</a> gave a fantastically-entertaining keynote entitled “JavaScript, The Cloud, and the rise of the New Virtual Machine.” In it, he chronicled all of the ways Web development and deployment has changed—for the better—over the years. He also boldly declared that JavaScript is now, effectively, a virtual machine in the browser.</p>

<!-- more -->


<p>This is a topic that has been weighing on my mind for quite some time now. I’ll start by saying that I’m a big fan of JavaScript. I write a lot of it and I find it incredibly useful, both as a programming language and as a way to improve the usability and accessibility of content on the Web. That said, I know its limitations. But I’ll get to that in a minute.</p>

<p>In the early days of the Web, “proper” software developers shied away from JavaScript. Many viewed it as a “toy” language (and felt similarly about HTML and CSS). It wasn’t as powerful as Java or Perl or C in their minds, so it wasn’t really worth learning. In the intervening years, however, JavaScript has changed a lot.</p>

<p>Most of these developers first began taking JavaScript seriously in the mid ’00s when Ajax became popular. And with the rise of JavaScript MVC frameworks and their ilk—Angular, Ember, etc.—many of these developers made their way onto the Web. I would argue that this, overall, is a good thing: We need more people working on the Web to make it better.</p>

<p>The one problem I’ve seen, however, is the fundamental disconnect many of these developers seem to have with the way deploying code on the Web works. In traditional software development, we have some say in the execution environment. On the Web, we don’t.</p>

<p>I’ll explain.</p>

<p>If we’re writing server-side software in Python or Rails or even PHP, one of two things is true:</p>

<ol>
<li>We control the server environment: operating system, language versions, packages, etc.; or</li>
<li>We don’t control the server environment, but we have knowledge of it and can author your program accordingly so it will execute as anticipated.</li>
</ol>


<p>In the more traditional installed software world, we can similarly control the environment by placing certain restrictions on what operating systems our code can run on and what the dependencies for its use may be in terms of hard drive space and RAM required. We provide that information up front and users can choose to use our software or use a competing product based on what will work for them.</p>

<p>On the Web, however, all bets are off. The Web is ubiquitous. The Web is messy. And, as much as we might like to control a user’s experience down to the very pixel, those of us who have been working on the Web for a while understand that it’s a fool’s errand and <a href="//dowebsitesneedtolookexactlythesameineverybrowser.com/">have adjusted our expectations accordingly</a>. Unfortunately, this new crop of Web developers doesn’t seem to have gotten that memo.</p>

<p>We do not control the environment executing our JavaScript code, interpreting our HTML, or applying our CSS. Our users control the device (and, thereby, its processor speed, RAM, etc.). Our users choose the operating system. Our users pick the browser and which version they use. Our users can decide which add-ons they put in the browser. Our users can shrink or enlarge the fonts used to display our Web pages and apps. And the Internet providers that sit between us and our users, dictating the network speed, latency, and ultimately <a href="//aaron-gustafson.com/notebook/2014/the-network-effect/">controlling how—and what part of—our content makes it to our users</a>.</p>

<p>All we can do is author a compelling, adaptive experience, cross our fingers, and hope for the best.</p>

<p>The fundamental problem with viewing JavaScript as the new VM is that it creates the illusion of control. Sure, if we are building an internal Web app, we might be able to dictate the OS/browser combination for all of our users and lock down their machines to prevent them from modifying those settings, but that’s not the reality on the open Web.</p>

<p>The fact is that we can’t absolutely rely on the availability of any specific technology when it comes to delivering a Web experience. Instead, we must look at <em>how</em> we construct that experience and make smarter decisions about how we use specific technologies in order to take advantage of their benefits while simultaneously understanding that their availability is not guaranteed. This is why progressive enhancement is such a useful philosophy.</p>

<p>The history of the Web is littered with JavaScript disaster stories. That doesn’t mean we shouldn’t use JavaScript or that it’s inherently bad. It simply means we need to be smarter about our approach to JavaScript and build robust experiences that allow users to do what they need to do quickly and easily even if our carefully-crafted, incredibly well-designed JavaScript-driven interface won’t run.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Network Effect]]></title>
				<link href="http://aaron-gustafson.com/notebook/the-network-effect/"/>
				<updated>2014-09-08T16:40:44-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/the-network-effect</id>
				<content type="html"><![CDATA[<p><cite>Ars Technica</cite> revealed today that <a href="http://arstechnica.com/tech-policy/2014/09/why-comcasts-javascript-ad-injections-threaten-security-net-neutrality/">Comcast is injecting self-promotional advertising into web pages delivered via it’s Wi-Fi hotspots</a>:</p>

<blockquote cite="http://arstechnica.com/tech-policy/2014/09/why-comcasts-javascript-ad-injections-threaten-security-net-neutrality/">
    <p>A Comcast spokesman told Ars the program began months ago. One facet of it is designed to alert consumers that they are connected to Comcast&#8217;s Xfinity service. Other ads remind Web surfers to download Xfinity apps, Comcast spokesman Charlie Douglas told Ars in telephone interviews.</p>
</blockquote>


<p>I wish I could say this is surprising, but it’s not: Any service that routes your content has the opportunity to modify the response being returned. Comcast is exploiting that opportunity and injecting JavaScript that, in turn, injects the ads.</p>

<!-- more -->


<p>The fact that middlemen can manipulate server responses is one reason <a href="https://www.youtube.com/watch?v=cBhZ6S0PFCY">Google is pushing for all sites to be served under HTTPS</a>. With traffic running to and from your server in an encrypted fashion, <a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle attacks</a>—which, if we’re honest, is what this amounts to—become much more difficult.</p>

<p>Assuming you can’t run under HTTPS for one reason or another, how do you harden your <a href="https://adactio.com/journal/6246">web thang</a> against 3rd party manipulation you can’t control? What if Comcast’s JavaScript interferes with your own? Remember when <a href="http://www.theguardian.com/technology/2014/jan/28/sky-broadband-blocks-jquery-web-critical-plugin">Sky blocked jQuery for all of their customers</a>? That was a bad couple of hours for most UK-based internet users.</p>

<p>Comcast’s move only serves to remind us—yet again—that we don’t control how our sites are delivered or what our users see. Or rather we do, but only up to a point. So rather than focus on some ideal experience we expect everyone to have, we must focus on building great experiences that work in a variety of contexts and situations.</p>

<p>We need to develop <a href="http://en.wikipedia.org/wiki/Demolition_derby#Vehicles">the 1964 Chrysler Imperial</a> of websites: Sites that soldier on even when they are getting pummeled from all sides. After all, browsers, plug-ins, users, networks, and, yes, even the very routers that deliver our connections all have a say in how (and what) content gets to our users.</p>

<p>I’ll leave you with this scary quote from the <cite>Ars</cite> piece:</p>

<blockquote cite="http://arstechnica.com/tech-policy/2014/09/why-comcasts-javascript-ad-injections-threaten-security-net-neutrality/">
    <p>Security expert Dan Kaminsky said in an e-mail that JavaScript injection has the potential to break “all sorts of stuff, in that you no longer know as a website developer precisely what code is running in browsers out there. You didn&#8217;t send it, but your customers received it.”</p>
</blockquote>


<p>Hooray!</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Fixed and Inflexible]]></title>
				<link href="http://blog.cloudfour.com/fixed-and-inflexible/"/>
				<updated>2014-07-25T19:06:07-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/fixed-and-inflexible</id>
				<content type="html"><![CDATA[<blockquote><p>Our screens act like windows to content of variable size and scale, demanding an awful lot of abstract thinking to design for. Sometimes we’re successful, revising content, designing modern day deliverables and embracing compromise like we know in our hearts we should. Other times…</p></blockquote>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The “Native” vs. “Stylable” Tug of War]]></title>
				<link href="http://aaron-gustafson.com/notebook/native-vs-stylable-tug-of-war/"/>
				<updated>2014-07-17T08:21:47-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/native-vs-stylable-tug-of-war</id>
				<content type="html"><![CDATA[<p>In his astute post <a href="//www.brucelawson.co.uk/2014/native-experience-vs-styling-select-boxes/">“‘Native experience’ vs styling select boxes”</a>, Bruce Lawson correctly identified a common tension in the web world:</p>

<blockquote><p>But why this urge to re-style page elements that end-users are familiar with? … Or is it that we love native look and feel, except when we don’t?</p></blockquote>

<p>Speaking as the guy who not only wrote JavaScript to help me create an accessible <code>select</code> element alternative, but who also made it <a href="http://d1b14unh5d6w7g.cloudfront.net/1590598563.01.S0ER.LXXXXXXX.jpg?Expires=1405686346&amp;Signature=DCT4Z0l75JQESDNyP0PVGVonuJYwY9XYtaTI3grX/RhdlLcXGRAVADJCB/N/fAj7GxLhEVzuXqstMebJIJ9Ip5I6kE7IKYt2F20F5EGD+1ghua9zKwyjS1e4KBgumMKzQytbcfIVX4dMr7XFzj26mScFKz9bSKtZT5jU1LU6hWM=&amp;Key-Pair-Id=APKAIUO27P366FGALUMQ">the focus of a case study (image)</a> in <a href="http://amzn.to/TaoffD">AdvancED DOM Scripting</a>, I am fully aware of the desire to have it both ways. I have not often seen the desire for both in a single individual, but it does happen in one particular instance occasionally.</p>

<!-- more -->


<p>Based on my own experience, I see the following arguments in favor of changing the display of a native control quite often:</p>

<ol>
<li>It doesn’t look good to me.</li>
<li>It is not “on brand”.</li>
<li>It clashes with our brand’s color scheme.</li>
<li>We want the web experience to feel like a native app.</li>
<li>It doesn’t behave how we think it should.</li>
</ol>


<p><em>(<abbr lang="it" title="nota bene: please note">n.b.</abbr> Browsers have done a pretty good job reducing the amount of color and the overall visual strength used in native controls to help them better blend in with a wide variety of designs, so clashes as mentioned in #3 happen far less often than they did nearly a decade ago.)</em></p>

<p>As the weathered, battle tested (and, admittedly, somewhat jaded) front-end dev that I am, I typically push back with one or more of the following:</p>

<h2>In Addressing Desired Design Changes</h2>

<p>In terms of aesthetics (addressing arguments 1, 2, and 3), I understand where you’re coming from. Native controls are not the most appealing things, but they are familiar to your users. A <code>select</code> box they see on your site that looks like the one they see on Wikipedia or their banking site will be immediately recognizable. Sure, the looks and feel may differ from browser to browser, but most people use only a small number of browsers throughout the day—at work, at home, on their device—and if you want to ensure the design of a form control feels “right” in the browser they are using, sometimes it’s best to let go of that control.</p>

<h2>In Addressing OS Parity</h2>

<p>I can understand the desire to have a form control in a web page look and feel like the same (or a similar) control within the native operating system (argument 4), but I am not sure that’s a rabbit hole you want to go down. Here’s why: Achieving exact design and functional parity between a native control and a web control quite often requires extra markup, a bunch of CSS, and a bit of JavaScript. Anything is achievable with unlimited time and budget, so it’s completely doable, but it would be good to estimate the cost to see if you still think it is a worthwhile endeavor.</p>

<p>Assuming it is, we then have the question of which operating system to model the control after. Or maybe you want to offer a different take on the control based on the operating system your user is using. In that case, we may need to multiply the original estimate by the number of operating systems you want to support. But it’s worth noting that, in the Android world, different device manufacturers often “skin” the operating system to look different from other ones. Sometimes they even do it on a device-by-device basis. We’ll need to figure out which ones you want to include in your native control matrix and multiply the estimate accordingly.</p>

<p>Then there’s maintenance. We’ll need to test these native-like controls on each of their corresponding platforms and test the script that determines which experience gets delivered to which device to make sure we’re not accidentally sending the wrong experience. We’ll also need to test the delivery script on every other browser in our test matrix to ensure it is not causing issues there.</p>

<p>What should we do when a new operating system version is rolled out? iOS, for example, has made radical shifts in the design of their native controls in each major release. We’ll probably want to create unique versions of the control for each version of each OS we support and we’ll need to keep tabs on upgrades so we don’t end up confusing our users if they visit our site in iOS 7 and have a control that looks like it’s from iOS 6. We’ll need to add the number of OS versions into the multiplier as well.</p>

<p>Ok, and finally: How many controls did you want to apply this approach to again?</p>

<p>Or we could use the native form control and it will just work.</p>

<h2>In Addressing Altered Behavior</h2>

<p>I completely agree that not all native controls work exactly how I would like, but there are several risks in changing the expected behavior of a native control.</p>

<p>First of all, there’s the possibility we could actually end up making the interface more confusing or that the change in behavior might not be exactly what our user’s wanted (either based on what they are used to or our mental model not aligning with theirs). In order to rule out these issues, we should run a few rounds of usability tests. These could be quick café tests or more formal studies depending on the budget.</p>

<p>Assuming our tests go well, we will need to maintain this code and do all of the requisite browser testing. And potentially upgrade our code as new browsers and browser versions come out. Depending on the complexity of the code, this could become a large requirement, but if it is ultimately in the service of making the web a better, more usable interaction environment, it could be worth it.</p>

<p>For what it’s worth, if we go this route and are successful, we should consider getting involved in the spec-writing process at the <a href="//w3.org">W3C</a> or  <a href="//whatwg.org">WhatWG</a>. We should contribute our recommended changes back to the community and share what we learned. If we make a compelling argument, perhaps our idea will become part of some future standard and we can taper off our browser testing when the change goes native.</p>

<hr>


<p>As you can probably tell, I’m not a really big fan of changing existing controls as I feel it can amount to a wasted effort. That said, if there are design improvements to be made—“design” in the true sense: being about how usable something is, not just how aesthetically-pleasing it is to someone (e.g. improving contrast, making the control more intuitive, etc.)—I’m willing to accept the change as something we <em>should</em> do and then work to make sure that change has been vetted and, if successful, given away for inclusion in other projects. If it solves a major issue on the web, I want to give that change every opportunity to make it into the appropriate spec by talking to the appropriate folks about it both in-person, in blog posts, and on the appropriate mailing list. If the change solves a problem in a specific browser, I want to see it incorporated into said browser and will file a bug report and try to build momentum around it by engaging the community.</p>

<p>Anyway, that’s my general position on augmenting native controls. What are your thoughts on the topic?</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Searching for the “Right Size”]]></title>
				<link href="http://aaron-gustafson.com/notebook/searching-for-the-right-size/"/>
				<updated>2014-07-10T20:38:16-04:00</updated>
				<id>http://aaron-gustafson.com/notebook/searching-for-the-right-size</id>
				<content type="html"><![CDATA[<p>This <a href="http://www.wired.com/2014/07/what-a-stalling-tablet-market-says-about-our-search-for-the-perfect-screen/">recent piece from <cite>Wired</cite></a> attributes dwindling tablet sales to cannibalization from larger mobile phones (<abbr title="also known as">aka</abbr> “phablets”) which are nearly as big as 7-8˝ tablets:</p>

<blockquote><p>Aside from the ability to make a phone call, the difference between a phone and a tablet comes down to 1.5 inches or less. … But the real issue is device makers are running out of good arguments for why these ever more subtle size gradations matter. After a point, the differences come down to personal preference rather than any meaningful new use case. As phones and tablets converge into this tight window, slightly bigger phones could accelerate the decline in tablet demand.</p></blockquote>

<p>Personally, I’m not sure it matters. We’re in the midst of one big experiment being run by the device manufacturers. We’re in the scattershot. The industry is feeling out the &ldquo;right&rdquo; screen size (or sizes) that most people want to use and we are (in large part) footing the bill.</p>
]]></content>
			</entry>
		
	
</feed>
