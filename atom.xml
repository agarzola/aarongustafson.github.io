<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Aaron Gustafson]]> Latest Posts &amp; Links</title>
	<link href="http://www.aaron-gustafson.com/atom.xml" rel="self"/>
	<link href="http://www.aaron-gustafson.com/"/>
	<updated>2015-06-09T10:47:06-05:00</updated>
	<id>http://www.aaron-gustafson.com/</id>
	<author>
		<name><![CDATA[Aaron Gustafson]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
		
			<entry>
				<title type="html"><![CDATA[Introducing Srcset, Our First Step Towards Fully Responsive Images in Microsoft Edge]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/introducing-srcset-responsive-images-in-microsoft-edge/"/>
				<updated>2015-06-09T10:37:29-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/introducing-srcset-responsive-images-in-microsoft-edge</id>
				<content type="html"><![CDATA[<p>Greg Whitworth shares the status of secretes in Microsoft Edge along with what’s coming (and a request that you update Picturefill if you’re using it).</p>
<p><a rel="full-article" href="http://blogs.windows.com/msedgedev/2015/06/08/introducing-srcset-responsive-images-in-microsoft-edge/">Read on Microsoft Edge Dev Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Web Is Fast by Default, Let’s Keep It Fast]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/2015-05-18-the-web-is-fast-by-default-lets-keep-it-fast/"/>
				<updated>2015-06-05T12:28:43-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/2015-05-18-the-web-is-fast-by-default-lets-keep-it-fast</id>
				<content type="html"><![CDATA[<p>Brilliant post on progressive enhancement for performance. Well worth a read.</p>
<p><a rel="full-article" href="https://hiddedevries.nl/en/blog/2015-05-18-the-web-is-fast-by-default-lets-keep-it-fast">Read on Hidde de Vries’ Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Web Is Not Poor Man’s Native]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/the-web-is-not-poor-mans-native/"/>
				<updated>2015-06-05T12:17:22-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/the-web-is-not-poor-mans-native</id>
				<content type="html"><![CDATA[<p><a href="http://cwilso.com/">Chris Wilson</a> is dead-on with this post. The web isn’t native, but it can do native-like things really well and with less friction for our users.</p>

<blockquote><p>The web… excels at just-in-time interaction, as it IS hassle-free. But it’s a natural progression to enable users to move that onto their home screen, and let them get notifications and other engagement features if they so desire. This is still the web, though – I don’t need to have the NYT app open just to read the article at a link I followed. There are also app-like behaviors you may want occasionally too, e.g. a “what’s near me?” app. There’s an assumption that app-like behaviors demand native, and that the web is for documents.</p></blockquote>
<p><a rel="full-article" href="http://cwilso.com/2015/05/29/the-web-is-not-poor-mans-native/">Read on In Progress&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Making Accessible Futures]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/making-accessible-futures/"/>
				<updated>2015-06-05T09:29:52-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/making-accessible-futures</id>
				<content type="html"><![CDATA[<p>Sounds like this was an awesome workshop!</p>

<blockquote><p>George Williams, one of the workshop organizers and author of the chapter “<a href="http://dhdebates.gc.cuny.edu/debates/text/44">Disability, Universal Design, and the Digital Humanities” in Debates in the Digital Humanities</a> (2012), offered the example of the curb cut, which, as he says in his chapter, was designed to facilitate wheelchair users crossing the street, but “became recognized as useful also to other people such as someone making a delivery with a dolly, a traveler pulling luggage on wheels, a parent pushing a child in a stroller, or a person walking beside their bicycle.” Williams urged us to recognize the broad benefits of accessible design, while also raising questions about the “universal” in universal design.</p></blockquote>

<p>I’ve said it before and I’ll say it again: Everyone has special needs and not all of them revolve around disabilities.</p>

<p>There will be another <a href="http://www.accessiblefuture.org/">Accessible Futures</a> workshop this Fall. If you have the opportunity, you should go.</p>
<p><a rel="full-article" href="http://jitp.commons.gc.cuny.edu/making-accessible-futures/">Read on The Journal of Interactive Technology and Pedagogy&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[It Also Checks its JavaScript]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/it-also-checks-its-javascript/"/>
				<updated>2015-06-05T09:26:25-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/it-also-checks-its-javascript</id>
				<content type="html"><![CDATA[<p>Stuart Langridge has been writing smart JavaScript for the last 18 years. We should all be that pragmatic.</p>
<p><a rel="full-article" href="http://www.kryogenix.org/days/2015/06/01/it-also-checks-its-javascript/">Read on As Days Pass By&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Bringing Sanity and Order to Device Testing]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/bringing-sanity-and-order-to-device-testing/"/>
				<updated>2015-06-05T08:56:03-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/bringing-sanity-and-order-to-device-testing</id>
				<content type="html"><![CDATA[<p>It seems like every other day the public is granted some new means of accessing the web. Some days it’s <a href="http://www.engadget.com/2015/04/29/microsoft-edge/">a new browser</a>. Others it’s <a href="http://www.pcadvisor.co.uk/reviews/mobile-phone/3504276/yotaphone-2-review-uk-dual-screen-smartphone/">a new smartphone</a>. Or <a href="http://www.engadget.com/products/microsoft/surface/3/">a tablet</a>. Or <a href="http://the-digital-reader.com/2014/10/22/voyage-vs-paperwhite-comparison-review-web-browser/">an e-reader</a>. Or <a href="https://www.nintendo.com/3ds/internetbrowser/specs/">a video game console</a>. Or <a href="http://www.phonearena.com/news/Surf-the-Internet-from-your-Android-Wear-smartwatch-Now-possible-via-this-new-app_id58580">a smartwatch</a>. Or <a href="https://html5test.com/compare/browser/samsungsmarttv-2013.html">a TV</a>. Or <a href="http://www.techradar.com/us/reviews/wearables/microsoft-hololens-1281834/review">a heads-up display</a>. Or <a href="http://www.popularmechanics.com/cars/a13191/the-future-of-car-connectivity-is-a-real-web-browser-in-the-dash-17416796/">a car</a>. Or <a href="http://www.lgblog.lt/2009/10/28/zvilgsnis-atgal-pirmasis-pasaulyje-saldytuvas-su-internetu-lg-internet-digital-dios/">a refrigerator</a>.</p>

<!-- more -->


<p>I worked on one project where the client provided me with a spreadsheet detailing 1,400 different user agents that accessed the login screen for the m-dot site. In two days!</p>

<p>As further evidence, consider <a href="http://blog.jasonsamuels.net/post/21633531278/analytics-confirm-the-need-for-adaptive-web-design">the enlightening details of this post from Jason Samuels</a> of the National Council on Family relations, a non-profit organization:</p>

<ul>
<li>In 2008, Internet Explorer dominated as the browser for 93.5% of their visitors. By 2014, that percentage had fallen to 19.7%, with Chrome bringing in the lion’s share of the traffic (37%). Firefox narrowly beat out IE with a 20% share of users.</li>
<li>In 2008, visits from &ldquo;mobile&rdquo; devices accounted for only about 0.1% of their traffic. In 2014, that number had skyrocketed to 14.4%.</li>
<li>In 2008, they detected 71 different screen resolutions, which is already a lot to consider. By 2014, however, they were seeing 1,000 unique screen resolutions each and every quarter (with over 200 of those recording 10+ visits per quarter).</li>
</ul>


<p>That last stat blows my mind every time I read it. You can’t design for 200 different screens, let alone 1,000. It’s a fools errand. And don’t even think of trying to test on that many devices.</p>

<p>And yet, here we are designing websites that can (and will) go anywhere. We need to thoroughly test because we can’t make any assumptions about the browsers and devices being used to access our content.</p>

<p>Testing can be tedious, time consuming, and costly. Surely there’s a way to make it easier. There sure is: Instead of getting hung up on creating one experience that needs to be nearly identical on every browser, we can be smarter about how we build things and treat experience as a continuum.</p>

<p>We can build websites that are both nimble enough to work on low powered devices over slow networks <em>and</em> smart enough to take advantage of advanced features and sensors when opportunity knocks.</p>

<p><em>Wha?! We can have our cake and eat it too</em>? Yes. Yes we can.</p>

<h2>Start on Solid Footing</h2>

<p>When dealing with the insane proliferation of web-enabled devices and the great unknown of where our websites will go, it pays to take a step back and focus on what’s important. We need to ask ourselves two simple questions:</p>

<ol>
<li>What is the purpose of this page, this form, this interface?</li>
<li>What is the simplest way to realize that purpose?</li>
</ol>


<p>Then we need to build that <em>first</em>. Typically we’re talking text, some basic HTML, actual links to other pages, and forms that submit to a back-end of some sort. This is our minimum viable product and it will work anywhere.</p>

<p>Then we can look for opportunities to enhance the experience, all while keeping that functional core at the center of the experience.</p>

<p>We can use CSS to add visual hierarchy to the page, provide some visual interest, and adjust the layout to create a good reading experience on a wide range of screen sizes. We should start from the narrowest screen size we can imagine and <a href="https://twitter.com/brad_frost/status/191977076000161793">let the content guide our breakpoint decisions</a>.</p>

<p>We’ll use JavaScript to give real-time feedback to our users. <a href="http://domscripting.com/presentations/xtech2006/">We’ll hijack forms and links</a> to <a href="http://www.filamentgroup.com/lab/ajax-includes-modular-content.html">lazy load additional content</a> or otherwise avoid full-page refreshes. Heck, we can even take over the entire page and <a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/">convert it into a single page app</a>.</p>

<p>But we should never sacrifice the functional core.</p>

<p>This approach to designing for the web is called <a href="http://alistapart.com/article/understandingprogressiveenhancement">progressive enhancement</a> and it’s the number one tool for dealing with the one-two punch of older browsers and device proliferation.</p>

<h2>Be Conservative in Your Delivery</h2>

<p>What makes progressive enhancement so helpful when it comes to dealing with this swirling mass of devices and browsers is that the core experience will <em>always be</em> available. There is nothing precluding our users from accessing it, even on a crappy WAP browser or a text-based browser like Lynx or even some <a href="http://www.theubi.com/">no so far-future talking computer</a> that only &ldquo;sees&rdquo; the web as text.</p>

<p>In order to ensure we don’t accidentally deliver advanced features to less capable browsers like these, we just need to be smart about how we load stuff like CSS and JavaScript.</p>

<p>Some basic CSS—think typography, color, etc.—will be usable by just about anyone, so we can put all that stuff in one CSS file (e.g., <code>basic.css</code>) and include it with a standard <code>link</code>. Then we can tuck all of our layout rules and other advanced CSS into a separate CSS file (e.g., <code>advanced.css</code>) that we link to with an associated media query.</p>

<div><script src='https://gist.github.com/166b285a4fe3d854b97b.js?file=css-linking.html'></script>
<noscript><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;default.css&quot; media=&quot;all&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;advanced.css&quot; media=&quot;only screen&quot;&gt;</code></pre></noscript></div>


<p>Any <a href="http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu/106">browsers that don’t understand media queries will ignore the second CSS file entirely</a> and receive only the linear, mobile view. Easy peasy, and IE8 gets the mobile layout (a baseline level of support that is not likely to cause you any testing headaches).</p>

<p>You can even take things a step further and use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports">the <code>@supports</code> block</a> within <code>advanced.css</code> to limit certain rule sets to only the browsers that support specific CSS features.</p>

<p>Of course, CSS support issues are nothing compared to JavaScript, so sometimes it’s best not to deliver certain bits of JavaScript-based functionality to browsers that can’t handle it. This is where <a href="http://www.quirksmode.org/js/support.html">feature (and object) detection</a> becomes incredibly useful:</p>

<div><script src='https://gist.github.com/166b285a4fe3d854b97b.js?file=feature-test.js'></script>
<noscript><pre><code>if ( &#39;querySelector&#39; in document ) {
    // We can use querySelector!
}</code></pre></noscript></div>


<p>You can also use <a href="http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment">inverted conditional comments</a> to prohibit older versions of IE from getting JavaScript in the first place (which means you don’t even need to worry about debugging JavaScript there). Here’s an example that hides <code>main.js</code> from IE8 and below, but makes it available to IE9 on up and to every other non-IE browser.</p>

<div><script src='https://gist.github.com/166b285a4fe3d854b97b.js?file=no-script-in-lte-ie8.html'></script>
<noscript><pre><code>&lt;!--[if gt IE 8]&gt;&lt;!--&gt;
    &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;
&lt;!--&lt;![endif]--&gt;</code></pre></noscript></div>


<p>By being conservative in what we deliver to browsers we <a href="http://bradfrost.com/blog/mobile/support-vs-optimization/">ensure the greatest level of support, but can still optimize for more advanced ones</a>. This makes testing so much easier because we know older browsers will be okay with the basics and we aren’t trying to use JavaScript features unless we know they’re available.</p>

<h2>Test, Test, Test</h2>

<p>Progressive enhancement helps us avoid a lot of rendering and scripting issues before we even get to the testing phase of a project, but eventually we do need to sit down and run our projects through their paces.</p>

<p>In order to keep testing manageable during development, it’s best to test in one browser we know to have good web standards support. It will provide a basic gut-check for our work. Once we are pretty confident things are working as they should be, we can begin more thorough testing on a variety of browsers and devices.</p>

<p>I personally keep several versions of each major browser on my laptop at any given time. I work on a Mac, so I typically have a few versions of Chrome, Firefox, and Opera lying around. You can get older versions of these browsers here:</p>

<ul>
<li><a href="http://commondatastorage.googleapis.com/chromium-browser-continuous/index.html">Chromium Archive</a></li>
<li><a href="http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/">Firefox Archive</a></li>
<li><a href="http://www.opera.com/download//?custom=yes">Opera Archive</a></li>
</ul>


<p>It’s near-impossible to get older versions of Safari running on modern versions of OS X, so I typically just have the latest version locally.</p>

<p>For testing on Windows versions of said browsers, I typically have anywhere from 3-5 virtual machines running various Windows versions with their associated browser version and (typically) a copy of Chrome, Firefox, and Opera for good measure. The MS Edge Dev site offers <a href="http://dev.modern.ie/tools/vms/">free Windows VMs for download</a>. If you’re just looking to get a gut-check in the latest and greatest from Microsoft, there’s also <a href="https://remote.modern.ie/">the Remote.IE service</a>, which allows you to connect to a virtualized version of the browser.</p>

<p>If you develop on Windows or Linux, you’ll need access to a Mac or you’ll have to rely on virtualization to test on that platform. I’ll discuss virtualization in a moment.</p>

<p>Once you’ve thoroughly tested in the various desktop browsers, it’s time to take the deep dive into the world of devices. If you’re unsure where to begin, take a look at your analytics, but take them with a grain of salt. Analytics can lead you to make false assumptions. For example, if you see a low percentage of Blackberry users, could that be because your site just doesn’t work well in Blackberry so they don’t stick around (or come back)? Beware the self-fulfilling prophecy.</p>

<p>If you have the budget, by all means pick up some devices to have on hand for testing. You can use tools like <a href="https://creative.adobe.com/products/inspect">Adobe’s Edge Inspect</a>, <a href="http://vanamco.com/ghostlab/">Vanamco’s Ghostlab</a>, or <a href="https://github.com/viljamis/Remote-Preview">Viljami Salminen’s Remote Preview</a> (or a combination of all of the above) to synchronize browsing on a handful of devices. Some of these tools also allow for remote inspection of the device to debug CSS and JavaScript. <a href="http://people.apache.org/~pmuellr/weinre-docs/latest/">Weinre</a> (which Adobe Edge Inspect uses) and <a href="http://vorlonjs.com/">Vorlon.js</a> also provide remote inspection functionality.</p>

<p>If you are lucky enough to have one nearby, you should stop by your local <a href="http://opendevicelab.com/">open device lab (ODL)</a> to run your tests. ODLs are free community resources, typically offered by a web design studio or an individual who happens to be sitting on a ton of devices. Someone at the ODL should be able to help you pick out devices to test on and introduce you to the testing tools they have available in the lab.</p>

<p>If you don’t have an ODL nearby, you can also do some guerrilla-style testing in your local mobile phone or electronics store. Just make sure they have real devices… you won’t get far on the fake plastic ones.</p>

<p>If none of these are options for you, there’s always virtualization. You can download and install <a href="http://www.mobilexweb.com/emulators">emulators for a variety of mobile browsers and devices</a>. Additionally, services like <a href="https://www.browserstack.com/">Browserstack</a> and <a href="http://crossbrowsertesting.com/">CrossBrowserTesting</a> offer access to hundreds of virtual desktops and devices for a nominal fee.</p>

<p>Virtualization will never give you the same experience as holding a real device in your hand. The performance is rarely the same and you don’t get any sort of feel for how the device responds to your input. I once stumbled on an Android 2.3 bug wherein generated content was being re-generated and re-inserted every time the device was rotated. I doubt I would have discovered that using an emulator. That said, emulators can help you get a rough idea of whether your interface works or not.</p>

<p>Regardless of the means by which you procure your testing devices, try to cover a good cross-section. Pick some low-end ones, a couple older high-end devices, and handful of the latest flagships, and a wide variety of screen sizes and resolutions. Make sure you have good coverage in terms of operating systems too—the latest iOS and Android versions are a given, but make sure you have a Windows device or two, a few Blackberry options, and some older Android and iOS versions in the mix. Then throw in <a href="http://www.geekwire.com/2013/microsoft-kin-resurfaces-25-daily-deals-site/">an oddball</a> <a href="http://www.windowscentral.com/have-39-spare-then-pick-odd-sylvania-7-netbook-windows-ce">or two</a> to see if your interfaces hold up.</p>

<p>It’s important to bear in mind that we will never be able to give each user on each device exactly the same experience. We need to be okay with that—experience is a continuum. As long as our users can accomplish what they need to on our sites, they will be well-served.</p>

<h2>Bonus Points: Embrace Patterns</h2>

<p>If we really want to make things easy on ourselves (and our team), we should consider building a <a href="http://alistapart.com/blog/post/getting-started-with-pattern-libraries">pattern library</a> before we build a single page of our website.</p>

<p>Breaking our interfaces down into discrete, repeatable patterns (e.g., a label and form control, a tabbed interface, etc.) lets us look at each in isolation and test it that way too. Testing in isolation is far easier than trying to debug a page with a lot of moving parts.</p>

<p>Gathering our patterns into a live, web-based pattern library  allows anyone on our team to collect the patterns they need to build a given interface as easily as they’d assemble a plate at a smörgåsbord. And if we really want to streamline the building and testing process, we can even <a href="http://ianfeather.co.uk/a-maintainable-style-guide/">make the patterns importable into the live site</a> so everything stays in sync.</p>

<h2>Don’t Fear the Zombie Apocalypse</h2>

<p>With the constant onslaught of new devices, form factors, and considerations, it’s tempting to throw up our hands and find another line of work. The pace of advancement is so brisk, it’s just hard to keep up, let alone feel like we’re on top of where things are headed.</p>

<p>Thankfully, however, all is not lost. By taking a step back and focusing on what matters, embracing experience as a continuum, and being deliberate in how (and when) we deliver certain features and functionality to browsers, we’ll head most issues off at the pass.</p>

<p>This relieves some of the pressure (and frustration) from the testing process and frees us up to test on a wider variety of devices and browsers, which means we’ll be able to provide a solid experience for more users, no matter what marvel of technological wizardry they happen to be using at the time.</p>

<p>Everybody wins.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Please Update Picturefill]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/please-update-picturefill/"/>
				<updated>2015-05-29T11:47:42-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/please-update-picturefill</id>
				<content type="html"><![CDATA[<p><a href="https://twitter.com/wilto">Mat Marquis</a> on why you really need to upgrade <a href="http://scottjehl.github.io/picturefill/">Picturefill</a> if you’re using it. Really. Like now.</p>
<p><a rel="full-article" href="https://css-tricks.com/please-update-picturefill">Read on CSS Tricks&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Web! What Is It Good For?]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/9016/"/>
				<updated>2015-05-29T11:45:09-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/9016</id>
				<content type="html"><![CDATA[<p><a href="https://adactio.com/">Jeremy Keith</a>’s love letter to the web. Gush!</p>

<blockquote><p>The web has no gatekeepers. The web has no quality control. The web is a mess. The web is for everyone.</p></blockquote>
<p><a rel="full-article" href="https://adactio.com/journal/9016">Read on Adactio’s Journal&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Lenovo’s Projector Phone Puts Apps on the Table, Literally]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/lenovos-projector-phone-puts-apps-on-the-table-literally/"/>
				<updated>2015-05-29T11:43:15-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/lenovos-projector-phone-puts-apps-on-the-table-literally</id>
				<content type="html"><![CDATA[<p>The future of interface is getting pretty interesting.</p>

<p><figure id="fig-JwBem1Ul8dk" class="figure figure--video"><div class="video-embed video-embed--youtube video-embed--4x3"><a class="video-embed__lazy-link" style="background-image:url(http://i2.ytimg.com/vi/JwBem1Ul8dk/0.jpg)" href="//www.youtube.com/watch?v=JwBem1Ul8dk" data-lazy-video-src="http://www.youtube.com/embed/JwBem1Ul8dk?autoplay=1"><div class="video-embed__lazy-div"></div><div class="video-embed__lazy-info"><a href="https://youtube.com/devicesupport">https://youtube.com/devicesupport</a></div></a></div></figure></p>
<p><a rel="full-article" href="http://thenextweb.com/gadgets/2015/05/28/lenovos-projector-phone-puts-apps-on-the-table-literally/">Read on The Next Web&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Rocket Packs on Escalators]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/rocket-packs-on-escalators-stop-messing-with-progressive-enhancement/"/>
				<updated>2015-05-29T11:37:45-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/rocket-packs-on-escalators-stop-messing-with-progressive-enhancement</id>
				<content type="html"><![CDATA[<p>This is a fantastic presentation on progressive enhancement from the one and only <a href="http://twitter.com/codepo8">Christian Heilmann</a>. See also: His <a href="http://christianheilmann.com/2015/05/24/the-ryanair-approach-to-progressive-enhancement/">insightful post comparing progressive enhancement to checking in for a flight</a>.</p>
<p><a rel="full-article" href="http://www.slideshare.net/cheilmann/rocket-packs-on-escalators-stop-messing-with-progressive-enhancement">Read on &nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Interface Experience Maps]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/interface-experience-maps/"/>
				<updated>2015-05-28T07:43:20-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/interface-experience-maps</id>
				<content type="html"><![CDATA[<p>One of the greatest challenges of progressive enhancement lies not with the coding, but with the planning. It can be incredibly challenging to articulate how a single interface might adapt to a wide variety of situations. Interface Experience Maps (Ix Maps) can help.</p>

<!-- more -->




<hr>


<p>Back in 2007, I was presented with this challenge while putting together a talk called <a href="https://web.archive.org/web/20070515221318/http://2007.sxsw.com/interactive/programming/panels/?action=show&amp;id=IAP060214">Ruining the User Experience</a> (which I co-presented for the first time with at SXSW with <a href="https://twitter.com/sarahbeee">Sarah B. Nelson</a>). In the talk, Sarah and I discussed how to treat JavaScript as an enhancement and what happens when you don’t—in 2007, I know!</p>

<p>Anyway, in the talk I was struggling to convey the various decision points and interface adjustments that would happen as a result of those decisions. I don’t remember which of us came up with the idea—it was probably Sarah—but we opted to use a flowchart to visually describe what we were talking about on stage. Here was the first one we did:</p>

<figure id="fig-2015-05-28-01" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/01.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/01.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>An early flowchart used to describe progressive enhancement with JavaScript</figcaption></figure>


<p>It was pretty rudimentary, but it got the point across.</p>

<p>In future iterations of the talk, I expounded upon the idea of a flowchart for describing how an interface might adapt to different circumstances and browser capabilities. Here’s a particularly complex one I used to describe how a FAQ might function:</p>

<figure id="fig-2015-05-28-02" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/02.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/02.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/02.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/02.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>A flowchart describing the progressive enhancement and interaction options for an FAQ.</figcaption></figure>


<p>Over the years I found more and more ways to put these artifacts to use. And at a certain point, &ldquo;flowchart&rdquo; didn’t seem to cut it, so I began calling them &ldquo;UI construction flows&#8221;—which, admittedly, was a mouthful—and then finally settled on the name &#8220;Interaction Experience Maps&rdquo; with the help of a client.</p>

<h2>The Benefits of Ix Maps</h2>

<p>Ix Maps have become an invaluable tool to me and the teams I’ve worked with. They excel at articulating the different ways in which a given interface might adapt and what the end results of each adaptation might be.</p>

<p>This sort of documentation is invaluable to just about everyone on the team:</p>

<ul>
<li>Copywriters get a clear picture of the different experience possibilities so they can craft the copy accordingly;</li>
<li>Designers can see the different experience possibilities and can create wireframes and visual designs that account for each;</li>
<li>Developers get a clear outline of what functionality is expected and know exactly what features and capability detection to employ in generating each experience; and</li>
<li>The quality assurance team has a clear picture of what they should be looking for in each component of an interface.</li>
</ul>


<p>In short, Ix Maps ensure everyone on the team has a clear picture of what’s expected so they can work toward the common goal. One company I worked with found Ix Maps so useful that they created one for each and every pattern in their pattern library. Then they included the drawings as part of each pattern’s documentation.</p>

<h2>Ix Maps Facilitate Collaboration and Iteration</h2>

<p>An Ix Map is a pretty simple concept for anyone to come to grips with, making it a fantastic tool for enabling mixed teams—designers, developers, content folks, business strategists, etc.—to brainstorm ideas and build a strategy around progressive enhancement.</p>

<p>Time and time again, I have seen these simple diagrams bring a diverse team together and help them quickly and easily come up with very creative ways to address complex interface problems. That’s why I frequently use them as a tool in the workshops I lead.</p>

<p>Because they are so basic, Ix Maps can be sketched out quickly on paper, a whiteboard, or in software like OmniGraffle. And their simplicity also makes it quite easy to explore different ideas of how to adapt things and you don’t have to worry about throwing away an idea that doesn’t play out because it’s only a few boxes and arrows… you haven’t invested any time in design or production.</p>

<p>Here’s an example from <a href="https://www.facebook.com/events/804756366246427/">my Beyond Responsive workshop</a> that illustrates the evolution of a tabbed interface Ix Map from basic into something that is far more appropriate for differently-sized screens:</p>

<figure id="fig-2015-05-28-03" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/03.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/03.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>Pass 1: If JavaScript’s available, make a tabbed interface out of linear content. If not, leave it as it was.</figcaption></figure>




<figure id="fig-2015-05-28-04" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/04.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/04.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/04.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/04.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>Pass 2: Add a live width test into the mix to see if there’s enough room for the tabs and make it an accordion if the screen is too narrow.</figcaption></figure>




<figure id="fig-2015-05-28-05" class="media-container"><img  src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/05.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/05.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/05.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://www.aaron-gustafson.com/i/posts/2015-05-28/05.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt=""><figcaption>Pass 3: Test for native <code>details</code>/<code>summary</code> support and use the native functionality if available.</figcaption></figure>


<h2>Simple, Powerful</h2>

<p>Ix Maps have been incredibly useful to me and the dozens of teams I’ve worked with. They’ve helped us explore innovative ways to solve design challenges and have been an amazing touchstone to organize our work around. Give them a shot an I’m sure you’ll discover lots of ways to put them to use in your own projects.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Web vs. Native: Let’s Concede Defeat]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/web_vs_native_l/"/>
				<updated>2015-05-26T12:38:20-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/web_vs_native_l</id>
				<content type="html"><![CDATA[<p>I could not agree more with PPK on this: Native apps and websites shouldn’t be in competition. Each has its pros and cons.</p>

<blockquote><p> If the user doesn’t want your icon on his home screen, if the user wants a just-in-time interaction, it’s the web they want — not because of any inherent technological superiority, but because it’s hassle-free. Go there, read, forget. No junk left on your phone.</p>

<p>Most businesses don’t stand a chance of ending up on the users’ home screens. So they need the web — but not a web that emulates native to no particular purpose.</p></blockquote>
<p><a rel="full-article" href="http://www.quirksmode.org/blog/archives/2015/05/web_vs_native_l.html">Read on QuirksBlog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Even Tiny Updates to Tech Can Be Obstacles for the Disabled]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/even-tiny-updates-tech-can-obstacles-disabled/"/>
				<updated>2015-05-26T12:33:43-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/even-tiny-updates-tech-can-obstacles-disabled</id>
				<content type="html"><![CDATA[<p><a href="https://twitter.com/pdkotler">Paul Kotler</a> shares some of his struggles as a technology user with both autism and apraxia, including those you may not have considered:</p>

<blockquote><p>For me, every step forward in making things lighter and smaller is a new obstacle. Often, the buttons I need to hit are too small, the screen too sensitive, or the glare off the screen too distracting to allow me to make use of my device. Updates to operating systems or apps that create slight changes to the size and position of buttons throw me off for days. While these changes might go unnoticed by a typical user, I endure a relearning process that slows me down and makes it more difficult to communicate.</p></blockquote>
<p><a rel="full-article" href="http://www.wired.com/2015/05/even-tiny-updates-tech-can-obstacles-disabled/">Read on Wired&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Want to Become an Expert? Study (Web) History]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/want-to-become-an-expert-study-web-history/"/>
				<updated>2015-05-26T12:07:31-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/want-to-become-an-expert-study-web-history</id>
				<content type="html"><![CDATA[<p>I could not agree more:</p>

<blockquote><p>This is about getting other web professionals to better understand our field. To be correct in what they say about the past, when trying to educate others. To not make false statements, based on lack of knowledge or direct experience, which lead to wrong assumptions and misinformed decisions about code and architectures.</p></blockquote>
<p><a rel="full-article" href="http://www.obiwankimberly.com/2013/09/17/want-to-become-an-expert-study-web-history/">Read on Obi-Wan Kimberly Blessing&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[World White Web]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/worldwhiteweb/"/>
				<updated>2015-05-26T11:36:38-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/worldwhiteweb</id>
				<content type="html"><![CDATA[<p>This project—from a Swedish student—seeks to address the issue of the dominance of &ldquo;whiteness&rdquo; online by asking you to share pictures of non-white hands in order to make them more visible in Google Image Search. Admittedly, it’s a drop in the bucket when it comes to increasing the visibility of colored people online, but as Ovid famously said: “Dripping water hollows out stone, not through force but through persistence” (<i lang="la">Gutta cavat lapidem, non vi, sed saepe cadendo</i>).</p>
<p><a rel="full-article" href="http://worldwhiteweb.net">Read on World White Web - Take part in changing the search results for hand on Google.&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Tracking Protection in Firefox for Privacy and Performance (PDF)]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/tracking-protection-in-firefox-for-privacy-and-performance/"/>
				<updated>2015-05-26T11:24:11-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/tracking-protection-in-firefox-for-privacy-and-performance</id>
				<content type="html"><![CDATA[<p>New research from Columbia University and Mozilla reveals that Firefox’s &ldquo;Tracking Protection&rdquo; privacy tech has an added benefit of speeding up the web:</p>

<blockquote><p>Since Firefox does not download and render content from tracking domains, Tracking Protection also enjoys performance benefits of a 44% median reduction in page load time and 39% reduction in data usage in the Alexa top 200 news sites.</p></blockquote>
<p><a rel="full-article" href="http://ieee-security.org/TC/SPW2015/W2SP/papers/W2SP_2015_submission_32.pdf">Read on IEEE Security&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Testing for and With Windows Phone]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/testing-for-windows-phone/"/>
				<updated>2015-05-22T09:23:50-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/testing-for-windows-phone</id>
				<content type="html"><![CDATA[<p>Testing on Windows phones can be tough. Tools like Adobe’s Edge Inspect don’t support it (yet… I hope that changes at some point) and if you aren’t a Visual Studio user, emulating a Windows phone can also be a challenge. Thankfully, <a href="http://www.twitter.com/BrowseEmAll">Daniel Herken</a> has put together this no-nonsense guide for testing Windows devices.</p>
<p><a rel="full-article" href="http://www.smashingmagazine.com/2015/05/19/testing-for-windows-phone/">Read on Smashing Magazine&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Show Password: Lessons From a Failed Experiment in JavaScript Accessibility]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/show-password-javascript-accessibility/"/>
				<updated>2015-05-22T09:16:39-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/show-password-javascript-accessibility</id>
				<content type="html"><![CDATA[<p>The brilliant James Edwards recounts the trials and tribulations of trying to make an accessible version of &ldquo;Show Password&rdquo; functionality.</p>
<p><a rel="full-article" href="http://www.sitepoint.com/show-password-javascript-accessibility/">Read on SitePoint&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Manifold JS]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/manifoldjs/"/>
				<updated>2015-05-21T14:12:48-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/manifoldjs</id>
				<content type="html"><![CDATA[<p>Write a web app once, deploy it as a hosted app to Android, iOS, Chrome OS, Firefox OS, and Windows. And it follows the W3C standard for web apps. It’s almost too easy.</p>
<p><a rel="full-article" href="http://manifoldjs.com/">Read on &nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[15 Years Ago in ALA: Much Ado About 5]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/fifteen-years-ago-in-ala-much-ado-about-5k/"/>
				<updated>2015-05-21T13:56:10-05:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/fifteen-years-ago-in-ala-much-ado-about-5k</id>
				<content type="html"><![CDATA[<p>In this brief post, <a href="https://twitter.com/zeldman">Jeffrey Zeldman</a> reminds us of the importance of simplicity by deftly showing us where we’ve gotten ourselves:</p>

<blockquote><p>[D]riven by fear that apps would make the web irrelevant, we began relying on frameworks that made even the simplest website act and feel like a mind-blowing application. Serving reams of code we didn’t need because, hell, it came with the frameworks, and abandoning principles like progressive enhancement because, hell, everybody uses JavaScript, we soon fell in love with high-resolution, full-screen background images, then fell even harder when those images quadrupled in weight thanks to Retina.
And still the little article memorializing the little 5K contest sat online, its lessons forgotten in an arms race wherein the average home page now weighs over 2MB. Put that in your Edge network and smoke it.</p></blockquote>
<p><a rel="full-article" href="http://alistapart.com/blog/post/fifteen-years-ago-in-ala-much-ado-about-5k">Read on A List Apart&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
</feed>
