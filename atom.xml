<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Aaron Gustafson]]> Latest Posts &amp; Links</title>
	<link href="http://www.aaron-gustafson.com/atom.xml" rel="self"/>
	<link href="http://www.aaron-gustafson.com/"/>
	<updated>2015-04-09T10:52:42-04:00</updated>
	<id>http://www.aaron-gustafson.com/</id>
	<author>
		<name><![CDATA[Aaron Gustafson]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
		
			<entry>
				<title type="html"><![CDATA[15 Years of Dao]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/15-years-of-dao/"/>
				<updated>2015-04-07T10:36:35-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/15-years-of-dao</id>
				<content type="html"><![CDATA[<p>So many nice words about such an important piece about the Web. My humble contribution:</p>

<blockquote><p>John’s piece came three years before Steve Champeon coined the term “progressive enhancement,” but it clearly and succinctly outlined its philosophy: “Make pages which are accessible, regardless of the browser, platform or screen that your reader chooses or must use to access your pages.” His insights—published a mere decade after the invention of the medium—still influence the work I do to this day.</p></blockquote>
<p><a rel="full-article" href="http://alistapart.com/blog/post/15-years-of-dao">Read on A List Apart&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[A Dao of Web Design at 15]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/a-dao-of-web-design-at-15/"/>
				<updated>2015-04-07T08:51:36-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/a-dao-of-web-design-at-15</id>
				<content type="html"><![CDATA[<p>John nails it:</p>

<blockquote><p>I continue to believe, just as the Web is not print, though it emerged in many ways from the medium of print, it is not just another application platform. It has its own genius, which we could call as I did all those years ago, adaptability.</p></blockquote>
<p><a rel="full-article" href="http://www.webdirections.org/blog/a-dao-of-web-design-at-15/">Read on The Web Directions Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[How to Create the Right Emotions With Color in Web Design]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/how-to-create-the-right-emotions-with-color-in-web-design/"/>
				<updated>2015-04-07T08:41:30-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/how-to-create-the-right-emotions-with-color-in-web-design</id>
				<content type="html"><![CDATA[<p>A nice overview of color and its emotional impact. Of course, this is a Western perspective. See also <a href="http://www.empower-yourself-with-color-psychology.com/cultural-color.html">Cultural Meanings of Color and Color Symbolism</a>.</p>
<p><a rel="full-article" href="http://thenextweb.com/dd/2015/04/07/how-to-create-the-right-emotions-with-color-in-web-design/">Read on The Next Web&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[9th Circuit Rules Netflix Isn’t Subject to Disability Law]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/9th-circuit-rules-netflix-isnt-subject-to-disability-law/"/>
				<updated>2015-04-03T11:41:36-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/9th-circuit-rules-netflix-isnt-subject-to-disability-law</id>
				<content type="html"><![CDATA[<p>So the 9th Circuit Court threw out an ADA suit against Netflix for a lack of captions. To <a href="http://arstechnica.com/author/joe-mullin/">Joe Mullin</a> of <cite>Ars</cite> it seemed like a question of whether a website constitutes a “public accommodation”, but I don&rsquo;t know that it does in this instance. I did agree with <a href="http://en.wikipedia.org/wiki/National_Federation_of_the_Blind_v._Target_Corp"><cite>NFB v. Target</cite></a>, but this seems different.</p>

<p>I don&rsquo;t think Netflix should have to provide captions for all content on its service. The onus for captioning should be on the content creator and not the delivery service. In other words, if Netflix has an accessible site and captions their own original content, that should be the most anyone could ask of them. They don&rsquo;t own the majority of their content and could even be legally precluded from captioning it depending on the contract.</p>

<p>As much as I want to see more captioned content made available, I think the ruling makes sense. The case doesn&rsquo;t seem to be appropriately grounded nor does the ask seem reasonable.</p>
<p><a rel="full-article" href="http://arstechnica.com/tech-policy/2015/04/9th-circuit-rules-netflix-isnt-subject-to-disability-law/">Read on Ars Technica&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Why America’s Obsession With STEM Education Is Dangerous]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/why-stem-wont-make-us-successful/"/>
				<updated>2015-04-02T18:51:36-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/why-stem-wont-make-us-successful</id>
				<content type="html"><![CDATA[<p>A fantastic op-ed by Fareed Zakaria on why a well-rounded populace is a good thing:</p>

<blockquote><p>A broad general education helps foster critical thinking and creativity. Exposure to a variety of fields produces synergy and cross fertilization. Yes, science and technology are crucial components of this education, but so are English and philosophy.</p></blockquote>

<p>And on innovation for the future of the U.S.:</p>

<blockquote><p>Innovation is not simply a technical matter but rather one of understanding how people and societies work, what they need and want. America will not dominate the 21st century by making cheaper computer chips but instead by constantly reimagining how computers and other new technologies interact with human beings.</p></blockquote>

<p>I could not agree more. I studied pop culture and journalism in college after changing majors from marine biology my third year. I now have a very successful career in the STEM world, but I’ve never taken a computer science course. Heck, I’ve never even taken a typing course.</p>

<p>(I kinda regret that second one.)</p>

<p>I don&rsquo;t think I would be where I am today if I did not spend time in psychology, sociology, literature, drama, and anthropology classes. It’s not that a computer science course or two wouldn’t have helped me (it certainly would have), but broad exposure leads to broad perspectives and innovative thinking. It helps us see the interconnectedness of what surrounds us and helps us do our jobs better, no matter what our jobs are.</p>

<p>Fareed makes a lot of great points in this op-ed and you should definitely give it a read, but I will leave you with this important warning:</p>

<blockquote><p>Americans should be careful before they try to mimic Asian educational systems, which are oriented around memorization and test-taking. I went through that kind of system. It has its strengths, but it’s not conducive to thinking, problem solving or creativity. That’s why most Asian countries, from Singapore to South Korea to India, are trying to add features of a liberal education to their systems.</p></blockquote>
<p><a rel="full-article" href="http://www.washingtonpost.com/opinions/why-stem-wont-make-us-successful/2015/03/26/5f4604f2-d2a5-11e4-ab77-9646eea6a4c7_story.html">Read on The Washington Post&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Introducing the IE Diagnostics Adapter for Third Party Developer Tools]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/introducing-the-ie-diagnostics-adapter-for-third-party-developer-tools/"/>
				<updated>2015-04-02T15:10:48-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/introducing-the-ie-diagnostics-adapter-for-third-party-developer-tools</id>
				<content type="html"><![CDATA[<p>Connect to Internet Explorer via Chrome Developer Tools. How friggin’ cool is that?!</p>
<p><a rel="full-article" href="http://blogs.msdn.com/b/ie/archive/2015/04/02/introducing-the-ie-diagnostics-adapter-for-third-party-developer-tools.aspx">Read on IEBlog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[How to Apply Progressive Enhancement When JavaScript Seems Like a Requirement]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/how-to-apply-progressive-enhancement-when-javascript-seems-like-a-requirement/"/>
				<updated>2015-04-02T10:14:40-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/how-to-apply-progressive-enhancement-when-javascript-seems-like-a-requirement</id>
				<content type="html"><![CDATA[<p>On Stack Overflow last week, <a href="http://stackoverflow.com/users/4719194/jamham">JamHam</a> asked how to apply progressive enhancement in interfaces that seem to require JavaScript. Unfortunately he deleted the question before I could post my response, so I thought I would post it all here for posterity.</p>

<!-- more -->


<blockquote><p>I&rsquo;ve been trying to make my site (a content publishing &ldquo;web app&rdquo;) work fully without JavaScript, however, I&rsquo;ve found myself in situations where I can&rsquo;t honestly think how I would do some features without it.</p>

<p>For instance:</p>

<ul>
<li>I have a form submission page where you change certain settings, and the form changes accordingly.This is alright, I can apply query strings in the url and have some logic in my layout so that certain fields are shown/hidden according to the query string. The thing is, I also need to update a &ldquo;price&rdquo; dynamically, according to what fields are filled in, how they are filled in, and some other factors, and I don&rsquo;t honestly see how I could do that without JavaScript.</li>
<li>I have a messaging section where I&rsquo;m using WebSockets (with the help of Socket.io). The UI of the messaging (and of course, the
WebSockets) stuff pretty much depends on JavaScript, with &lsquo;messages&rsquo; being created as they arrive and appended into DOM and also a form that allows you to quickly look up an user via AJAX so you can send a message easily, among many other things.</li>
</ul>


<p>I mean, I could probably come up with very complicated solutions for each situation, and obviously the functionality wouldn&rsquo;t be the same. I&rsquo;m thinking I might as well just require JavaScript for the whole thing</p>

<p>But it kinda sucks, since I&rsquo;ve been making everything work without JavaScript, up until this point. And I would like some consistency across the whole site. In these kind of situations, is it acceptable to not support non-js clients? What would you suggest in this case?</p></blockquote>

<p>My response (which I was drafting when he deleted the question):</p>

<blockquote><p>First off, I applaud your interest in using progressive enhancement. It will ensure the most users possible have access to your content and will also result in a more robust application overall. As a general guiding principle, look to the past. How did we solve these issues before widespread JavaScript availability? Those &ldquo;Web 1.0&rdquo; solutions will still work and can be overtaken by supplanted by your JavaScript solution whenever it is possible to do so.</p>

<p>Every situation is different, but it is even possible to reuse a lot of code in both scenarios.</p>

<p>Now to address your interfaces…</p>

<p><strong>Your Submission Page</strong> &ndash; I could be wrong, but this sounds like a shopping cart to me (at least in essence). You are on the right track with query parameters, but you could also store info about the cart (and the user’s capabilities) in a session or cookie.</p>

<p>In terms of updating the &ldquo;cart&rdquo;, a simple &ldquo;update&rdquo; submit button that posts the form and triggers a redirection back to this page with the updated info would be sufficient. And if you need to show or hide fields based on choices made, you simply apply that logic on the server side. You could even have the server generate that same markup into the page, but hidden for situations where JavaScript is available.</p>

<p><strong>Your Messaging App</strong> &ndash; This can seem like a daunting challenge, but before we had web sockets and even Ajax, we relied on a small form which posts messages to the back end and a running feed of messages being sent from the back-end. One of the most common way to handle this involved frames and a &ldquo;meta refresh&rdquo; like this one:</p>

<pre><code>&lt;meta http-equiv="refresh" content="30"&gt;
</code></pre>

<p>That simple <code>meta</code> tag will make any browser refresh the page every 30 seconds. Now if you put that in an <code>iframe</code> to keep it from causing a refresh of the entire interface, any new messages would be picked up and displayed automatically at that interval (which you should tune to be appropriate for your app).</p>

<p>Once that is in place the page itself could even post to that frame by using the non-standard but well-supported <code>_target</code> attribute on the <code>form</code>.</p>

<p>Obviously with JavaScript enabled, you’d probably throw away that <code>iframe</code>, but the rest of the setup (including the templates for displaying the messages) could certainly be reused with WebSockets.</p></blockquote>

<p>I hope this helps. Progressive enhancement may seem like a huge challenge, but when you take a few moments to think about how we handled these challenges in the past, the way forward becomes clear.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Playing With Flexbox and Quantity Queries]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/playing-with-flexbox-and-quantity-queries/"/>
				<updated>2015-03-26T14:44:24-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/playing-with-flexbox-and-quantity-queries</id>
				<content type="html"><![CDATA[<p>Ever since reading <a href="http://twitter.com/heydonworks">Haydon Pickering</a>’s <a href="http://alistapart.com/article/quantity-queries-for-css">piece on quantity queries</a>, I’ve been musing over the possibilities for layout. I decided I to play around with them a bit on this site as it’s been a while since I’ve tweaked the design. Being that I wanted to experiment, I thought this would be a fun time to tuck into <a href="http://www.w3.org/TR/css-flexbox-1/">Flexbox</a> a bit more as well.</p>

<!-- more -->


<p>Here’s a brief overview of the project:</p>

<p><strong>The Candidate</strong>: My <a href="http://www.aaron-gustafson.com/speaking-engagements/">speaking engagements</a> page.<br>
<strong>The Challenge</strong>: The &ldquo;Future&rdquo; list will grow and shrink as I book things, so I never know how many will be there. The &ldquo;Past&rdquo; list will also grow, but I am less interested in getting crazy with that.<br>
<strong>The Idea</strong>: A grid layout that flexes to visually highlight 1-2 upcoming future events and allows the others to flow in at the default grid size. It should be set up to handle everything from a single future event to a dozen or more.</p>

<figure id="2015-03-26-1" class="media-container">
    <img src="http://www.aaron-gustafson.com/i/posts/2015-03-26/the-idea-sm.jpg"
         srcset="/i/posts/2015-03-26/the-idea-lg.jpg 1024w, /i/posts/2015-03-26/the-idea-md.jpg 600w, /i/posts/2015-03-26/the-idea-sm.jpg 320w"
         alt="">
    <figcaption>
        <p>My sketch of the idea.</p>
    </figcaption>
</figure>


<p>The markup pattern was pretty simple. It’s just a list of events:</p>

<div><script src='https://gist.github.com/597284affc88b9084cf3.js?file=markup.html'></script>
<noscript><pre><code>&lt;ul class=&quot;listing listing--events&quot;&gt;
  &lt;li class=&quot;listing__item listing__item--1 event event--future&quot;&gt;
    &lt;!-- content --&gt;
  &lt;/li&gt;
  &lt;!-- lis continue --&gt;
&lt;/ul&gt;</code></pre></noscript></div>


<p>With that in place, I got to work.</p>

<h2>Single File</h2>

<p>To set the stage, I started with some basic Flexbox syntax<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> by handling the container and the basic full-width small screen view:</p>

<div><script src='https://gist.github.com/597284affc88b9084cf3.js?file=first-pass.css'></script>
<noscript><pre><code>.listing--events {
  display: flex;
}

.event {
  box-sizing: border-box;
  padding: 1.25rem; /* 20px padding */
  margin: 0 0 1.25rem 0; /* 20px bottom margin */
  flex: 0 0 100%;
}</code></pre></noscript></div>


<p>You may be wondering where all of the experimental style rules are. I use <a href="https://github.com/postcss/autoprefixer">Autoprefixer</a> to handle the experimental property inclusion/trans-compilation so I can keep my CSS clean and standards-based.</p>

<p>This simple CSS gives you exactly what you’d expect: a vertical list of events, separated by 20px worth of space.</p>

<figure id="2015-03-26-2" class="media-container">
    <img src="http://www.aaron-gustafson.com/i/posts/2015-03-26/first-pass.jpg"
         srcset="/i/posts/2015-03-26/first-pass-lg.jpg 1024w, /i/posts/2015-03-26/first-pass-md.jpg 600w, /i/posts/2015-03-26/first-pass-sm.jpg 320w"
         alt="">
</figure>


<h2>Two by Two</h2>

<p>Next up, I tackled the first breakpoint at 28.75em:</p>

<div><script src='https://gist.github.com/597284affc88b9084cf3.js?file=second-pass.css'></script>
<noscript><pre><code>.listing--events {
  display: flex;
  flex-wrap: wrap;
  align-items: stretch;
}

.event {
  box-sizing: border-box;
  padding: 1.25rem; /* 20px */
  margin: 0 0 1.25rem 0; /* 20px v */
  flex: 0 0 100%;
}

@media only screen and (min-width: 28.75em) {
  
  /* 20px gap divided by 2 events per row */
  .event {
    flex: 0 0 calc( 50% - 1.25rem / 2 );
    margin-left: 1.25rem; /* 20px &lt; */
  }
  
  /* Remove left margin for row starters */
  .event:nth-child(odd) {
    margin-left: 0;
  }
  
  /* Reset margins on &quot;future&quot; events
     &amp; remove the correct one */
  .event--future:nth-child(odd) {
    margin-left: 1.25rem;
  }
  .event--future:nth-child(even) {
    margin-left: 0;
  }
  
  /* Quantity Query - when more than 1,
     make the first span both columns  */
  .event--future:nth-last-child(n+1):first-child {
    flex: 0 0 100%;
    font-size: 1.5em;
    margin-left: 0;
  }
  
}</code></pre></noscript></div>


<p>In this pass, I set up the event blocks to fill 50% of the parent container (well, 50% minus the 1.25rem gutter between them, using <a href="http://www.w3.org/TR/css3-values/#calc"><code>calc()</code></a>).<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> In order to make the children wrap to form rows, I set <code>flex-wrap: wrap</code> on the list (<code>.listing--events</code>). Then, to make the children all equal heights across each row, I set <code>align-items: stretch</code>. The gutter space was achieved via left margins on all events save the row starters (<code>.event:nth-child(odd)</code>).</p>

<p>It’s worth noting that in the full page I have two sets of event listings: one past and one future. The &ldquo;event&rdquo; <code>class</code> is used in all instances. The modified &ldquo;future&rdquo; <code>class</code> is added to events that have not happened yet.</p>

<p>Then I used a quantity query to select the first future event when there is more than one in the list (line 38) and set it span 100% of the parent width. To keep the gutters accurate, I also swapped where the margins were applied, adding the margin back to <code>.event--future:nth-child(odd)</code> and removing it from <code>.event--future:nth-child(even)</code>.</p>

<figure id="2015-03-26-3" class="media-container">
    <img src="http://www.aaron-gustafson.com/i/posts/2015-03-26/second-pass-sm.jpg"
         srcset="/i/posts/2015-03-26/second-pass-lg.jpg 1024w, /i/posts/2015-03-26/second-pass-md.jpg 600w, /i/posts/2015-03-26/second-pass-sm.jpg 320w"
         alt="">
</figure>


<h2>Three’s a Crowd</h2>

<p>Finally, I could tackle the third and most complicated layout. Things seemed to get a little wide around 690px, so I set the breakpoint to 43.125em.</p>

<div><script src='https://gist.github.com/597284affc88b9084cf3.js?file=third-pass.css'></script>
<noscript><pre><code>.listing--events {
  display: flex;
  flex-wrap: wrap;
  align-items: stretch;
}

.event {
  box-sizing: border-box;
  padding: 1.25rem; /* 20px */
  margin: 0 0 1.25rem 0; /* 20px v */
  flex: 0 0 100%;
}

@media only screen and (min-width: 28.75em) {
  
  /* 20px gap divided by 2 events per row */
  .event {
    flex: 0 0 calc( 50% - 1.25rem / 2 );
    margin-left: 1.25rem; /* 20px &lt; */
  }
  
  /* Remove left margin for row starters */
  .event:nth-child(odd) {
    margin-left: 0;
  }
  
  /* Reset margins on &quot;future&quot; events
     &amp; remove the correct one */
  .event--future:nth-child(odd) {
    margin-left: 1.25rem;
  }
  .event--future:nth-child(even) {
    margin-left: 0;
  }
  
  /* Quantity Query - when more than 1,
     make the first span both columns  */
  .event--future:nth-last-child(n+1):first-child {
    flex: 0 0 100%;
    font-size: 1.5em;
    margin-left: 0;
  }
  
}

@media only screen and (min-width: 43.125em) {

  /* 1/3 width with 20px gutter */
  .event {
    flex: 0 0 calc( 100% / 3 - .875rem );
  }

  /* Reset margins */
  .event:nth-child(even),
  .event:nth-child(odd) {
    margin-left: 1.25rem;
  }
  /* Normal Grid margin removal */
  .event:nth-child(3n+1) {
    margin-left: 0;
  }
  
  /* Correct margins for the future events */
  .event--future:nth-child(3n+1) {
    margin-left: 1.25rem;
  }
  
  /* Quantity Query - when more than 2,
     make the first 2 go 50%  */
  .event--future:nth-last-child(n+2):first-child, 
  .event--future:nth-last-child(n+2):first-child + .event--future {
    flex: 0 0 calc( 50% - 1.25rem / 2 );
    font-size: 1.5em;
  }
  
  /* Quantity + nth for margin removal */
  .event--future:nth-last-child(n+2):first-child ~ .event--future:nth-child(3n) {
    margin-left: 0;
  }
  
}</code></pre></noscript></div>


<p>In this final pass, I used a slightly more complicated calculation to set the width of each child to 1/3 of the parent minus the gutters between them (100% / 3 &ndash; 0.875rem).</p>

<p>If you’re paying close attention, you might wonder why the gutter being used in the calculation is 0.875rem rather than the full 1.25rem. Well, the reason is (as best I can surmise) rounding. In order to get the flex width to fill the parent without causing a wrap, 14px (0.875rem) seemed to be the magic number.</p>

<p>It’s worth noting that if I allowed the event to grow (using <code>flex-grow: 1</code> or its equivalent in the shorthand), the column would fill in perfectly, but the last row would always be filled completely too. You could end up with two events in the last row being 50% wide each or a single event being 100% wide, which I didn’t want. I wanted them all to be equal width with the exception of the first 2. Setting <code>flex</code> as I did allowed that to happen.</p>

<p>I went ahead and reset the standard margins for events as well (on both <code>.event:nth-child(even)</code> and <code>.event:nth-child(odd)</code>). And then I turned off the margins on the first of every group of three events using <code>.event:nth-child(3n+1)</code>.</p>

<p>With that in place, I went to work on the future events, resetting the margins there as well. Then I used a quantity query (lines 70-71) to select the first two members when the list is more than 2 and set them to be 50% of the parent width minus the gutter.</p>

<p>To handle the margins in the quantity query instance, I added all the margins back (line 64) and then removed the left margins from the new row starters (line 77).</p>

<figure id="2015-03-26-4" class="media-container">
    <img src="http://www.aaron-gustafson.com/i/posts/2015-03-26/third-pass-sm.jpg"
         srcset="/i/posts/2015-03-26/third-pass-lg.jpg 1024w, /i/posts/2015-03-26/third-pass-md.jpg 600w, /i/posts/2015-03-26/third-pass-sm.jpg 320w"
         alt="">
</figure>


<h2>Ta-da!</h2>

<p>And there you have it. In about 80 lines of very generously spaced and commented CSS, we’ve got a flexible grid-based Flexbox layout with visual enhancements injected via quantity queries. I’m sure I’ll continue to tinker, but I’m pretty happy with the results so far.</p>

<p>You can view <a href="http://www.aaron-gustafson.com/speaking-engagements/">the final page of course</a> (or <a href="https://www.youtube.com/watch?v=V20wuGM2tzU">watch a video of the interaction</a>), but I also created a <a href="http://codepen.io/aarongustafson/pen/VYRZBP">distilled demo on Codepen for you to play with</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If you aren’t familiar with Flexbox, <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">CSS Tricks has a great cheatsheet</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Interestingly, the support matrices for <a href="http://caniuse.com/#feat=calc"><code>calc()</code></a> and <a href="http://caniuse.com/#feat=flexbox">Flexbox</a> are pretty well aligned.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Downgrading the District: Why We're Lowering D.C.'s Legislative Data Score]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/downgrading-the-district-why-were-lowering-dcs-legislative-data-score/"/>
				<updated>2015-03-24T18:51:36-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/downgrading-the-district-why-were-lowering-dcs-legislative-data-score</id>
				<content type="html"><![CDATA[<p>D.C. gets a downgrade for its myopic, “modern”, JavaScript-only focus:</p>

<blockquote><p>While the site is easy enough to navigate by a person with good vision using a modern browser, the complete reliance on Javascript makes it extremely difficult for people with older technology or individuals relying on assistive devices to use the site.</p></blockquote>
<p><a rel="full-article" href="http://sunlightfoundation.com/blog/2015/03/24/downgrading-the-district-why-were-lowering-d-c-s-legislative-data-score/">Read on The Sunlight Foundation&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[I Can Text You a Pile of Poo, but I Can’t Write My Name]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/i-can-text-you-a-pile-of-poo-but-i-cant-write-my-name/"/>
				<updated>2015-03-23T18:51:36-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/i-can-text-you-a-pile-of-poo-but-i-cant-write-my-name</id>
				<content type="html"><![CDATA[<p>A heartbreaking and damning assessment of the current state of Unicode by Aditya Mukerjee.</p>

<blockquote><p>My name is not only a common Indian name, but one of the top 1,000 names in the United States as well. But the final letter has still not been given its own Unicode character, so I have to use a substitute.</p></blockquote>

<p>Wow. Just, wow.</p>

<p>Worried about Unicode getting too big?</p>

<blockquote><p>[O]ne might appeal to the limited space in the Unicode character set. Even if we take for granted the somewhat arbitrary maximum of 1,114,112 codepoints, the other alphabets included speak for themselves. The most recent update to the Unicode standard included the entire alphabet of Linear B, an ancient Mycenaean script that was not deciphered in the modern era until the 1950s. Nor does alleged scarcity explain the inclusion of Linear A, a Minoan script so arcane, scholars disagree on what language it even represented, let alone how to read the script.</p></blockquote>

<p>His frustration is completely understandable:</p>

<blockquote><p>We have an unambiguous, cross-platform way to represent “PILE OF POO” (💩), while we’re still debating which of the 1.2 billion native Chinese speakers deserve to spell their own names correctly.</p></blockquote>

<p>And since the subject of <a href="http://money.cnn.com/2015/02/23/technology/apple-diverse-emoji/">diversity in emoji</a> has been a hot button issue of late, here&rsquo;s a bit on that:</p>

<blockquote><p>Perhaps I wouldn’t mind that the emoji world now literally has “colored” people, if it weren’t for the timing. Instead, what could have been a meaningless, empty gesture becomes an outright insult. <em>You can’t write your name in your native language, but at least you can tweet your frustration with an emoji face that’s the same shade of brown as yours!</em></p></blockquote>

<p>This post is eye-opening on so many levels. You should definitely add it to your reading list because, as Aditya reminds us, “it’s imperative that the writing system of the 21st century be driven by the needs of the people using it.”</p>
<p><a rel="full-article" href="https://modelviewculture.com/pieces/i-can-text-you-a-pile-of-poo-but-i-cant-write-my-name">Read on Model View Culture&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Austin Landlords Demolish Piñata Store for SXSW, Call Mexican Tenants ‘Roaches’]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/austin-landlords-demolish-pinata-store-jumpolin-sxsw-party/"/>
				<updated>2015-03-23T18:51:36-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/austin-landlords-demolish-pinata-store-jumpolin-sxsw-party</id>
				<content type="html"><![CDATA[<p>This is despicable. If you are the mother of either Jordan French or Darius Fisher, please slap some sense into your little fuckwits. Lejarazu family: I am so sorry.</p>

<p>I miss the old Austin.</p>
<p><a rel="full-article" href="http://www.latina.com/lifestyle/our-issues/austin-landlords-demolish-pinata-store-jumpolin-sxsw-party">Read on Latina&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Once Upon a Time, There Was One Internet and It Was Open to Everyone…]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/once-upon-a-time-there-was-one-internet-and-it-was-open-to-everyone/"/>
				<updated>2015-03-22T23:51:36-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/once-upon-a-time-there-was-one-internet-and-it-was-open-to-everyone</id>
				<content type="html"><![CDATA[<p>A  great discussion of the implications of Internet censorship on businesses and the economy. Choice quote:</p>

<blockquote><p>When governments begin developing complex and counterintuitive online rules for their various jurisdictions, any semblance of global development is broken down. The resulting risk is that we will be left with multiple internets, each with their own rules, laws and guidelines.</p></blockquote>
<p><a rel="full-article" href="http://www.wired.com/2015/03/once-upon-a-time-there-was-one-internet-and-it-was-open-to-everyone/">Read on Wired&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[YourBrowser.is]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/yourbrowseris/"/>
				<updated>2015-03-22T18:51:36-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/yourbrowseris</id>
				<content type="html"><![CDATA[<p>One of the hardest things about debugging websites is parsing bug reports provided by non-tech folks. And one of the most common issues with them is confirmation of what browser &amp; version, OS &amp; version, and possibly what device they are running it on. Do yourself a favor and have them hit <a href="http://yourbrowser.is">yourbrowser.is</a> to copy &amp; paste the results for you before posting the bug.</p>
<p><a rel="full-article" href="http://yourbrowser.is/">Read on YourBrowser.is&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Doug Kerney Freaks Over Internet Explorer’s Phaseout]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/doug-kerney-freaks-over-internet-explorers-phaseout/"/>
				<updated>2015-03-20T12:10:47-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/doug-kerney-freaks-over-internet-explorers-phaseout</id>
				<content type="html"><![CDATA[<p>Hilarious!</p>

<figure id="fig-2015-03-20-01" class="figure figure--video"><div class="video-embed video-embed--vimeo video-embed--16x9"><iframe class="video-embed__video" frameborder="0" allowfullscreen="" src="//player.theplatform.com/p/NnzsPC/widget/select/media/Rq9eJUYppzJM"></iframe></div></figure>

<p><a rel="full-article" href="http://www.nbc.com/fallon-tonight/segments/115651">Read on The Tonight Show&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Quantity Queries… Where Have You Been All My Life?]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/quantity-queries-where-have-you-been-all-my-life/"/>
				<updated>2015-03-20T11:00:03-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/quantity-queries-where-have-you-been-all-my-life</id>
				<content type="html"><![CDATA[<p><a href="http://twitter.com/heydonworks">Heydon Pickering</a>’s <a href="http://alistapart.com/article/quantity-queries-for-css">Quantity Queries for CSS</a> is sheer brilliance and it’s so simple I’m surprised we hadn’t landed on the idea sooner.</p>

<!-- more -->


<p>We&rsquo;ve all experienced this feeling: <em>I have no idea how many modules will be in this block, but I would love to lay them out differently depending on that number.</em> Short of writing exhaustive CSS to (hopefully, optimistically) cover all of your bases, we had not figured out a good way to do this.</p>

<p>Heydon to the rescue!</p>

<p>Here’s Heydon’s first quantity query example:</p>

<div><script src='https://gist.github.com/eddda1f32ed102cedd86.js?file=equal.css'></script>
<noscript><pre><code>li:nth-last-child(6):first-child, 
li:nth-last-child(6):first-child ~ li {
  color: green;
}</code></pre></noscript></div>


<p>With these selectors, the rule set would only apply if the total count of list items was exactly 6. Here’s what he is selecting:</p>

<ol>
<li>A list item (<code>li</code>) that is 6th sibling in a group of list item siblings when counted backwards (<code>:nth-last-child(6)</code>), but only if it is also the first of those siblings (<code>:first-child</code>); and</li>
<li>Any list item (<code>li</code>) siblings that follow the one selected above (<code>~</code>).</li>
</ol>


<p>Brilliant! <a href="http://alistapart.com/article/quantity-queries-for-css#section4">Heydon breaks it down way more eloquently</a> (and with illustrated squid to boot). To use this in your own projects, simply swap the &ldquo;6&rdquo; for whatever count you are looking for it to be equal to.</p>

<p>But Heydon doesn’t stop there. He also gives us ways to test for  more than or equal to and fewer than or equal to a certain number. We’ll start with the <br/>
&ldquo;more than&rdquo; variant (because everyone always wants more):</p>

<div><script src='https://gist.github.com/eddda1f32ed102cedd86.js?file=more-than-or-equal.css'></script>
<noscript><pre><code>li:nth-last-child(n+6),
li:nth-last-child(n+6) ~ li {
  /* properties here */
}</code></pre></noscript></div>


<p>This one is slightly more complex, using the <code>nth-*</code> formula to manage the calculation. In English, this selects:</p>

<ol>
<li>A list item (<code>li</code>) which is the sixth, seventh, eighth, etc. sibling in a collection of list item siblings when counted backwards from the end of that collection (<code>:nth-last-child(n+6)</code>); and</li>
<li>Any list item (<code>li</code>) siblings that follow the one(s) selected above (<code>~</code>).</li>
</ol>


<p>The magic is in the formula: <em>n+6</em>.</p>

<p>The way <code>nth-*</code> formulae work is that the &ldquo;n&rdquo; portion is about dividing the siblings into smaller groups based on the <em>n</em> multiplier. So &ldquo;2n&rdquo; means for every group of 2, &ldquo;3n&rdquo; means for every group of 3, and so on. In Heydon’s case, &ldquo;n&rdquo; simply means for every group of 1. The <em>n</em> multiplier starts as zero (for the first group) and then becomes 1, 2, 3, etc. in succession.</p>

<p>The number added or subtracted from this number (&ldquo;+6&rdquo; in the example) can be though of as the item in the count. Most often we see this in use as &ldquo;2n+2&rdquo; which stands for the second sibling in every group of two. It’s usually common to see this number be smaller than the grouping number (&ldquo;3n+2&rdquo;, &ldquo;5n+3&rdquo;, etc.). In Heydon’s example, however there is no grouping, so that logic doesn’t really apply. Instead you can think of it as simply adding the multiplier to 6: 0+6 (6), 1+6 (7), 2+6 (8), etc.</p>

<p>Now count from the end and then select that and everything that follows and you get a &ldquo;more than or equal to&rdquo; count based on the number (6 in his case, but again you can swap it out). Brilliant!</p>

<p>The final example he gives is for fewer than or equal to a particular number:</p>

<div><script src='https://gist.github.com/eddda1f32ed102cedd86.js?file=fewer-than-or-equal.css'></script>
<noscript><pre><code>li:nth-last-child(-n+6):first-child,
li:nth-last-child(-n+6):first-child ~ li {
  /* properties here */
}</code></pre></noscript></div>


<p>This one is largely the same as the &ldquo;more than&rdquo; example, but the multiplier is reversed (with the minus sign) which means the count runs backward: 0+6 (6), -1+5 (5), -2+6 (4), and so on.</p>

<p>I am just overjoyed with how brilliant this is. I can think of so many places to use it (and will likely be doing so quite soon).</p>

<h2>Bonus: Now with SASS</h2>

<p><a href="https://twitter.com/danielguillan">Daniel Guillan</a> has <a href="https://github.com/danielguillan/quantity-queries">ported this functionality (and more) to SASS</a> using a handful of really straightforward mixins. Here’s a demo:</p>

<p data-height="331" data-theme-id="0" data-slug-hash="GgBOxm" data-default-tab="result" data-user="danielguillan" class='codepen'>See the Pen <a href='http://codepen.io/danielguillan/pen/GgBOxm/'>Quantity Queries Sass mixins demo</a> by Daniel Guillan (<a href='http://codepen.io/danielguillan'>@danielguillan</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>Happy counting!</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Big Web Show #130: Progressive Enhancement FTW With Aaron Gustafson]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/bigwebshow-130/"/>
				<updated>2015-03-20T10:53:58-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/bigwebshow-130</id>
				<content type="html"><![CDATA[<p>Jeffrey Zeldman and I discuss web design then and now; why Flipboard’s 60fps web launch is anti-web and anti-user; <a href="https://www.youtube.com/watch?v=1pkVLqSaahk">Genesis’ “Land of Confusion” video</a>, and other bad ideas from the 1980s; design versus art; the demise and sendoff of <a href="http://webstandardssherpa.com">Web Standards Sherpa</a>; how the web community differs from other creative communities; and the 2nd Edition of <a href="http://adaptivewebdesign.info"><cite>Adaptive Web Design</cite></a>, coming from New Riders later this year.</p>
<p><a rel="full-article" href="http://5by5.tv/bigwebshow/130">Read on 5 by 5&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Rendering Engine Updates in March for the Windows 10 Technical Preview]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/rendering-engine-updates-in-march-for-the-windows-10-technical-preview/"/>
				<updated>2015-03-18T15:20:46-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/rendering-engine-updates-in-march-for-the-windows-10-technical-preview</id>
				<content type="html"><![CDATA[<p>The new browser codenamed “Project Spartan” won’t be in it, but the March build of the public Windows 10 preview has a bunch of new features. Among my favorites:</p>

<ul>
<li><a href="https://status.modern.ie/arialandmarkroles">ARIA Landmark Roles</a>,</li>
<li><a href="https://status.modern.ie/webaudioapi">Web Audio API</a>,</li>
<li><a href="https://status.modern.ie/conditionalrules"><code>@supports</code></a>,</li>
<li><a href="https://status.modern.ie/cssgradientmidpoints">CSS Gradient Midpoints</a>,</li>
<li>unprefixed <a href="https://status.modern.ie/fullscreenapi">Fullscreen API</a>,</li>
<li><a href="https://status.modern.ie/touchevents">Touch Events API</a>,</li>
<li><a href="https://status.modern.ie/daterelatedinputtypes">HTML5 date inputs</a> (behind a flag),</li>
<li><a href="https://status.modern.ie/csstransitionsanimationsforsvgelements">CSS transitions &amp; animations for SVG</a> (behind a flag), and</li>
<li><a href="https://status.modern.ie/filters">CSS filters</a> (behind a flag).</li>
</ul>


<p><a href="https://remote.modern.ie/">RemoteIE</a> should be updated soon too.</p>
<p><a rel="full-article" href="http://blogs.msdn.com/b/ie/archive/2015/03/18/rendering-engine-updates-in-march-for-the-windows-10-technical-preview.aspx">Read on IEBlog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Opera Mini Server Upgrade]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/opera-mini-server-upgrade/"/>
				<updated>2015-03-18T15:12:32-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/opera-mini-server-upgrade</id>
				<content type="html"><![CDATA[<p>The server-side Presto rendering engine that drives Opera Mini has gotten a major upgrade, introducing some great new features including</p>

<ul>
<li><a href="http://www.w3.org/TR/css3-flexbox/">flexbox</a></li>
<li><a href="http://www.w3.org/TR/css3-values/#rem-unit">rem units</a>, and</li>
<li><a href="https://dev.opera.com/blog/opera-mini-server-upgrade/#ecmascript-5">a bit of ECMAScript 5</a>.</li>
</ul>


<p>HTML5 input types are on the docket. They won’t be displayed properly in clients until they get an upgrade, but the parse is aware of them now and they will fall back to &ldquo;text&rdquo; inputs until the client roll-out happens.</p>
<p><a rel="full-article" href="https://dev.opera.com/blog/opera-mini-server-upgrade/">Read on Dev.Opera&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[An Analytics Primer for Developers]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/an-analytics-primer-for-developers/"/>
				<updated>2015-03-18T15:09:15-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/an-analytics-primer-for-developers</id>
				<content type="html"><![CDATA[<p>This is a fantastic overview of the various analytics reporting options available for developers along with a list of pros and cons for each. Highly recommended reading!</p>
<p><a rel="full-article" href="https://hacks.mozilla.org/2015/03/an-analytics-primer-for-developers/">Read on Mozilla Hacks&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Now the Internet Explorer Is Dead. Let’s Stop the Hate]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/links/now-the-internet-explorer-is-dead-lets-stop-the-hate/"/>
				<updated>2015-03-18T15:02:03-04:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/links/now-the-internet-explorer-is-dead-lets-stop-the-hate</id>
				<content type="html"><![CDATA[<p>A great post from <a href="https://twitter.com/teylorfeliz">Taylor Feliz</a> on why outdated browsers, in general, are more of a problem than Internet Explorer, specifically. He also ends with a great call to action:</p>

<blockquote><p>[L]et’s develop websites that are cross browser and supported by all major browsers as our job as web developers require it.  It is not our job to decide what browser is cool or not; we have to provide an accessible and working website to all users because cross browser development is as or more important that even a responsive design.</p></blockquote>
<p><a rel="full-article" href="http://admixweb.com/now-the-internet-explorer-is-dead-let-stop-the-hate/">Read on Admix Web Magazine&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
</feed>
