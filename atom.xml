<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Aaron Gustafson]]> Latest Posts &amp; Links</title>
	<link href="http://aaron-gustafson.com/atom.xml" rel="self"/>
	<link href="http://aaron-gustafson.com/"/>
	<updated>2015-03-05T14:11:08-05:00</updated>
	<id>http://aaron-gustafson.com/</id>
	<author>
		<name><![CDATA[Aaron Gustafson]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
		
			<entry>
				<title type="html"><![CDATA[Sans Bullshit Sans]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/sans-bullshit-sans/"/>
				<updated>2015-03-05T14:06:53-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/sans-bullshit-sans</id>
				<content type="html"><![CDATA[<p>View content minus the jargon. ’Nuff said.</p>

<p><figure id="fig-2015-03-05-01" class="media-container"></p>

<pre><code>&lt;img src="http://www.sansbullshitsans.com/img/sans-bullshit-sans-in-action.gif" alt=""&gt;
</code></pre>

<p><figure></p>
<p><a rel="full-article" href="http://www.sansbullshitsans.com/">Read on Leveraging the synergy of ligatures&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Ice Cream Sandwich Support Deprecation]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/ice-cream-sandwich-support-deprecation-the-chromium-projects/"/>
				<updated>2015-03-04T14:50:43-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/ice-cream-sandwich-support-deprecation-the-chromium-projects</id>
				<content type="html"><![CDATA[<p>So Google will not ship a version of Chrome newer than 42 for Ice Cream Sandwich (Android 4.0). Queue <a href="http://forums.theregister.co.uk/forum/1/2015/03/04/google_chrome_android_4/">the wailing and gnashing of teeth</a> or just adopt progressive enhancement and move on. Browser and device proliferation is not a problem, myopic development practices are.</p>
<p><a rel="full-article" href="http://www.chromium.org/Home/ice-cream-sandwich-support-deprecation-faq">Read on The Chromium Projects&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Accessibility Resources for Developers]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/accessibility-resources-for-developers/"/>
				<updated>2015-03-02T12:31:33-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/accessibility-resources-for-developers</id>
				<content type="html"><![CDATA[<p>This is a treasure trove of software development resources—Web and otherwise—compiled by Jeff Petty.</p>
<p><a rel="full-article" href="http://social.technet.microsoft.com/wiki/contents/articles/28725.accessibility-resources-for-developers.aspx">Read on TechNet Wiki&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Dropdown Menus With More Forgiving Mouse Movement Paths]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/dropdown-menus-with-more-forgiving-mouse-movement-paths/"/>
				<updated>2015-02-27T15:10:09-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/dropdown-menus-with-more-forgiving-mouse-movement-paths</id>
				<content type="html"><![CDATA[<p>Chris Coyier put together a nice overview of ways to reduce user frustration when dealing with dropdown and flyout menus because, you know, some people still use a mouse.</p>
<p><a rel="full-article" href="https://css-tricks.com/dropdown-menus-with-more-forgiving-mouse-movement-paths/">Read on CSS Tricks&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Keeping `srcset` and `sizes` Under Control]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/keeping-srcset-and-sizes-under-control/"/>
				<updated>2015-02-27T14:54:19-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/keeping-srcset-and-sizes-under-control</id>
				<content type="html"><![CDATA[<p>Matt Wilcox walks through his methodical process for managing <code>srcset</code> and <code>sizes</code>. It’s a good read an will be helpful for keeping you from being unnecessarily verbose (or getting to granular).</p>
<p><a rel="full-article" href="https://mattwilcox.net/web-development/keeping-srcset-and-sizes-under-control">Read on Matt Wilcox’s Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Can We Please Stop Fighting the Native vs. Web App Wars?]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/native-vs-web-apps-ceasefire/"/>
				<updated>2015-02-27T12:27:14-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/native-vs-web-apps-ceasefire</id>
				<content type="html"><![CDATA[<p>Matt Asay does a great job dispelling some of the myths frequently spouted in the Web vs. native debate. It’s definitely worth a read.</p>
<p><a rel="full-article" href="http://readwrite.com/2015/02/27/native-vs-web-apps-ceasefire">Read on ReadWrite&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[A Break From the Past: The Birth of Microsoft’s New Web Rendering Engine]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/a-break-from-the-past-the-birth-of-microsoft/"/>
				<updated>2015-02-26T20:08:16-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/a-break-from-the-past-the-birth-of-microsoft</id>
				<content type="html"><![CDATA[<p><a href="https://twitter.com/morris_charles">Charles Morris</a> wrote a lengthy post about the germination of Microsoft’s new browser rendering engine. If you ever wondered where <del>babies</del> <ins>browsers</ins> come from, this is full of insights.</p>

<p>On a side note, this is one of the most exciting aspects of the new browser (and new Microsoft) for me:</p>

<blockquote><p>Our mission to create a Web that “just works” won’t be successful without your help.</p></blockquote>
<p><a rel="full-article" href="http://blogs.msdn.com/b/ie/archive/2015/02/26/a-break-from-the-past-the-birth-of-microsoft-s-new-web-rendering-engine.aspx">Read on IEBlog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Apple, Business, and Standards]]></title>
				<link href="http://aaron-gustafson.com/notebook/apple-business-and-standards/"/>
				<updated>2015-02-26T10:44:40-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/apple-business-and-standards</id>
				<content type="html"><![CDATA[<p>At <a href="http://www.codeandcreativity.com/events/2015-02-24">Tuesday night’s Code &amp; Creativity</a>, digital governance expert <a href="https://twitter.com/lwelchman">Lisa Welchman</a> equated digital projects to an atom. Content, IA, project management, networking, graphic design, application development, performance, and other concerns are flying this way and that like electrons—a swirling mass of energy and velocity. What holds this chaos together and keeps the electrons from flying off in all directions is the magnetic pull of protons in the nucleus of the atom.</p>

<!-- more -->




<figure id="fig-2015-02-26-01" class="media-container">
    <img src="http://aaron-gustafson.com/i/posts/2015-02-26/atom-sm.jpg"
         srcset="/i/posts/2015-02-26/atom-lg.jpg 800w, /i/posts/2015-02-26/atom-sm.jpg 320w"
         alt="A slide from Lisa Welchman’s talk showing Web Standards and KPI at the center of the project “atom”."
         >
</figure>


<p>In Lisa’s analogy, the protons of a digital project are Web standards and Key Performance Indicators (KPIs). She believes that without these key ingredients, projects will often career out of control. Her reasoning? We all need to know how we should be doing things in order to work together well (Web standards) and we need to know what our expectations are for the project to be successful (KPI).</p>

<p>This really resonated with me. Mainly, it resonated because I am a Web standards guy, but I also believe in the importance of standards across the board. I think projects need copywriting standards, design standards, performance standards, coding standards, and many other kinds of standards as well. Standards hold a project together. For real.</p>

<p>That’s why <em>Web</em> standards are so important.</p>

<p>Without standards, the Web was <a href="http://en.wikipedia.org/wiki/Browser_wars">an unruly mass of spaghetti code</a>.  I started working on the Web in 1996. I know, I lived it.</p>

<p>We used to deliver separate browser-specific JavaScript and CSS files to different User Agents. Our HTML code had to be 3-4 times as hefty to support all of the various ways browsers had decided to implement the same features. It was horrible and made building anything remotely interesting a truly painful endeavor.</p>

<p>Then browser makers got together to codify HTML into a generally agreed-upon set of elements and attributes that would allow authors like me to write pages that would Just Work™. That work extended into CSS, and so on, and so forth. I can’t thank them enough for doing that.</p>

<p>Tuesday also saw the W3C officially make <a href="http://www.w3.org/TR/pointerevents/">Pointer Events</a> a recommendation. I’d always liked the idea of Pointer Events because it abstracts the traditional concept of a click into a generic interaction that could be triggered by a mouse, a finger, a pen, an eye movement, or any other interaction method we come up with in the future. Sure, I work for Microsoft now—they proposed this idea—but that isn’t the reason I like the concept. I like it because it doesn’t tie us down to a single way of interacting with Web content that necessitates the creation of new specs when new interaction methods are invented. It’s future friendly and embraces the &ldquo;continuum of experience&rdquo; I evangelize incessantly.</p>

<p>When Pointer Events were first proposed, there was a lot of support behind them. Obviously Microsoft was on board, but Mozilla was too. And Google was all about Pointer Events for a while and was already using them when <a href="https://code.google.com/p/chromium/issues/detail?id=162757#c64">they did an abrupt  about-face and decided they were ripping them out of Blink in favor of overhauling Touch Events</a> (which Apple supports and which Pointer Events were intended to supersede).</p>

<p>And so now we have a recommendation from the W3C that browsers implement Pointer Events. <a href="http://blog.jquery.com/2015/02/24/getting-on-point/">Developers want them</a> and it seems Apple doesn’t. And because Apple doesn’t want them, Google doesn’t want them now either. To quote Rick Byers (of Google) in <a href="https://lists.w3.org/Archives/Public/public-pointer-events/2014JulSep/0071">a Pointer Events meeting in late 2014</a>:</p>

<blockquote><p>No argument that PE is more elegant. If we had a path to universal input that all supported, we would be great with that, but not all browsers will support PE. If we had Apple on board with PE, we&rsquo;d still be on board too. The equation has shifted for us.</p></blockquote>

<p>So, effectively, Apple is holding the Web back. <a href="https://twitter.com/tkadlec">Tim Kadlec</a> wrote <a href="http://timkadlec.com/2015/02/apples-web/">a great piece discussing the core issue at play here</a>:</p>

<blockquote><p>Let’s set any opinions about Pointer Events aside. Frankly, I need to do a <em>lot</em> more digging here before I have any sort of strong opinion in one direction or another. There is a bigger issue here. We have a recurring situation where all vendors (save for Apple) show interest in standard, but because Apple does not express that same interest, the standard gets waylaid.</p></blockquote>

<figure id="fig-2015-02-25-02" class="media-container media-container--right">
    <img src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/200px-Yin_yang.svg.png"
         srcset="http://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/800px-Yin_yang.svg.png 800w, http://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/400px-Yin_yang.svg.png 400w, http://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Yin_yang.svg/200px-Yin_yang.svg.png 200w"
         alt="Yin and yang."
         >
</figure>


<p>This whole thing has caused quite a kerfuffle in the Web community. Obviously, some people are demonizing Apple (and, by proxy, Google) for holding us back. Others are quick to excuse Apple because of their history of pushing the Web forward (see CSS transitions, animations, etc.).<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Personally, I don’t think anything is ever truly black and white. Every company does some good things and some bad things. To channel Lisa Welshman again, it’s like yin and yang: The light has a little bit of the dark in it, and the dark has a little bit of the light in it.</p>

<p>Generally, I’ve found that Apple tends to do what is best for Apple, without considering how it affects designers, developers, or the Open Web. On this issue however, I just haven’t figured out their angle yet.</p>

<p>Some of their past decisions have offered a clear view into their motivations. Take offline for instance. Apple supports the <a href="http://www.w3.org/TR/html5/browsers.html#offline">Application Cache API</a> (as <a href="http://caniuse.com/#feat=offline-apps">most modern browsers do</a>), but there’s a catch: You can’t store audio files in the cache. That makes it nearly impossible to build a decent game in HTML because you won’t get sound effects if you aren’t connected to the Web. But for Apple it makes perfect sense: They sell games in the App Store.</p>

<p>Their motivations behind other decisions are more murky, however. For example, Safari implements the <a href="https://html.spec.whatwg.org/multipage/forms.html#client-side-form-validation">HTML5 Form Validation API</a>, which means it knows if a field is valid or invalid. The catch? It won’t halt the submission of an invalid form. <a href="http://caniuse.com/#search=form%20validation">Every other modern browser acts as you’d expect.</a><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> I don’t get it. I used to think/hope they just had not figured out how they wanted to handle notifying the user of the error, but it’s been like this for about 5 years.</p>

<p>I’ll let Tim jump in again here:</p>

<blockquote><p>Apple has a very, very strong influence over what standards get adopted and what standards do not. Partly it’s market share, partly it’s developer bias (see, for example, how other vendors eventually felt forced to start supporting the <code>webkit</code> prefix due to vendor prefix abuse).</p>

<p>Apple simply does not play well with other vendors when it comes to standardization. The same sort of things we once criticized Microsoft for doing long ago, we give Apple a pass on today. They’re very content to play in their own little sandbox all too often.</p></blockquote>

<p>He’s channeling <a href="https://adactio.com/journal/5442/#comment438">a bit of Remy Sharp there</a> (circa 2012):</p>

<blockquote><p>When are we, as a web development community, going to stop giving Apple a free fucking pass?</p>

<p>They’re consistently lacking in the open discussion in to improving the gateway to the web: the browser. Sure, they landed an impressive mobile browsing experience back when the iPhone launched and it’s a great device, but there’s some serious questioning about whether they’re purposely cock-blocking web development and purposely hindering our advancement as a web industry.</p>

<p>WebGL is in mobile Safari, yet only available if accessed via a WebView object, not the real Safari (which is a WebView anyway…). It was recently discovered that they moved all web data storage (Web Storage, Appcache, etc) in a temporary data store meaning that it can be wiped at any time without warning.</p>

<p>Even the mighty PPK who tells entire browser vendors “fuck you”, doesn’t call Apple out, allowing them to slither on.</p>

<p>Why is it we continue to allow Apple to get away with it? And can this ever change?</p></blockquote>

<p>As Tim points out, Apple certainly isn’t the only company that plays games when it comes to standards:</p>

<blockquote><p>The other vendors aren’t exactly perfect either. The Microsoft folks, no doubt reeling from all the negativity aimed at them over the years, have more than once been content to let everyone else duke it out over a standard, only getting involved late when a consensus has been reached. The Blink folks, despite being the best positioned to take a stand, have been happy to play the “Apple won’t do it so I guess we won’t either” card on multiple occasions.</p></blockquote>

<p>But he’s also quick to highlight the disappointing reality about Apple with respect to the other browser vendors:</p>

<blockquote><p>It’s easy to reach the Mozilla, Google and Microsoft folks to discuss their thoughts on these emerging standards. That’s a much harder thing to do with the Apple crew.</p></blockquote>

<p>Apple is very much a black box and their processes are incredibly opaque. Now I’m no hater, I use their products daily.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, but I am also not an apologist. I think relationships are improved with honesty and openness. I honestly wish Apple’s processes—at least when it comes to the Web—were more open.<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> Heck, they often don’t even show up to meetings at the W3C. If we knew what they were thinking or why they were doing things, we could at least understand where they were coming from rather than having to speculate about their motivations. Whether we agree or not is irrelevant.</p>

<p>Regardless, we are where we are and I can’t help but wonder one thing: <em>If we stop giving Apple a free pass and continue marching forward without them, will they eventually be forced to scramble to catch up like Microsoft did when IE6 sat on the shelf for so long?</em> I don’t know what the answer is, but I sincerely hope they come around and begin to treat the Web with the respect it deserves before that happens.</p>

<p>When browsers refuse to implement Web standards, we all lose. And we take one step closer to the swirling pit of chaos and spaghetti code we thought we’d put behind us.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>All of which were (in true Apple style) developed in secret and then bestowed upon the world in a grand spectacle.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Ok, Opera Mini doesn’t, but Opera Mini is also a different sort of browser. It is a proxy browser and the proxy handles all of the back and forth between the browser and the website’s origin server(s).<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>I am composing this post on a Mac… provided by Microsoft. Yes, you read that correctly.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>I have felt the same way about Microsoft for years because I knew the great work they were doing behind the curtains. Part of the reason <a href="http://aaron-gustafson.com/notebook/ch-ch-ch-changes/">I joined them earlier this month</a> was because they have been opening up and I want to encourage and nurture that.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Consider How Your Forms Read]]></title>
				<link href="http://aaron-gustafson.com/notebook/consider-how-your-forms-read/"/>
				<updated>2015-02-23T11:21:24-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/consider-how-your-forms-read</id>
				<content type="html"><![CDATA[<p>While listening to <a href="http://www.radiolab.org/story/trust-engineers/">Radiolab’s &ldquo;The Trust Engineers&rdquo;</a>, I’ll admit I got a little excited when they started talking about web form performance. And no, not &ldquo;performance&rdquo; in the time-to-download sense, but &ldquo;performance&rdquo; in terms of how well the forms performed in attempting to capture meaningful, actionable data.</p>

<!-- more -->


<p>I’ll set the scene: It’s the holiday season in 2011 and people are uploading photos to Facebook like crazy. In the span of a few days, Facebook processed more photo uploads than are contained in the entirety of Flickr. Seriously, that’s a lot of photos.</p>

<p>Anyway, one unintended consequence of this deluge of photo uploads was a significant uptick in <a href="https://www.facebook.com/help/189722821075378">photo reports</a>. Facebook received millions of them, but they made no sense: Moms holding babies reported for harassment, pictures of puppies reported for hate speech, and so on. Roughly 97% of these photo reports were miscategorized.</p>

<p>When Facebook engineers reached out to some of the users who had reported these photos for a bit more background behind their decisions, they discovered that many of the reports were because users didn’t want the photo on Facebook reasons other than the options provided. In some cases it was because they didn’t like how they looked in the photo and in others it was because the photo was of an ex or even a beloved pet they shared with an ex.</p>

<p>The existing photo reporting form had not done a good job of accounting for these more personal reasons for wanting a photo removed, so the Facebook engineers went to work. They added a step that asked <em>How does this photo make you feel?</em> The options were simple:</p>

<ul>
<li>Embarrassing</li>
<li>Upsetting</li>
<li>Saddening</li>
<li>Bad Photo</li>
<li>Other</li>
</ul>


<p>The &ldquo;other&rdquo; option also provided a free-response field to fill in.</p>

<p>With this system in place, they found that 50% of reporters would choose one of the provided options. That was pretty helpful, but there was still a problem: 34% of the &ldquo;other&rdquo; respondents were writing &ldquo;It’s embarrassing&rdquo; in the blank rather than choosing the &ldquo;embarrassing&rdquo; option already provided.</p>

<p>What they realized was that people were not identifying with the &ldquo;embarrassing&rdquo; text (or may have even thought it was referring to them, rather than assuming the implied &ldquo;It’s&rdquo;). A subtle shift in language was needed, so they changed the label to <em>Please describe the photo</em>. And they updated the options to mirror how people actually talk:</p>

<ul>
<li>It’s embarrassing</li>
<li>It’s a bad photo of me</li>
<li>It makes me sad</li>
</ul>


<p>With this subtle change, they were able to increase the percentage of photo reporters who chose one of the options provided to a whopping 78%.</p>

<p>Sometimes we feel compelled to create forms that are very clinical. In the survey world we’re often taught to limit the &ldquo;personality&rdquo; of our forms in order to avoid influencing the responses.</p>

<p>That said, we need to remember that we are authoring interfaces that will be used by actual people. When we are creating forms that don’t require that kind of scientific rigor, we can (and should) do whatever we can to make the interaction more human.</p>

<p>Ask real questions: <em>What’s your name?</em>, <em>What’s your email?</em>, and <em>How would you prefer we contact you?</em> are far more friendly than <em>Name</em>, <em>Email</em>, and <em>Contact Preference</em>.</p>

<p>A little thoughtful consideration for the people who need to fill in your form goes a long way toward making them feel at ease and also helps to ensure the feedback you receive is accurate, valuable, and actionable.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Who Should Pay?]]></title>
				<link href="http://aaron-gustafson.com/notebook/who-should-pay/"/>
				<updated>2015-02-18T23:35:06-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/who-should-pay</id>
				<content type="html"><![CDATA[<p>In more than a handful of conversations lately, it’s become quite clear that we, the web development community, are prioritizing our own convenience and our own time over that of our users. With our industry’s focus on “user-centered design”, you might find that hard to believe, but it’s true.</p>

<!-- more -->


<p>Here’s one example. In reaction to <a href="http://aaron-gustafson.com/notebook/css-variables-are-a-bad-idea/">my post on why I think CSS variables are a bad idea</a>, <a href="http://sass-lang.com">SASS</a> core team member <a href="https://twitter.com/chriseppstein/">Chris Eppstein</a> had this to say:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/AaronGustafson">@AaronGustafson</a> Authoring CSS shouldn’t be so onerous as to require the use of a preprocessor.</p>&mdash; Chris Eppstein (@chriseppstein) <a href="https://twitter.com/chriseppstein/status/567756897105620992">February 17, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>Fundamentally, I agree with his sentiment: A preprocessor should <em>not</em> be a requirement for authoring CSS. Thankfully, <em>it never was</em>; you can build amazing things using only hand-authored CSS. And if you find a preprocessor helpful to your process for one reason or another, great. But using a preprocessor never has been (nor should it ever be) a requirement.</p>

<p>But Chris was not railing against preprocessors. Instead, he is echoing a sentiment held by many people in the preprocessor community. He feels CSS is not as powerful as it could/should be and he hopes that one day soon preprocessors won’t need to exist because CSS will have all of the features they offer natively. Like variables.</p>

<p>I used to feel that way. I used to want variables… and mixins… and functions… and loops… and declaration block-level inheritance. But I’ve changed my mind.</p>

<p>Don’t get me wrong, I love these constructs. I use them nearly every day in the SASS I write and I am incredibly thankful for the hard work that has gone into their creation and maintenance.  Chris alone has probably saved me several weeks worth of work over the last four years through his contributions to SASS and <a href="http://compass-style.org/">Compass</a>. I definitely owe him a beer (or three).</p>

<p>Ok, so if my issue is not with the idea of programmatically generating styles, why would I not want these to be part of CSS, the <i>lingua franca</i> for design on the Web? Well, it’s pretty simple: Converting all of these constructs into something that is actionable by the browser takes time and processing power. Someone has to pay that cost and I wouldn’t feel right passing that cost on to my end users if there are better options.</p>

<p>This is a topic I bring up often in my conference talks and workshops: Every decision we make affects the user experience in some way.</p>

<p>When we add another JavaScript library or plugin, it’s no big deal from our perspective. We tend to have fast connections and faster processors. For our users it’s another story: It’s one more thing to request. One more thing to download. One more script to parse. One more thing holding up page rendering. One more reason to leave our site and seek out a competitor who actually values their time.</p>

<p>When we hide an <code>img</code> in the small screen version of our responsive design using <code>display: none</code>, the cost to us is quite minimal. It’s just one little declaration. What’s the harm? But the cost to our end users is quite significant: Longer load times, slower performance, and (in some cases) in real dollars if they are on a <a href="http://blog.kaspersky.com/cost-aware/">metered data connection</a>. And they don’t even get to see the image they paid for!</p>

<p>When we decide to build a site using a front-end JavaScript MVC framework, it can make the development process go so much faster for us and we can reduce our need for a robust back-end infrastructure. I mean everyone has JavaScript these days… <a href="http://aaron-gustafson.com/notebook/a-fundamental-disconnect/">the browser is the new VM</a>. But when we do this, our users suffer because we don’t give their browsers real HTML. Instead we force them to download a hefty framework so we can move all of the processing we would normally handle on a much faster, dedicated server to their questionably-capable machine instead. Oh, and if the browser encounters an error while parsing or executing the JavaScript execution, they don’t get anything at all. Welcome to the Modern Web™!</p>

<hr>


<p>When I look around, I see our community spending a lot of time coming up with new tools and techniques to make our jobs easier. To ship faster. And it’s not that I’m against efficiency, but I think we need to consider the implications of our decisions. And if one of those implications is making our users suffer—or potentially suffer—in order to make our lives easier, I think we need to consider their needs above our own.</p>

<p>So yes, I would love a world where preprocessors are unnecessary, but I would much rather spend a few seconds (or even a few minutes) transcompiling my SASS into CSS in order to save my users even a few milliseconds. It’s the same reason I optimize my images, minify my JavaScript, use Gzip, and lazy load design and experience enhancements only in contexts where they provide a real benefit.</p>

<p>Our users should never foot the bill for our convenience. We need to put their needs above our own.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[I Don’t Want to Teach the World to Code… I Want to Teach the World to Problem Solve]]></title>
				<link href="http://aaron-gustafson.com/notebook/i-dont-want-to-teach-the-world-to-code/"/>
				<updated>2015-02-15T17:51:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/i-dont-want-to-teach-the-world-to-code</id>
				<content type="html"><![CDATA[<p>It seems that every other day a new code school opens it doors. In my mid-sized city, Chattanooga, there are no fewer than three businesses centered around teaching “coding” classes<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> that I am aware of. And there are at least a half-dozen free or community driven programs and camps on top of that. Most are aimed at youth, but some offer adult education as well. And that, of course, is over and above what&rsquo;s available in our public and private schools (which is considerable) and a plethora of online options.</p>

<!-- more -->


<p>On one hand I think this is great. I love to code and I love to share my knowledge of that world with anyone who will listen (I’m sorry, Kelly). Also, as someone who ran a web design studio, I know first hand how hard it is to find talented people to hire. More coders equals a larger talent pool; it&rsquo;s simple math.</p>

<p>Currently—at least here in the U.S.—the numbers aren&rsquo;t where we need them to be. We just aren&rsquo;t graduating enough STEM (Science, Technology, Engineering, and Math) students. And the pressure to fill open positions has led to a lot of outsourcing and an increased demand for employment visas. As an unemployed or unhappy worker, making yourself employable as a coder sounds like a win-win.</p>

<p>Couple this with the constant barrage of news about startup acquisitions and funding rounds and it certainly seems like learning to code is your key to financial stability if not extreme wealth. (The “American Dream,” right?) But it’s not.</p>

<p>As Jerry Davis pointed out so deftly in the <cite>Harvard Business Review</cite>, <a href="http://blogs.hbr.org/2014/03/why-do-app-developers-still-live-with-their-moms/">the vast majority of startups don&rsquo;t succeed</a>. Learning to code is not a guarantee of wealth and success. And, let’s be honest, not everyone is wired for coding and that&rsquo;s okay.</p>

<p>So I’m not sure everyone needs to learn to code. That said, I think this movement (if you can call it that) has merit.</p>

<p>First off, on the Web side of things, I think learning to code can be empowering. The Web is for everyone and I love to see more and more people using it as a tool to amplify their voices and to build community across the globe. So for that reason alone I&rsquo;m thrilled these programs exist.</p>

<p>The other reason I like that people are learning to code is that it changes how they see and deal with problems.</p>

<p>As a programmer, I am forced to break lumbering, gnarly problems into simpler, accomplishable tasks. I&rsquo;m forced to think about cause and effect, of process, of the steps required to achieve the desired outcome.</p>

<p>I also experience failure. Constantly. I&rsquo;ve learned to find the errors in my own logic, to second guess myself, to refine and improve, to refactor my code and my brain. This constant refinement helps me achieve a deeper understanding of my tools and my medium.</p>

<p>To me, those lessons (taught to me through nearly 20 years of coding) are invaluable. These are the sorts of lessons I wish they taught in school, but sadly the U.S. has largely done away with reason and critical thinking in favor of memorization and regurgitation. So maybe it&rsquo;s something we need to learn at home. Or in a coding class.</p>

<p>Regardless, if the world was filled with curious people who asked questions, applied logic, and refined their understanding of the challenges they see every day, I can&rsquo;t help but think we would all be far better off.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I should note that I am lumping a bunch of stuff into the umbrella of “coding” because some of these teach front-end web technologies, others teach those plus back-end stuff in PHP or Python, and others teach maker-style classes focused around robotics and DIY electronics like Arduino.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Three Worthwhile Posts on Progressive Enhancement]]></title>
				<link href="http://aaron-gustafson.com/notebook/three-worthwhile-posts-on-progressive-enhancement/"/>
				<updated>2015-02-13T10:14:40-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/three-worthwhile-posts-on-progressive-enhancement</id>
				<content type="html"><![CDATA[<p>Jason Garber has penned a series of posts on progressive enhancement. Here’s a quick rundown on what they cover and why you should read them.</p>

<!-- more -->


<h2><a href="http://sixtwothree.org/posts/designing-experience-layers">Designing Experience Layers</a></h2>

<p>In his first post, Jason picks up on a drumbeat I’ve been hammering on for years: we need to consider experience a continuum, not a monolithic thing.</p>

<blockquote><p>Today’s Web makes no guarantees. Every bit of code—HTML, CSS, and JavaScript—shipped from a server across the wire acts as a suggestion as to how the browser should interpret and display content. More often than not, everything works planned, but for any number of reasons, a browser could fail to request or render a particular asset.</p></blockquote>

<p>In other words, get to know <a href="http://adaptivewebdesign.info/1st-edition/chapter-1.html#adapt-or-die">fault tolerance as it applies to web design</a> and <a href="http://aaron-gustafson.com/notebook/a-fundamental-disconnect/">don’t make any assumptions about how your content will be rendered/experienced</a>.</p>

<p>His conclusion is an important one:</p>

<blockquote><p>Approaching design through the lens of experience layers is the design strategy for the Web; one that’s better for users and designers alike.</p></blockquote>

<p>Amen!</p>

<h2><a href="http://sixtwothree.org/posts/in-defense-of-progressive-enhancement">In Defense of Progressive Enhancement</a></h2>

<p>In his follow-up, Jason defends his position against <a href="http://viget.com/inspire/designing-experience-layers#comment-1847156038">a lengthy comment from his supervisor at Viget</a>. Jason’s responses are dead on:</p>

<ol>
<li>JavaScript is not a baseline (or a given) and</li>
<li>When large sites put their eggs in the JS basket, they set a bad example for other developers.</li>
</ol>


<p>His summation is perfect:</p>

<blockquote><p>I remain unconvinced that abandoning progressive enhancement in favor of JavaScript-first development is better for users or is the direction the Web is inevitably heading. It’s our responsibility to do right by the billions already online and the next billion preparing to come online. We can achieve this by designing robust, resilient, layered experiences using techniques like progressive enhancement.</p></blockquote>

<p>Again, fantastic.</p>

<h2><a href="http://sixtwothree.org/posts/the-practical-case-for-progressive-enhancement">The Practical Case for Progressive Enhancement</a></h2>

<p>Continuing the thread, Jason assembles more reasons to adopt the progressive enhancement philosophy.</p>

<ol>
<li><strong>The “Moral” Argument for Progressive Enhancement</strong> &ndash; Personally, I think Jason gives in too easily on this. Access to content is <a href="http://www.pewinternet.org/topics/digital-divide/">a social justice issue</a> and that is nothing to gloss over. In some cases it is also a <a href="http://www.section508.gov/">legal requirement</a>.</li>
<li><strong>The “Cost” of Progressive Enhancement</strong> &ndash; Jason does a good job addressing the costs (monetarily and temporally) associated with adopting progressive enhancement in terms of building, testing, and supporting websites. As he says, it is more costly to &ldquo;bolt on&rdquo; accessibility and progressive enhancement at the end of a project. He is also correct in his assertion that progressively-enhanced websites actually require less testing. And when you <a href="http://bradfrost.com/blog/mobile/support-vs-optimization/">draw a stark line between support and optimization</a>, support for additional browsers and devices also becomes far less costly. What Jason was missing was numbers to back all this up. <a href="http://blog.easy-designs.net/archives/the-true-cost-of-progressive-enhancement/">I have those numbers</a>. Enjoy.</li>
<li><strong>Practicality</strong> &ndash; Finally, Jason calls out games and their ilk as edge cases. He correctly asserts that the vast majority of properties on the Web could easily be built following progressive enhancement. Sure, you might not build a Photoshop clone using progressive enhancement, but how many of you are building an image editor for the Web? I didn’t think so.</li>
</ol>


<h2>Conclusion</h2>

<p>In all, this was a nice little series. Great work Jason! If you want to dig into this progressive enhancement stuff a bit more, you can read the entirety of my award-winning book <a href="http://adaptivewebdesign.info/1st-edition/"><cite>Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement</cite> online, for free</a>.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Five Easy Ways to Be a Better Web Professional]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/five-easy-ways-to-be-a-better-web-professional/"/>
				<updated>2015-02-12T21:05:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/five-easy-ways-to-be-a-better-web-professional</id>
				<content type="html"><![CDATA[<p>My old friend Jason Garber—who I, sadly, haven’t seen in probably a decade—came up with a great list of &ldquo;professional self-improvement tips for anyone working on the Web today&rdquo;. I’ll give you the synopses, but you should do yourself a favor and read the full post for the background:</p>

<ol>
<li>Know Your History</li>
<li>Know Your Medium</li>
<li>Respect Those Who Came Before You</li>
<li>Respect Your Audience</li>
<li>Get Involved</li>
</ol>


<p>I would absolutely echo these to anyone looking to become (or improve as) a web professional.</p>
<p><a rel="full-article" href="http://sixtwothree.org/posts/five-easy-ways-to-be-a-better-web-professional">Read on Jason Garber’s Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Client-side MVC's Major Bug]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/client-side-templatings-major-bug/"/>
				<updated>2015-02-12T21:05:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/client-side-templatings-major-bug</id>
				<content type="html"><![CDATA[<p>Astute observations (as always) from <a href="http://twitter.com/tkadlec">Tim Kadlec</a>. I’ll let Tim set the scene:</p>

<blockquote><p>Over the past year I conducted performance audits on a handful of sites that all used client-side MVC’s, typically Angular but not always. Each site had their own optimizations that needed to take place to improve performance. Yet a pattern emerged: client-side MVC’s were the major bottleneck for each. It slowed down the initial rendering of the page (particularly on mobile) and it limited our ability to optimize the critical path.</p></blockquote>

<p>Obviously Tim knows what he’s talking about.</p>

<p>He goes on to bring in the voices of the Filament Group and PPK (both of whom I’ve <a href="http://aaron-gustafson.com/notebook/links/researching-the-performance-costs-of-javascript-mvc-frameworks/">linked to previously</a> <a href="http://aaron-gustafson.com/notebook/links/the-problem-with-angular/">for the same reasons</a>): lots of smart people have come to the conclusion that relying on client-side generation of web pages is a bad idea. Tim goes so far as to say “if your client-side MVC framework does not support server-side rendering, that is a bug” and I can’t help but agree.</p>

<p>His post is great, you should read it. Frankly, I wish I’d written it.</p>
<p><a rel="full-article" href="http://timkadlec.com/2015/02/client-side-templatings-major-bug/">Read on Time Kadlec’s Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Accessible Toggle-style Checkbox]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/accessible-toggle-style-checkbox/"/>
				<updated>2015-02-12T08:41:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/accessible-toggle-style-checkbox</id>
				<content type="html"><![CDATA[<p>This is, by far, the best implementation of a toggle slider checkbox replacement I&rsquo;ve seen.</p>
<p><a rel="full-article" href="http://codepen.io/personable/pen/stpwD">Read on Codepen&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Let’s Write Fast JavaScript]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/lets-write-fast-javascript/"/>
				<updated>2015-02-11T10:13:53-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/lets-write-fast-javascript</id>
				<content type="html"><![CDATA[<p>You may have already seen this piece from <a href="https://medium.com/@mdibaiee">Mahdi Dibaiee</a>, but if you haven’t it’s definitely worth a read. I also highly recommend <a href="https://twitter.com/slicknet">Nicholas Zakas</a>’ <a href="http://www.amazon.com/gp/product/059680279X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=059680279X&amp;linkCode=as2&amp;tag=easydesign-20&amp;linkId=EIBQXEP7I2PP5RQE">High Performance JavaScript</a> and <a href="https://twitter.com/amyhoy">Amy Hoy</a> &amp; <a href="https://twitter.com/thomasfuchs">Thomas Fuchs</a>’ <a href="http://javascriptrocks.com/">JavaScript Performance Rocks</a>.</p>
<p><a rel="full-article" href="https://medium.com/the-javascript-collection/lets-write-fast-javascript-2b03c5575d9e">Read on Medium&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[This Uncanny Valley of Voice Recognition]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/this-uncanny-valley-of-voice-recognition/"/>
				<updated>2015-02-11T10:09:17-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/this-uncanny-valley-of-voice-recognition</id>
				<content type="html"><![CDATA[<p>I am incredibly excited about the future of voice-based user experiences, but I also fully recognize that we’ve got a long way to go. This post from <a href="https://twitter.com/holman">Zach Holman</a> does a great job illustrating the issues we are currently dealing with. And it’s a fun read to boot!</p>
<p><a rel="full-article" href="http://zachholman.com/posts/uncanny-valley/">Read on Zach Holman’s Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Social Class, Power, and Selfishness: When and Why Upper and Lower Class Individuals Behave Unethically]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/social-class-power-and-selfishness/"/>
				<updated>2015-02-11T09:53:53-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/social-class-power-and-selfishness</id>
				<content type="html"><![CDATA[<p>In this fascinating paper, David Dubois, Derek Rucker, and Adam Galinsky explore the interplay between socioeconomic status and selfishness (or cheating). In the course of their study, they discovered that people at both ends of the spectrum cheat, but for different ends:</p>

<blockquote><p>[S]ocial class positively predicted unethical behavior; however, this relationship was only observed when that behavior was self-beneficial. When unethical behavior was performed to benefit others, social class negatively predicted unethical behavior; lower class individuals were more likely than upper class individuals to engage in unethical behavior. Overall, social class predicts people’s tendency to behave selfishly, rather than predicting unethical behavior per se.</p></blockquote>

<p>The second thing they discovered was that the cause of selfishness came from an individuals’ sense of power:</p>

<blockquote><p>Evidence for this relationship was provided in three forms. First, income, but not education level, predicted unethical behavior. Second, feelings of power mediated the effect of social class on unethical behavior, but feelings of status did not. Third, two distinct manipulations of power produced the same moderation by self-versus-other beneficiary as was found with social class.</p></blockquote>

<p>Fascinating stuff!</p>
<p><a rel="full-article" href="http://psycnet.apa.org/?&fa=main.doiLanding&doi=10.1037/pspi0000008">Read on Journal of Personality and Social Psychology&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The “Web Application” Myth]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/the-web-application-myth/"/>
				<updated>2015-02-10T19:39:53-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/the-web-application-myth</id>
				<content type="html"><![CDATA[<p>Christian Heilmann is dead-on in this post. It’s a long one, but worth reading. Here’s my favorite bit:</p>

<blockquote>
<p><em>What is an application?</em> To me, it is a tool that allows people to reach a certain goal in the most effective fashion. What matters is not what language or technology you build it in. What matters most is:</p>
<ul>
<li>that it is the right tool for the right audience,</li>
<li>that it does what is expected of it and not more,</li>
<li>that it is safe to use,</li>
<li>that it works in the environment it is most used in,</li>
<li>that it can be easily maintained without dependencies that only a few people know how to use,</li>
<li>that it is built with components that are reliable to use and not a “alpha” or “beta” or “not production ready” experimental technology</li>
<li>that we know how to maintain the thing, how to add new functionality and above all, fix security issues in the future without replacing it as a whole.</li>
</ul>

<p>These are the things we should concentrate on. To find the answer as to what format this “application” will be, we need a mixture of skills of people working on the product:</p>

<ul>
<li>researchers,</li>
<li>designers,</li>
<li>UX people,</li>
<li>content writers,</li>
<li>trainers to show people how to use the tool and how to put content in it afterwards and,</li>
<li>yes, of course, developers.</li>
</ul>

<p>And this is the scary part: <strong>this costs money and a lot of effort</strong>. It also means that we have to think about communicating and building teams that are good at bouncing ideas off one another and find a good consensus. It also means it will take longer to build this.</p>

<p>All of this is <em>anathema</em> to people who have to show off to venture capital companies and stakeholders. We have to move faster, we have to be better. Less people, more products, quicker iterations, more features. It doesn’t matter what the product does: the most important part is that you show that it evolves and changes constantly.</p>

</blockquote>

<p><a rel="full-article" href="https://medium.com/@codepo8/the-web-application-myth-69c6b1506515">Read on Medium&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Designing for the Elderly: Ways Older People Use Digital Technology Differently]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/designing-digital-technology-for-the-elderly/"/>
				<updated>2015-02-06T17:51:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/designing-digital-technology-for-the-elderly</id>
				<content type="html"><![CDATA[<p>We’re all aging. There’s no way to avoid it, no matter how much <a href="http://en.wikipedia.org/wiki/Growth_hormone">HGH</a> you consume. And as we age, our eyesight typically worsens, we lose some motor control, and our brains often don’t process data quite as fast as they did when we were 18 or even 30. As designers, we need to be cognizant of the needs of aging computer users.</p>

<p>Ollie Campbell has put together a great read on creating digital products that accommodate the aging population (estimated to top 19% of the US population by 2030). In it, he discusses things we should consider with respect to</p>

<ul>
<li>vision and hearing,</li>
<li>motor control,</li>
<li>device use,</li>
<li>relationships,</li>
<li>life stage,</li>
<li>experience with technology,</li>
<li>cognition,</li>
<li>memory,</li>
<li>attention, and</li>
<li>decision-making.</li>
</ul>


<p>It’s pretty exhaustive. You should definitely give it a read.</p>
<p><a rel="full-article" href="http://www.smashingmagazine.com/2015/02/05/designing-digital-technology-for-the-elderly/">Read on Smashing Magazine&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
</feed>
