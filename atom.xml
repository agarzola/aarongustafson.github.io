<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Aaron Gustafson Latest Posts &amp; Links]]></title>
	<link href="https://www.aaron-gustafson.com/atom.xml" rel="self"/>
	<link href="https://www.aaron-gustafson.com/"/>
	<updated>2016-01-06T15:30:07-05:00</updated>
	<id>https://www.aaron-gustafson.com/</id>
	<author>
		<name><![CDATA[Aaron Gustafson]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
		
			<entry>
				<title type="html"><![CDATA[Content & Display Patterns]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/content-display-patterns/"/>
				<updated>2016-01-06T14:58:58-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/content-display-patterns</id>
				<content type="html"><![CDATA[<p>Dan Mall’s excellent overview of decoupling content and display using structured data to make your sites more flexible.</p>
<p><a rel="full-article" href="http://danielmall.com/articles/content-display-patterns/">Read on Dan Mall&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Microsoft Readies Kill Switch for Internet Explorer 8, 9, and 10]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/microsoft-readies-kill-switch-for-internet-explorer-8-9-and-10/"/>
				<updated>2016-01-06T14:54:07-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/microsoft-readies-kill-switch-for-internet-explorer-8-9-and-10</id>
				<content type="html"><![CDATA[<p>Microsoft is end-of-life-ing IE8–10, but that doesn’t mean we should stop supporting them. Some people <a href="http://www.networkworld.com/article/2224510/microsoft-subnet/some-windows-xp-users-just-can-t-afford-to-upgrade.html">can’t upgrade for reasons way beyond their control</a>.</p>
<p><a rel="full-article" href="http://arstechnica.co.uk/information-technology/2016/01/microsoft-readies-kill-switch-for-internet-explorer-8-9-and-10/">Read on Ars Technica UK&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Problem With Progressive Enhancement]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/the-problem-with-progressive-enhancement/"/>
				<updated>2016-01-06T14:44:42-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/the-problem-with-progressive-enhancement</id>
				<content type="html"><![CDATA[<p>Alex Lande doesn’t believe optimizing for a no-JavaScript scenario makes sense, but he does believe in building a robust web experience pays huge dividends.</p>

<blockquote>
  <p>Progressive enhancement is a tool that will help you build faster, tougher sites. It is an investment in the strength and quality of your application. It will make your users happy because the app will still work, if imperfectly. It might just save you when disaster strikes, and if you’re interested in building the best websites possible, you should give it some thought.</p>
</blockquote>

<p>Eloquently put.</p>
<p><a rel="full-article" href="http://www.alexlande.com/articles/the-problem-with-progressive-enhancement/">Read on Alex Lande&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Affirming User Choice With Checkboxes]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/affirming-user-choice-with-checkboxes/"/>
				<updated>2016-01-06T14:24:31-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/affirming-user-choice-with-checkboxes</id>
				<content type="html"><![CDATA[<p>“Checkbox” form controls have long been a part of software. They enable users to provide a simple binary response—yes or no. On the Web, we often see them in two scenarios: confirmations and multiple choice.</p>

<!-- more -->

<h2 id="confirmation-checkboxes">Confirmation Checkboxes</h2>

<p>Standalone checkboxes are often employed to enable users to affirm a statement, as in <a href="#fig-2016-01-06-01">this example</a> from <a href="https://online.americanexpress.com/myca/logon/us/action/LogonHandler?request_type=LogonHandler&amp;Face=en_US#lilo_loginForm">the American Express login form</a> where a customer can indicate they’d like the site to remember them.</p>

<figure id="fig-2016-01-06-01" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/01.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/01.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /><figcaption>American Express’ login form offers users the option of being remembered. As that is a binary choice (e.g. yes or no), the checkbox makes sense.</figcaption></figure>

<p>Here’s a simplification of the markup they’re using:</p>

<div><script src="https://gist.github.com/d281f889a11634b45280.js?file=american-express-login-simplified.html"></script>
<noscript><pre><code>&lt;input type=&quot;checkbox&quot; id=&quot;lilo_checkBox&quot; name=&quot;REMEMBERME&quot;&gt;
&lt;label for=&quot;lilo_checkBox&quot;&gt;Remember Me&lt;/label&gt;</code></pre></noscript></div>

<p>This works really well, though I generally prefer to <a href="https://www.aaron-gustafson.com/notebook/labeled-with-love/#an-alternate-approach">combine explicit and implicit labeling</a> to simplify my CSS selectors and broaden their applicability. Here’s how I would rewrite this control:</p>

<div><script src="https://gist.github.com/d281f889a11634b45280.js?file=american-express-login-reimagined.html"></script>
<noscript><pre><code>&lt;label for=&quot;lilo_checkBox&quot;&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;lilo_checkBox&quot; name=&quot;REMEMBERME&quot;&gt;
  Remember Me
&lt;/label&gt;</code></pre></noscript></div>

<p>Regardless of the markup pattern itself, it’s important to note the explicit association of the form control and the <code>label</code> element (using the <code>for</code> attribute). You’ll also notice the input has a straightforward <code>name</code> value which will be submitted to the back end if the user ticks the box.</p>

<p>It’s worth noting that some back-end systems may require a value be submitted for the given variable name (in this case, “REMEMBERME”) regardless of whether the user has ticked the checkbox. If that’s a requirement, you can alter the pattern to use a hidden <code>input</code> as well:</p>

<div><script src="https://gist.github.com/d281f889a11634b45280.js?file=american-express-login-with-hidden.html"></script>
<noscript><pre><code>&lt;input type=&quot;hidden&quot; name=&quot;REMEMBERME&quot; value=&quot;no&quot;&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;lilo_checkBox&quot; name=&quot;REMEMBERME&quot; value=&quot;yes&quot;&gt;
&lt;label for=&quot;lilo_checkBox&quot;&gt;Remember Me&lt;/label&gt;</code></pre></noscript></div>

<p>The source order matters because with matching <code>name</code> values, the final submittable <code>value</code> will always be the one the back-end receives. With this setup, the <code>value</code> of “no” (from the hidden <code>input</code>) will be submitted by default. If the checkbox is ticked, its <code>value</code> is submitted instead, setting REMEMBERME to “yes”.</p>

<h2 id="multiple-choice-checkboxes">Multiple Choice Checkboxes</h2>

<p>The other way we often see checkboxes used is to enable users to choose zero or more items from a collection of options. Consider <a href="#fig-2016-01-06-02">this example</a> from <a href="http://chadevicelab.org/book-time">the Chattanooga Open Device Lab’s reservation form</a>. It allows users to choose the devices they’d like to include in their test matrix:</p>

<figure id="fig-2016-01-06-02" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/02.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/02.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/02.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/02.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /><figcaption>In this excerpt from the reservation form on the Chattanooga Open Device Lab website, users can choose to include gaming system options.</figcaption></figure>

<p>The markup they employ is pretty well-organized and straightforward: it’s a list of checkbox options.</p>

<div><script src="https://gist.github.com/d281f889a11634b45280.js?file=chaodl-checkbox-list.html"></script>
<noscript><pre><code>&lt;ul&gt;
  &lt;li&gt;
    &lt;label for=&quot;nintendo-ds-lite&quot;&gt;
      &lt;input type=&quot;checkbox&quot;
             name=&quot;reservation_requested_device[]&quot;
             id=&quot;nintendo-ds-lite&quot;
             value=&quot;Nintendo DS Lite (Upper Cabinet #13)&quot;
             data-checkbox-required=&quot;&quot;
             &gt;
      Nintendo DS Lite
    &lt;/label&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;label for=&quot;nintendo-wii&quot;&gt;
      &lt;input type=&quot;checkbox&quot;
             name=&quot;reservation_requested_device[]&quot;
             id=&quot;nintendo-wii&quot;
             value=&quot;Nintendo Wii (TV Area)&quot;
             data-checkbox-required=&quot;&quot;
             &gt;
      Nintendo Wii
    &lt;/label&gt;
  &lt;/li&gt;
  &lt;!-- list continues --&gt;
&lt;/ul&gt;</code></pre></noscript></div>

<p>As this is an instance where a user could choose more than one option, the back end needs to be able to capture that information in what’s called an “array”. An array, if you’re unfamiliar, is a collection of values. You’ll notice that the <code>name</code> given to each of these checkbox <code>input</code> elements is the same: “reservation_requested_device[]”. The square brackets (“[]”) at the end of the <code>name</code> are the magic bit that allows the values of <em>each</em> chosen “reservation_requested_device” checkbox to be submitted as the value of “reservation_requested_device”.</p>

<h2 id="applicable-attributes">Applicable Attributes</h2>

<p>Checkbox controls only use a subset of the typical <code>input</code> attributes. In particular, you’ll need to include</p>

<ul>
  <li><code>name</code> - This is the variable name you want to hold the user’s response. As mentioned in <a href="#multiple-choice-checkboxes">the previous section</a>, appending “[]” to the variable name will allow the variable to hold all of the user’s choices as opposed to only the final one.</li>
  <li><code>value</code> - This is the value that should be captured if the user ticks the checkbox.</li>
  <li><code>id</code> - The unique identifier you’re using for the control in order to explicitly associate it with a <code>label</code>.</li>
</ul>

<p>There are a few optional attributes you might consider including as well.</p>

<ul>
  <li><code>checked</code> - Use this null attribute if you want the default state of the checkbox to be ticked. This attribute should be used with caution. <strong>Don’t</strong> use this attribute to automatically check confirmation boxes for things like mailing list opt-ins. <strong>Do</strong> use this attribute when you are displaying sensible default settings or displaying confirmations the user has already made (e.g. in the user’s profile or when re-displaying the form when it has a submission error).</li>
  <li><code>required</code> - Use this to indicate the checkbox must be ticked for the form to be valid. It’s important to note that this attribute is typically only useful in confirmation checkbox scenarios. If you need a user to choose at least one from a multiple choice checkbox collection, it’s useless unless you need them to pick a specific one. To require one (or more) of a multiple choice checkbox group, you currently need to use JavaScript, like <a href="https://github.com/easy-designs/easy-checkbox-required.js">the one the Chattanooga Open Device Lab uses</a>.</li>
</ul>

<h2 id="checkbox-vs-other-controls">Checkbox vs. Other Controls</h2>

<p>Checkboxes excel at allowing users to indicate preference from a pre-defined set of options. But there are other form control types that allow for similar control over user responses. That can make it difficult to decide which element to use.</p>

<h3 id="dropdown-list-select">Dropdown List (<code>select</code>)</h3>

<p>The <code>select</code> element is another tried and true option for allowing users to indicate preference. A simple two-choice <code>select</code> could achieve the same goal as a confirmation checkbox, but it’s a little clunkier. In terms of user interface, <code>select</code> elements require more clicks of your users. They also obscure the complete list of choices from view because only one options is displayed at a time. Their appearance makes them more compact, but can make it difficult to get a complete picture of what choices are available when you can’t see them all.</p>

<p>You can enable multiple choice in a  <code>select</code> element by adding the <code>multiple</code> attribute to it, but depending on the number of <code>option</code> elements, it could also be a little unwieldy. Depending on the size of the <code>select</code> and the number of options, you could also create an inner scroll that could be awkward on certain touch-based devices.</p>

<p>The <code>select</code> element has its place, but should be used sparingly. I’ll go in-depth with <code>select</code> elements in a future post.</p>

<h3 id="choose-one-inputtyperadio">Choose One (<code>input[type=radio]</code>)</h3>

<p>For simple confirmation questions, it’s completely valid to use a radio form control in lieu of a single checkbox. In fact, in some cases, it may offer a more explicit choice for your users. Consider <a href="#fig-2016-01-06-03">this example</a> from <a href="https://order.subway.com">Subway’s online ordering tool</a>.</p>

<figure id="fig-2016-01-06-03" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/03.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/03.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /><figcaption>In this excerpt from Subway’s online ordering tool, they use a checkbox to confirm the user wants their sandwich toasted.</figcaption></figure>

<p>A checkbox labelled “Fresh Toasted”, isn’t terribly clear. A better approach would be to ask something like “Would you like your sandwich toasted?” with radio controls for “yes” and “no”. Alternately, if they absolutely wanted to keep it as a checkbox, they could use a better label: “Please toast my sandwich”.</p>

<figure id="fig-2016-01-06-04" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/04.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/04.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/04.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/04.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /><figcaption>An alternate approach to the Subway interface, using radio controls.</figcaption></figure>

<p>Radio controls have their place, but are not often a one-to-one replacement for checkboxes. I will discuss radio controls in greater depth in another post.</p>

<h2 id="check-em-out">Check ’Em Out</h2>

<p>Checkboxes are an invaluable tool in the form building tool chest. Understanding their purpose and capabilities is key to using them properly and ensuring your forms are usable to the broadest number of users.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Strategies for Website Accessibility, for Ecommerce]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/95177-Strategies-for-Website-Accessibility-for-Ecommerce/"/>
				<updated>2015-12-21T16:51:29-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/95177-Strategies-for-Website-Accessibility-for-Ecommerce</id>
				<content type="html"><![CDATA[<p>Accessibility is just good customer service. If you run an commerce shop, you should be following this article’s advice. Heck, if you run <em>any</em> kind of site, you should do it.</p>
<p><a rel="full-article" href="http://www.practicalecommerce.com/articles/95177-Strategies-for-Website-Accessibility-for-Ecommerce">Read on Practical Ecommerce&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Accessibility Advocacy and Pragmatism]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/accessibility-advocacy-and-pragmatism-f848602155ae/"/>
				<updated>2015-12-21T16:49:59-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/accessibility-advocacy-and-pragmatism-f848602155ae</id>
				<content type="html"><![CDATA[<p>Some very interesting thoughts about accessibility advocacy from <a href="https://twitter.com/ppatel">Pratik Patel</a>.</p>
<p><a rel="full-article" href="https://medium.com/@ppatel/accessibility-advocacy-and-pragmatism-f848602155ae#.pv2p17sgi">Read on Medium&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[“Learn More” Links: You Can Do Better]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/learn-more-links/"/>
				<updated>2015-12-21T16:46:55-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/learn-more-links</id>
				<content type="html"><![CDATA[<p>“Learn More”/“Read More” has definitely inherited the mantle of “Click Here”. Do your users a favor and write descriptive link text. It’s really not that hard.</p>
<p><a rel="full-article" href="https://www.nngroup.com/articles/learn-more-links/">Read on Nielsen Norman Group&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Updated WebGL Benchmark Results]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/updated-webgl-benchmark-results/"/>
				<updated>2015-12-21T16:45:54-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/updated-webgl-benchmark-results</id>
				<content type="html"><![CDATA[<p>If you’re into this kind of thing…</p>
<p><a rel="full-article" href="http://blogs.unity3d.com/2015/12/15/updated-webgl-benchmark-results/">Read on Unity Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Joomla 3.4.6 Fixes Zero-Day Remote Execution Bug Used in the Wild]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/joomla-3-4-6-fixes-zero-day-remote-execution-bug-used-in-the-wild-497599/"/>
				<updated>2015-12-21T16:42:14-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/joomla-3-4-6-fixes-zero-day-remote-execution-bug-used-in-the-wild-497599</id>
				<content type="html"><![CDATA[<p>I harp on this a lot: You can never trust the client (as in “the browser”). In this case, Joomla was not sanitizing User Agent strings before storing them in the database, <a href="https://developer.joomla.org/security-centre/630-20151214-core-remote-code-execution-vulnerability.html">opening a garage door-sized security hole</a>.</p>
<p><a rel="full-article" href="http://news.softpedia.com/news/joomla-3-4-6-fixes-zero-day-remote-execution-bug-used-in-the-wild-497599.shtml">Read on Softpedia&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Progressive Enhancement Only a Client Side Thing? No!]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/progressive-enhancement-only-a-client-side-thing-no/"/>
				<updated>2015-12-21T16:37:59-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/progressive-enhancement-only-a-client-side-thing-no</id>
				<content type="html"><![CDATA[<p>There are lots of places the progressive enhancement mindset can be put into practice. Of course you do often control the server, so a particular feature being unavailable isn’t usually an issue, but good open source software looks for alternative tools—<a href="http://www.sitepoint.com/imagick-vs-gd/">ImageMagick vs. GD</a>, for example—and adjusts it’s program accordingly.</p>
<p><a rel="full-article" href="http://mpulp.mobi/2015/12/progressive-enhancement-only-a-client-side-thing-no/">Read on mpulp&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Turner & Google Vets Create New Content Technology]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/speakpage/"/>
				<updated>2015-12-21T16:03:24-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/speakpage</id>
				<content type="html"><![CDATA[<p>Some semi-locals (<abbr aria-label="Atlanta">ATL</abbr> is only 2 hours from <abbr aria-label="Chattanooga">Chatty</abbr>) look to be taking on the likes of <a href="http://www.readspeaker.com/">ReadSpeaker</a> (who I’ve worked with on <a href="http://webstandardssherpa.com/"><cite>Web Standards Sherpa</cite></a>) in the automated HTML-to-spoken-word automation space. If <a href="https://speakpage.com/">SpeakPage</a> can pull it off, this has some real potential.</p>
<p><a rel="full-article" href="http://www.hypepotamus.com/companies/speakpage/">Read on Hypepotamus&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Photo Upload and Progressive Enhancement for FixMyStreet]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/photo-upload-and-progressive-enhancement-for-fixmystreet/"/>
				<updated>2015-12-21T15:58:45-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/photo-upload-and-progressive-enhancement-for-fixmystreet</id>
				<content type="html"><![CDATA[<p>An excellent overview of progressively enhancing image uploads in what many would call a “web app”. See also <a href="https://www.mysociety.org/2011/07/08/technical-fixmystreet-maps/">this great writeup they did on their progressively enhanced maps</a>.</p>
<p><a rel="full-article" href="https://www.mysociety.org/2015/12/18/photo-upload-and-progressive-enhancement-for-fixmystreet/">Read on mySociety&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Does SVG Text Pass WCAG 1.4.5 (Images of Text)?]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/does-svg-text-pass-wcag-1-4-5-images-of-text/"/>
				<updated>2015-12-14T15:35:15-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/does-svg-text-pass-wcag-1-4-5-images-of-text</id>
				<content type="html"><![CDATA[<p><a href="http://tink.uk/">Léonie Watson</a> investigates and says… yes.</p>
<p><a rel="full-article" href="https://www.paciellogroup.com/blog/2015/12/does-svg-text-pass-wcag-1-4-5-images-of-text/">Read on The Paciello Group&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[There’s a Free Template for That.]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/theres-a-free-template-for-that-24c9d6f99cfb/"/>
				<updated>2015-12-14T15:31:18-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/theres-a-free-template-for-that-24c9d6f99cfb</id>
				<content type="html"><![CDATA[<p>An excellent piece from <a href="http://laurapatti.com/">Laura Patti</a>, pondering the value of design in the age of so many “good enough” templates and frameworks.</p>
<p><a rel="full-article" href="https://medium.com/@LampPostGroup/there-s-a-free-template-for-that-24c9d6f99cfb#.rm78mhpxp">Read on Laura Patti on Medium&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Automatic Testing of BBC Accessibility Standards]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/bbc-a11y/"/>
				<updated>2015-12-11T13:07:18-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/bbc-a11y</id>
				<content type="html"><![CDATA[<p>A tool for automated testing of a list of URLs for accessibility compliance.</p>
<p><a rel="full-article" href="https://github.com/cucumber-ltd/bbc-a11y">Read on BBC on GitHub&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[When Touch-Screen Inaccessibility Becomes a Question of Safety]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/when-touch-screen-inaccessibility-becomes-question-safety-asuncion/"/>
				<updated>2015-12-11T13:05:48-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/when-touch-screen-inaccessibility-becomes-question-safety-asuncion</id>
				<content type="html"><![CDATA[<p>Touchscreen without audio cues are a <em>big</em> problem, especially on airplanes.</p>
<p><a rel="full-article" href="https://www.linkedin.com/pulse/when-touch-screen-inaccessibility-becomes-question-safety-asuncion">Read on LinkedIn&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Taking Let’s Encrypt for a Spin]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/taking-lets-encrypt-for-a-spin/"/>
				<updated>2015-12-10T12:37:47-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/taking-lets-encrypt-for-a-spin</id>
				<content type="html"><![CDATA[<p>I walked you through my journey to HTTPS a few weeks back, but I’m intrigued by Let’s Encrypt. Honestly, I would have preferred taking that approach as it looks much easier to me.</p>
<p><a rel="full-article" href="https://timkadlec.com/2015/12/taking-lets-encrypt-for-a-spin/">Read on TimKadlec.com&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[HTML Accessibility API Mappings 1.0]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/WD-html-aam-1/"/>
				<updated>2015-12-10T12:36:32-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/WD-html-aam-1</id>
				<content type="html"><![CDATA[<p>Ever wonder how HTML should map to Accessibility APIs? Look no further.</p>
<p><a rel="full-article" href="http://www.w3.org/TR/2015/WD-html-aam-1.0-20151203/">Read on W3C&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[WAI-ARIA Graphics Module]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/WD-graphics-aria-1/"/>
				<updated>2015-12-10T12:35:30-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/WD-graphics-aria-1</id>
				<content type="html"><![CDATA[<p>This is going to make SVG even more amazing (and accessible)!</p>
<p><a rel="full-article" href="http://www.w3.org/TR/2015/WD-graphics-aria-1.0-20151203/">Read on W3C&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Quick PSA on Icon Fonts and Ligatures]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/76beb201c717fd6333c7/"/>
				<updated>2015-12-10T12:22:29-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/76beb201c717fd6333c7</id>
				<content type="html"><![CDATA[<p>A fair rebuttal to <a href="http://blog.cloudfour.com/seriously-dont-use-icon-fonts/">Tyler Sticka’s “Seriously, Don’t Use Icon Fonts”</a>. I completely agree on the ligature point, although not all browsers support them. Assuming you’ve planned for the fallback, you’re all good.</p>

<p>There is no black &amp; white on the Web. It always depends. Know what each tool and technology is good for and use it when it makes sense.</p>
<p><a rel="full-article" href="https://gist.github.com/jareware/76beb201c717fd6333c7">Read on Jarno Rantanen via Github Gist&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
</feed>
