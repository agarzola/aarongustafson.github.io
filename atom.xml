<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Aaron Gustafson]]> Latest Posts &amp; Links</title>
	<link href="http://aaron-gustafson.com/atom.xml" rel="self"/>
	<link href="http://aaron-gustafson.com/"/>
	<updated>2015-02-16T02:59:31-05:00</updated>
	<id>http://aaron-gustafson.com/</id>
	<author>
		<name><![CDATA[Aaron Gustafson]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
		
			<entry>
				<title type="html"><![CDATA[I Don’t Want to Teach the World to Code… I Want to Teach the World to Problem Solve]]></title>
				<link href="http://aaron-gustafson.com/notebook/i-dont-want-to-teach-the-world-to-code/"/>
				<updated>2015-02-15T17:51:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/i-dont-want-to-teach-the-world-to-code</id>
				<content type="html"><![CDATA[<p>It seems that every other day a new code school opens it doors. In my mid-sized city, Chattanooga, there are no fewer than three businesses centered around teaching “coding” classes<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> that I am aware of. And there are at least a half-dozen free or community driven programs and camps on top of that. Most are aimed at youth, but some offer adult education as well. And that, of course, is over and above what&rsquo;s available in our public and private schools (which is considerable) and a plethora of online options.</p>

<!-- more -->


<p>On one hand I think this is great. I love to code and I love to share my knowledge of that world with anyone who will listen (I’m sorry, Kelly). Also, as someone who ran a web design studio, I know first hand how hard it is to find talented people to hire. More coders equals a larger talent pool; it&rsquo;s simple math.</p>

<p>Currently—at least here in the U.S.—the numbers aren&rsquo;t where we need them to be. We just aren&rsquo;t graduating enough STEM (Science, Technology, Engineering, and Math) students. And the pressure to fill open positions has led to a lot of outsourcing and an increased demand for employment visas. As an unemployed or unhappy worker, making yourself employable as a coder sounds like a win-win.</p>

<p>Couple this with the constant barrage of news about startup acquisitions and funding rounds and it certainly seems like learning to code is your key to financial stability if not extreme wealth. (The “American Dream,” right?) But it’s not.</p>

<p>As Jerry Davis pointed out so deftly in the <cite>Harvard Business Review</cite>, <a href="http://blogs.hbr.org/2014/03/why-do-app-developers-still-live-with-their-moms/">the vast majority of startups don&rsquo;t succeed</a>. Learning to code is not a guarantee of wealth and success. And, let’s be honest, not everyone is wired for coding and that&rsquo;s okay.</p>

<p>So I’m not sure everyone needs to learn to code. That said, I think this movement (if you can call it that) has merit.</p>

<p>First off, on the Web side of things, I think learning to code can be empowering. The Web is for everyone and I love to see more and more people using it as a tool to amplify their voices and to build community across the globe. So for that reason alone I&rsquo;m thrilled these programs exist.</p>

<p>The other reason I like that people are learning to code is that it changes how they see and deal with problems.</p>

<p>As a programmer, I am forced to break lumbering, gnarly problems into simpler, accomplishable tasks. I&rsquo;m forced to think about cause and effect, of process, of the steps required to achieve the desired outcome.</p>

<p>I also experience failure. Constantly. I&rsquo;ve learned to find the errors in my own logic, to second guess myself, to refine and improve, to refactor my code and my brain. This constant refinement helps me achieve a deeper understanding of my tools and my medium.</p>

<p>To me, those lessons (taught to me through nearly 20 years of coding) are invaluable. These are the sorts of lessons I wish they taught in school, but sadly the U.S. has largely done away with reason and critical thinking in favor of memorization and regurgitation. So maybe it&rsquo;s something we need to learn at home. Or in a coding class.</p>

<p>Regardless, if the world was filled with curious people who asked questions, applied logic, and refined their understanding of the challenges they see every day, I can&rsquo;t help but think we would all be far better off.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I should note that I am lumping a bunch of stuff into the umbrella of “coding” because some of these teach front-end web technologies, others teach those plus back-end stuff in PHP or Python, and others teach maker-style classes focused around robotics and DIY electronics like Arduino.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Three Worthwhile Posts on Progressive Enhancement]]></title>
				<link href="http://aaron-gustafson.com/notebook/three-worthwhile-posts-on-progressive-enhancement/"/>
				<updated>2015-02-13T10:14:40-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/three-worthwhile-posts-on-progressive-enhancement</id>
				<content type="html"><![CDATA[<p>Jason Garber has penned a series of posts on progressive enhancement. Here’s a quick rundown on what they cover and why you should read them.</p>

<!-- more -->


<h2><a href="http://sixtwothree.org/posts/designing-experience-layers">Designing Experience Layers</a></h2>

<p>In his first post, Jason picks up on a drumbeat I’ve been hammering on for years: we need to consider experience a continuum, not a monolithic thing.</p>

<blockquote><p>Today’s Web makes no guarantees. Every bit of code—HTML, CSS, and JavaScript—shipped from a server across the wire acts as a suggestion as to how the browser should interpret and display content. More often than not, everything works planned, but for any number of reasons, a browser could fail to request or render a particular asset.</p></blockquote>

<p>In other words, get to know <a href="http://adaptivewebdesign.info/1st-edition/chapter-1.html#adapt-or-die">fault tolerance as it applies to web design</a> and <a href="http://aaron-gustafson.com/notebook/a-fundamental-disconnect/">don’t make any assumptions about how your content will be rendered/experienced</a>.</p>

<p>His conclusion is an important one:</p>

<blockquote><p>Approaching design through the lens of experience layers is the design strategy for the Web; one that’s better for users and designers alike.</p></blockquote>

<p>Amen!</p>

<h2><a href="http://sixtwothree.org/posts/in-defense-of-progressive-enhancement">In Defense of Progressive Enhancement</a></h2>

<p>In his follow-up, Jason defends his position against <a href="http://viget.com/inspire/designing-experience-layers#comment-1847156038">a lengthy comment from his supervisor at Viget</a>. Jason’s responses are dead on:</p>

<ol>
<li>JavaScript is not a baseline (or a given) and</li>
<li>When large sites put their eggs in the JS basket, they set a bad example for other developers.</li>
</ol>


<p>His summation is perfect:</p>

<blockquote><p>I remain unconvinced that abandoning progressive enhancement in favor of JavaScript-first development is better for users or is the direction the Web is inevitably heading. It’s our responsibility to do right by the billions already online and the next billion preparing to come online. We can achieve this by designing robust, resilient, layered experiences using techniques like progressive enhancement.</p></blockquote>

<p>Again, fantastic.</p>

<h2><a href="http://sixtwothree.org/posts/the-practical-case-for-progressive-enhancement">The Practical Case for Progressive Enhancement</a></h2>

<p>Continuing the thread, Jason assembles more reasons to adopt the progressive enhancement philosophy.</p>

<ol>
<li><strong>The “Moral” Argument for Progressive Enhancement</strong> &ndash; Personally, I think Jason gives in too easily on this. Access to content is <a href="http://www.pewinternet.org/topics/digital-divide/">a social justice issue</a> and that is nothing to gloss over. In some cases it is also a <a href="http://www.section508.gov/">legal requirement</a>.</li>
<li><strong>The “Cost” of Progressive Enhancement</strong> &ndash; Jason does a good job addressing the costs (monetarily and temporally) associated with adopting progressive enhancement in terms of building, testing, and supporting websites. As he says, it is more costly to &ldquo;bolt on&rdquo; accessibility and progressive enhancement at the end of a project. He is also correct in his assertion that progressively-enhanced websites actually require less testing. And when you <a href="http://bradfrost.com/blog/mobile/support-vs-optimization/">draw a stark line between support and optimization</a>, support for additional browsers and devices also becomes far less costly. What Jason was missing was numbers to back all this up. <a href="http://blog.easy-designs.net/archives/the-true-cost-of-progressive-enhancement/">I have those numbers</a>. Enjoy.</li>
<li><strong>Practicality</strong> &ndash; Finally, Jason calls out games and their ilk as edge cases. He correctly asserts that the vast majority of properties on the Web could easily be built following progressive enhancement. Sure, you might not build a Photoshop clone using progressive enhancement, but how many of you are building an image editor for the Web? I didn’t think so.</li>
</ol>


<h2>Conclusion</h2>

<p>In all, this was a nice little series. Great work Jason! If you want to dig into this progressive enhancement stuff a bit more, you can read the entirety of my award-winning book <a href="http://adaptivewebdesign.info/1st-edition/"><cite>Adaptive Web Design: Crafting Rich Experiences with Progressive Enhancement</cite> online, for free</a>.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Five Easy Ways to Be a Better Web Professional]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/five-easy-ways-to-be-a-better-web-professional/"/>
				<updated>2015-02-12T21:05:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/five-easy-ways-to-be-a-better-web-professional</id>
				<content type="html"><![CDATA[<p>My old friend Jason Garber—who I, sadly, haven’t seen in probably a decade—came up with a great list of &ldquo;professional self-improvement tips for anyone working on the Web today&rdquo;. I’ll give you the synopses, but you should do yourself a favor and read the full post for the background:</p>

<ol>
<li>Know Your History</li>
<li>Know Your Medium</li>
<li>Respect Those Who Came Before You</li>
<li>Respect Your Audience</li>
<li>Get Involved</li>
</ol>


<p>I would absolutely echo these to anyone looking to become (or improve as) a web professional.</p>
<p><a rel="full-article" href="http://sixtwothree.org/posts/five-easy-ways-to-be-a-better-web-professional">Read on Jason Garber’s Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Client-side MVC's Major Bug]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/client-side-templatings-major-bug/"/>
				<updated>2015-02-12T21:05:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/client-side-templatings-major-bug</id>
				<content type="html"><![CDATA[<p>Astute observations (as always) from <a href="http://twitter.com/tkadlec">Tim Kadlec</a>. I’ll let Tim set the scene:</p>

<blockquote><p>Over the past year I conducted performance audits on a handful of sites that all used client-side MVC’s, typically Angular but not always. Each site had their own optimizations that needed to take place to improve performance. Yet a pattern emerged: client-side MVC’s were the major bottleneck for each. It slowed down the initial rendering of the page (particularly on mobile) and it limited our ability to optimize the critical path.</p></blockquote>

<p>Obviously Tim knows what he’s talking about.</p>

<p>He goes on to bring in the voices of the Filament Group and PPK (both of whom I’ve <a href="http://aaron-gustafson.com/notebook/links/researching-the-performance-costs-of-javascript-mvc-frameworks/">linked to previously</a> <a href="http://aaron-gustafson.com/notebook/links/the-problem-with-angular/">for the same reasons</a>): lots of smart people have come to the conclusion that relying on client-side generation of web pages is a bad idea. Tim goes so far as to say “if your client-side MVC framework does not support server-side rendering, that is a bug” and I can’t help but agree.</p>

<p>His post is great, you should read it. Frankly, I wish I’d written it.</p>
<p><a rel="full-article" href="http://timkadlec.com/2015/02/client-side-templatings-major-bug/">Read on Time Kadlec’s Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Accessible Toggle-style Checkbox]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/accessible-toggle-style-checkbox/"/>
				<updated>2015-02-12T08:41:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/accessible-toggle-style-checkbox</id>
				<content type="html"><![CDATA[<p>This is, by far, the best implementation of a toggle slider checkbox replacement I&rsquo;ve seen.</p>
<p><a rel="full-article" href="http://codepen.io/personable/pen/stpwD">Read on Codepen&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Let’s Write Fast JavaScript]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/lets-write-fast-javascript/"/>
				<updated>2015-02-11T10:13:53-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/lets-write-fast-javascript</id>
				<content type="html"><![CDATA[<p>You may have already seen this piece from <a href="https://medium.com/@mdibaiee">Mahdi Dibaiee</a>, but if you haven’t it’s definitely worth a read. I also highly recommend <a href="https://twitter.com/slicknet">Nicholas Zakas</a>’ <a href="http://www.amazon.com/gp/product/059680279X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=059680279X&amp;linkCode=as2&amp;tag=easydesign-20&amp;linkId=EIBQXEP7I2PP5RQE">High Performance JavaScript</a> and <a href="https://twitter.com/amyhoy">Amy Hoy</a> &amp; <a href="https://twitter.com/thomasfuchs">Thomas Fuchs</a>’ <a href="http://javascriptrocks.com/">JavaScript Performance Rocks</a>.</p>
<p><a rel="full-article" href="https://medium.com/the-javascript-collection/lets-write-fast-javascript-2b03c5575d9e">Read on Medium&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[This Uncanny Valley of Voice Recognition]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/this-uncanny-valley-of-voice-recognition/"/>
				<updated>2015-02-11T10:09:17-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/this-uncanny-valley-of-voice-recognition</id>
				<content type="html"><![CDATA[<p>I am incredibly excited about the future of voice-based user experiences, but I also fully recognize that we’ve got a long way to go. This post from <a href="https://twitter.com/holman">Zach Holman</a> does a great job illustrating the issues we are currently dealing with. And it’s a fun read to boot!</p>
<p><a rel="full-article" href="http://zachholman.com/posts/uncanny-valley/">Read on Zach Holman’s Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Social Class, Power, and Selfishness: When and Why Upper and Lower Class Individuals Behave Unethically]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/social-class-power-and-selfishness/"/>
				<updated>2015-02-11T09:53:53-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/social-class-power-and-selfishness</id>
				<content type="html"><![CDATA[<p>In this fascinating paper, David Dubois, Derek Rucker, and Adam Galinsky explore the interplay between socioeconomic status and selfishness (or cheating). In the course of their study, they discovered that people at both ends of the spectrum cheat, but for different ends:</p>

<blockquote><p>[S]ocial class positively predicted unethical behavior; however, this relationship was only observed when that behavior was self-beneficial. When unethical behavior was performed to benefit others, social class negatively predicted unethical behavior; lower class individuals were more likely than upper class individuals to engage in unethical behavior. Overall, social class predicts people’s tendency to behave selfishly, rather than predicting unethical behavior per se.</p></blockquote>

<p>The second thing they discovered was that the cause of selfishness came from an individuals’ sense of power:</p>

<blockquote><p>Evidence for this relationship was provided in three forms. First, income, but not education level, predicted unethical behavior. Second, feelings of power mediated the effect of social class on unethical behavior, but feelings of status did not. Third, two distinct manipulations of power produced the same moderation by self-versus-other beneficiary as was found with social class.</p></blockquote>

<p>Fascinating stuff!</p>
<p><a rel="full-article" href="http://psycnet.apa.org/?&fa=main.doiLanding&doi=10.1037/pspi0000008">Read on Journal of Personality and Social Psychology&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The “Web Application” Myth]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/the-web-application-myth/"/>
				<updated>2015-02-10T19:39:53-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/the-web-application-myth</id>
				<content type="html"><![CDATA[<p>Christian Heilmann is dead-on in this post. It’s a long one, but worth reading. Here’s my favorite bit:</p>

<blockquote>
<p><em>What is an application?</em> To me, it is a tool that allows people to reach a certain goal in the most effective fashion. What matters is not what language or technology you build it in. What matters most is:</p>
<ul>
<li>that it is the right tool for the right audience,</li>
<li>that it does what is expected of it and not more,</li>
<li>that it is safe to use,</li>
<li>that it works in the environment it is most used in,</li>
<li>that it can be easily maintained without dependencies that only a few people know how to use,</li>
<li>that it is built with components that are reliable to use and not a “alpha” or “beta” or “not production ready” experimental technology</li>
<li>that we know how to maintain the thing, how to add new functionality and above all, fix security issues in the future without replacing it as a whole.</li>
</ul>

<p>These are the things we should concentrate on. To find the answer as to what format this “application” will be, we need a mixture of skills of people working on the product:</p>

<ul>
<li>researchers,</li>
<li>designers,</li>
<li>UX people,</li>
<li>content writers,</li>
<li>trainers to show people how to use the tool and how to put content in it afterwards and,</li>
<li>yes, of course, developers.</li>
</ul>

<p>And this is the scary part: <strong>this costs money and a lot of effort</strong>. It also means that we have to think about communicating and building teams that are good at bouncing ideas off one another and find a good consensus. It also means it will take longer to build this.</p>

<p>All of this is <em>anathema</em> to people who have to show off to venture capital companies and stakeholders. We have to move faster, we have to be better. Less people, more products, quicker iterations, more features. It doesn’t matter what the product does: the most important part is that you show that it evolves and changes constantly.</p>

</blockquote>

<p><a rel="full-article" href="https://medium.com/@codepo8/the-web-application-myth-69c6b1506515">Read on Medium&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Designing for the Elderly: Ways Older People Use Digital Technology Differently]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/designing-digital-technology-for-the-elderly/"/>
				<updated>2015-02-06T17:51:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/designing-digital-technology-for-the-elderly</id>
				<content type="html"><![CDATA[<p>We’re all aging. There’s no way to avoid it, no matter how much <a href="http://en.wikipedia.org/wiki/Growth_hormone">HGH</a> you consume. And as we age, our eyesight typically worsens, we lose some motor control, and our brains often don’t process data quite as fast as they did when we were 18 or even 30. As designers, we need to be cognizant of the needs of aging computer users.</p>

<p>Ollie Campbell has put together a great read on creating digital products that accommodate the aging population (estimated to top 19% of the US population by 2030). In it, he discusses things we should consider with respect to</p>

<ul>
<li>vision and hearing,</li>
<li>motor control,</li>
<li>device use,</li>
<li>relationships,</li>
<li>life stage,</li>
<li>experience with technology,</li>
<li>cognition,</li>
<li>memory,</li>
<li>attention, and</li>
<li>decision-making.</li>
</ul>


<p>It’s pretty exhaustive. You should definitely give it a read.</p>
<p><a rel="full-article" href="http://www.smashingmagazine.com/2015/02/05/designing-digital-technology-for-the-elderly/">Read on Smashing Magazine&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[When Browsers Don’t Play Nicely in the Open Source Sandbox]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/when-browsers-dont-play-nicely-in-the-open-source-sandbox/"/>
				<updated>2015-02-06T10:07:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/when-browsers-dont-play-nicely-in-the-open-source-sandbox</id>
				<content type="html"><![CDATA[<p>Passive aggression at its best:</p>

<pre><code class="javascript">console.log('Google, please make sure your obfuscator does not change class names, so our patch continues working (or stop browser-sniffing as we both use and contribute to Blink!) - love, Opera.');</code></pre>

<p><a rel="full-article" href="https://github.com/operasoftware/browserjs/blob/master/OPRdesktop/browserjs-25.0.js#L252">Read on Github&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Reframing Accessibility for the Web]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/reframing-accessibility-for-the-web/"/>
				<updated>2015-02-05T21:05:36-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/reframing-accessibility-for-the-web</id>
				<content type="html"><![CDATA[<p>Lots of great stuff here from Anne Gibson:</p>

<blockquote><p>We need to change the way we talk about accessibility. Most people are taught that “web accessibility means that people with disabilities can use the Web”—the official definition from the W3C. This is wrong. Web accessibility means that people can use the web.</p>

<p>Not “people with disabilities.” Not “blind people and deaf people.” Not “people who have cognitive disabilities” or “men who are color blind” or “people with motor disabilities.” People. People who are using the web. People who are using what you’re building.</p>

<p>We need to stop invoking the internal stereotypes we have about who is disabled.</p></blockquote>

<p>Anne goes on to offer a lot of practical and helpful advice around how to change the way you think about accessibility and how to act upon that change. You should definitely read it.</p>

<p>For similar content on this site, see <a href="http://aaron-gustafson.com/notebook/the-web-is-for-everyone/">my keynote from A11yQC</a> and <a href="http://aaron-gustafson.com/notebook/egalitarianism/">my post on egalitarianism</a>.</p>
<p><a rel="full-article" href="http://alistapart.com/article/reframing-accessibility-for-the-web">Read on A List Apart&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[You’re Missing the Point of Server-Side Rendered JavaScript Apps]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/youre-missing-the-point-of-server-side-rendered-javascript-apps/"/>
				<updated>2015-02-05T19:20:05-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/youre-missing-the-point-of-server-side-rendered-javascript-apps</id>
				<content type="html"><![CDATA[<p>I agree with Tom Dale. Yup, you read that right: I agree with Tom Dale. Well, he finally said something sensible:</p>

<blockquote><p>Say what you will about server-rendered apps, the performance of your server is much more predictable, and more easily upgraded, than the many, many different device configurations of your users. Server-rendering is important to ensure that users who are not on the latest-and-greatest can see your content immediately when they click a link.</p></blockquote>

<p>You might remember Tom as the guy who <a href="http://tomdale.net/2013/09/progressive-enhancement-is-dead/">declared progressive enhancement dead in late 2013</a>. He’s apparently seen the light and has been hard at work to get Ember ready for server side rendering.</p>

<p>I’m shocked, but glad he finally came around. Progressive enhancement FTW!</p>
<p><a rel="full-article" href="http://tomdale.net/2015/02/youre-missing-the-point-of-server-side-rendered-javascript-apps/">Read on Tom Dale’s Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Power of the Platforms]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/power-of-the-platforms/"/>
				<updated>2015-02-05T13:11:05-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/power-of-the-platforms</id>
				<content type="html"><![CDATA[<p>This is a great post from Simon St. Laurent on how isolated Web &ldquo;platforms&rdquo; have come and go while the &ldquo;tangled mess&rdquo; that is HTML, CSS, and JavaScript soldiers on. It’s a must read.</p>

<blockquote><p>The web bends with the wind, supporting incredibly diverse use cases across a wide variety of environments. Your code should, too.</p></blockquote>
<p><a rel="full-article" href="http://radar.oreilly.com/2015/02/power-of-the-platforms.html">Read on O’Reilly Radar&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Truth About Multiple H1 Tags in the HTML5 Era]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/the-truth-about-multiple-h1-tags-in-the-html5-era/"/>
				<updated>2015-02-03T16:14:54-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/the-truth-about-multiple-h1-tags-in-the-html5-era</id>
				<content type="html"><![CDATA[<p>This is a beautiful and exhaustive survey of heading level usage before HTML5 and in HTML5. Sadly, <a href="http://www.w3.org/TR/html5/sections.html#outlines">no one implements the HTML5 scenario yet</a>. But it’s nice to dream. Maybe one day.</p>

<p>For more:</p>

<ul>
<li><a href="http://www.paciellogroup.com/blog/2013/10/html5-document-outline/">The HTML5 Document Outline</a></li>
<li><a href="http://blog.adrianroselli.com/2013/12/the-truth-about-truth-about-multiple-h1.html">The Truth about “The Truth About Multiple H1 Tags”</a></li>
</ul>

<p><a rel="full-article" href="http://webdesign.tutsplus.com/articles/the-truth-about-multiple-h1-tags-in-the-html5-era--webdesign-16824">Read on Tuts+&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Emulating Failure]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/emulating-failure/"/>
				<updated>2015-02-02T07:09:54-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/emulating-failure</id>
				<content type="html"><![CDATA[<p>Another beautifully-eloquent post about the potential perils of <a href="http://www.w3.org/wiki/WebComponents/">Web Components</a>:</p>

<blockquote><p>HTML has a problem. As implemented in browsers many interactive elements cannot be styled as desired by web developers, or developers as directed by designers, marketing or any of the numerous others whose wishes code cutters must abide by.</p>

<p>…</p>

<p>Now in 2015 we have web components re-inventing native HTML buttons, radio buttons and checkboxes, for relief from the scourge of divitis, perpetrated upon us by the as shipped inability to style a native HTML element as desired.</p>

<p>Is it just me, or are new web UI technologies continuing to try to solve the wrong problems?</p></blockquote>

<p>Now, the <a href="http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/">Shadow DOM</a> (and <a href="https://gist.github.com/webtobesocial/aefd6e25064c08e0cc9a">associated pseudo-elements</a>) should allow us to control the style of these elements. The deeper problem is functionality. Take <a href="https://html.spec.whatwg.org/multipage/forms.html#the-datalist-element">the <code>datalist</code> for predictive typing</a>. What if you want fuzzy search instead of initial search when someone types. That’s not supported. This is where Web Components get interesting.</p>
<p><a rel="full-article" href="http://www.paciellogroup.com/blog/2015/02/emulating-failure/">Read on The Paciello Group&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Accessible Timeout Notifications]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/accessible-timeout-notifications-tink/"/>
				<updated>2015-02-01T13:23:17-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/accessible-timeout-notifications-tink</id>
				<content type="html"><![CDATA[<p>I’m not generally a fan of session timeouts, but if you have to do it, Léonie Watson has outlined a pretty good route to go. My only nit might be using a <code>role</code> of &ldquo;alert&rdquo; or &ldquo;alertdialog&rdquo; instead of &ldquo;group&rdquo;, but that’s because it would trigger an audible chime and get read by assistive tech. But that’s pretty minor.</p>

<p>Pay particular attention to the keyboard focus stuff too.</p>
<p><a rel="full-article" href="http://tink.uk/accessible-timeout-notifications/">Read on Tink&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Browser Accessibility Tree]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/the-browser-accessibility-tree/"/>
				<updated>2015-02-01T13:20:41-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/the-browser-accessibility-tree</id>
				<content type="html"><![CDATA[<p>A clear and concise overview of browsers’ accessibility trees, using the <code>video</code> element as an example. Yet another reason to love <a href="https://twitter.com/stevefaulkner">Steve Faulkner</a>.</p>
<p><a rel="full-article" href="http://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/">Read on The Paciello Group&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Ch-ch-ch-changes]]></title>
				<link href="http://aaron-gustafson.com/notebook/ch-ch-ch-changes/"/>
				<updated>2015-01-30T10:14:40-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/ch-ch-ch-changes</id>
				<content type="html"><![CDATA[<p>Monday, February 2nd will be the start of a new chapter in my professional career: I will joining Microsoft as a standards evangelist.</p>

<p><em>Wha?!</em></p>

<p>The reasons for the move are manifold, but I will do my best to summarize by taking you on the journey I’ve been on and hopefully that will help you understand why I will be leaving agency life behind and joining a browser maker (and the makers of Internet Explorer at that).</p>

<!-- more -->




<hr>


<p>I’ve been working on the Web since 1996. That’s nearly 20 years of building everything from simple marketing campaign sites to emails to complex transactional websites and custom content management systems. In that time, I’ve gained skills on both the front end and the back end and rolled the 10,000 hour odometer at least a couple of times.</p>

<p>It’s been great. I love building things and I love helping our amazing clients put awesome information and services on the Web. But at the same time, I’ve enjoyed working with teams to help <em>them</em> solve their own problems even more than I’ve enjoyed solving them directly. It’s why I love speaking at conferences and running workshops: I love to see the lightbulbs come on over people’s heads!</p>

<p>Over the last few years, <a href="http://easy-designs.net">Kelly and I</a> have made a conscious effort to reduce the amount of production work we’ve been doing in favor of more consulting. And early last year we came to a sort of crossroads: We knew we could keep doing what we’d been doing and things would be good, but we weren’t feeling challenged anymore.</p>

<p>And so we began to brainstorm ideas of what we’d like to do in the next phase of our lives.</p>

<hr>


<p>Kelly came to the Web from an education and community organizing background, so she wanted to find a way to incorporate those with her technical knowledge. And about two months ago, she got that opportunity and she took a position as the Program Manager for <a href="http://techgoeshomecha.org/">Tech Goes Home Chattanooga</a>, an organization committed to bridging the digital divide in our fair city.</p>

<p>When I close my eyes and think about what makes me happiest, it’s writing, speaking, and spreading the word about web design best practices. The folks I know who get to do that full-time tend to be developer evangelists (or <a href="http://adactio.com">Jeremy</a>). And so I began pondering that possibility.</p>

<p>As I went through the list of browser makers in my mind, Microsoft stuck out.</p>

<p>Some of you might think that’s odd. I mean come on, IE has been the red-headed stepchild of the web design world for the better part of a decade. Why on earth would I want to work there?</p>

<p>Well, I’ll tell you: Despite its market largesse, IE (and in many ways Microsoft) is operating like the scrappy upstart. And I root for underdogs.</p>

<hr>


<p>I think back to the early days of the Web when I would need a Windows license for every virtual machine I wanted to run in order to test each browser version. It was a pain in the ass and made me curse Microsoft on a regular basis.</p>

<p>But things have changed. A lot.</p>

<p>A few years back, the IE team launched <a href="http://modern.ie">modern.IE</a>, an awesome resource with VMs that were free for the taking. They also launched <a href="https://www.modern.ie/en-us/report">a free tool for identifying coding issues and checking cross-browser interoperability</a>. Then they opened up <a href="http://status.modern.ie">the roadmap for standards implementations in IE</a>. And just recently they gave us <a href="https://remote.modern.ie/">RemoteIE</a> and did away with the need for VMs altogether (at least to test our stuff on the latest version of IE).</p>

<p>This is a very different Microsoft.</p>

<p>Now sure, there’s still more they could open up, but this is progress. Big ships are slow to turn, but this ship is turning.</p>

<p>I want to be a part of that.</p>

<hr>


<p>I will be joining Microsoft as a “Senior Program Manager”, but titles don’t matter much to me. I see my job boiling down to a few key things:</p>

<ol>
<li>Helping web designers and developers better understand the possibilities of the Web;</li>
<li>Advocating for interoperable, accessible web design best practices;</li>
<li>Being a voice for the web design and development community to communicate their needs to the IE team in order to improve the browser; and</li>
<li>Being an internal advocate for Web standards implementations in other Microsoft products (think Visual Studio, Outlook, Word).</li>
</ol>


<p>Microsoft is not hiring me to be a salesman—<em>thank god, they’d be pretty disappointed</em>—they are hiring me to continue being me. I will continue writing, I will continue speaking, and I will continue educating. The only thing that has changed is that I can spend all of my time doing that, rather than having to balance it with client work.</p>

<hr>


<p>So Monday starts a new chapter in my career. It’s a little scary (I haven’t worked for someone else for over a decade), but it is also exciting. I am comforted by the fact that I am joining an amazing team: As he announced yesterday, <a href="http://christianheilmann.com/2015/01/29/on-towards-my-next-challenge-2/">Christian Heilmann will also join Microsoft on the 2nd</a> and the <a href="https://www.youtube.com/watch?v=YAIPCp_BOGU">charismatic Rey Bango</a> will be leading our merry little conga line.</p>

<p>I’m excited about the future and I’m thrilled to be given the opportunity to focus on making the Web better… for everyone.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Extensibility]]></title>
				<link href="http://aaron-gustafson.com/notebook/links/extensibility/"/>
				<updated>2015-01-30T09:44:38-05:00</updated>
				<id>http://aaron-gustafson.com/notebook/links/extensibility</id>
				<content type="html"><![CDATA[<p>Great post from Jeremy on Web components. I couldn’t agree more:</p>

<blockquote><p>I was looking forward to getting really stuck into Web Components and figuring out ways of creating powerful little extensions that I could start using now. But if Web Components turn out to be an all-or-nothing technology—a “platform”, if you will—then I will not only not be using them, I’ll be actively arguing against their use.</p></blockquote>
<p><a rel="full-article" href="https://adactio.com/journal/8276">Read on Adactio’s Journal&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
</feed>
