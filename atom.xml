<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Aaron Gustafson Latest Posts &amp; Links]]></title>
	<link href="https://www.aaron-gustafson.com/atom.xml" rel="self"/>
	<link href="https://www.aaron-gustafson.com/"/>
	<updated>2016-01-26T16:17:10-05:00</updated>
	<id>https://www.aaron-gustafson.com/</id>
	<author>
		<name><![CDATA[Aaron Gustafson]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
		
			<entry>
				<title type="html"><![CDATA[Vorlon Extension]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/VorlonExtension/"/>
				<updated>2016-01-25T09:56:58-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/VorlonExtension</id>
				<content type="html"><![CDATA[<p><a href="http://vorlonjs.com/">Vorlon.js</a> is a pretty neat nodejs-based remote debugging tool from some of my colleagues at Microsoft. And now it’s available as a browser extension!</p>
<p><a rel="full-article" href="https://github.com/MicrosoftDX/VorlonExtension">Read on Microsoft DX on GitHub&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Why Hover Menus Are Problematic]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/why-hover-menus-are-problematic-b21d6c7de91c/"/>
				<updated>2016-01-25T09:56:27-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/why-hover-menus-are-problematic-b21d6c7de91c</id>
				<content type="html"><![CDATA[<p>Lots of good information in this piece, but here’s the key takeaway:</p>

<blockquote>
  <p>The simplest solution is to show a menu via click. Click works when the user taps, when the user clicks with the mouse, and when the user tabs via keyboard and presses enter.</p>
</blockquote>
<p><a rel="full-article" href="https://medium.com/simple-human/why-hover-menus-are-problematic-b21d6c7de91c#.n5cw5zr1n">Read on Medium&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Submitting a Pull Request to Node.js With ChakraCore]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/nodejs-chakracore-mainline/"/>
				<updated>2016-01-25T09:56:14-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/nodejs-chakracore-mainline</id>
				<content type="html"><![CDATA[<p>Folks on the Chakra team at Microsoft have updated node.js to enable users to swap in <a href="https://github.com/Microsoft/ChakraCore">their open source ChakraCore JavaScript engine</a> for the default <a href="https://developers.google.com/v8/?hl=en">V8 JavaScript engine from Google</a>. <a href="https://github.com/nodejs/node/pull/4765">This is pretty big huge.</a></p>
<p><a rel="full-article" href="https://blogs.windows.com/msedgedev/2016/01/19/nodejs-chakracore-mainline/">Read on MS Edge Dev Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Lawsuits Rise: Blind Plaintiffs Sue Additional Retailers for Website Accessibility/ADA Claims]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/lawsuits-rise-blind-plaintiffs-sue-additional-retailers-for%20website-accessibility-ada-claims/"/>
				<updated>2016-01-25T09:55:57-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/lawsuits-rise-blind-plaintiffs-sue-additional-retailers-for website-accessibility-ada-claims</id>
				<content type="html"><![CDATA[<p>Not at all surprising…</p>

<blockquote>
  <p>Patagonia, Ace Hardware, Aeropostale, Bed Bath &amp; Beyond and Estee Lauder are the most recent companies sued by blind plaintiffs, alleging that the retailers’ websites are not accessible to the blind as required by the Americans with Disabilities Act (ADA).</p>
</blockquote>
<p><a rel="full-article" href="http://www.lexology.com/library/detail.aspx?g=073805a5-0424-48a4-9385-dce5d2eeb657">Read on Lexology&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[How Creating Accessibility for Everyone Benefits Us All]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/how-creating-accessibility-for-everyone-benefits-us-all/"/>
				<updated>2016-01-25T09:54:33-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/how-creating-accessibility-for-everyone-benefits-us-all</id>
				<content type="html"><![CDATA[<p>A good piece on why accessibility matters and steps JPMorgan Chase is taking to incorporate it in everything they do.</p>
<p><a rel="full-article" href="http://www.forbes.com/sites/jpmorganchase/2015/12/03/how-creating-accessibility-for-everyone-benefits-us-all/#2715e4857a0b676ad03d6756">Read on Forbes&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Value of Accessibility]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/the-value-of-accessibility/"/>
				<updated>2016-01-25T09:54:13-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/the-value-of-accessibility</id>
				<content type="html"><![CDATA[<p>An excellent primer on accessibility from Charles McQuilkin.</p>
<p><a rel="full-article" href="http://www.webdesignerdepot.com/2015/12/the-value-of-accessibility/">Read on Webdesigner Depot&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[SVG A11y Test Cases]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/svg-a11y-tests/"/>
				<updated>2016-01-25T09:54:01-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/svg-a11y-tests</id>
				<content type="html"><![CDATA[<p>Test cases for SVG accessibility, with and without ARIA.</p>
<p><a rel="full-article" href="http://svg-access-w3cg.github.io/svg-a11y-tests/">Read on W3C Accessible SVG Community Group on Github&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[A11y: Tables and Borders]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/a11y-tables-and-borders/"/>
				<updated>2016-01-25T09:53:48-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/a11y-tables-and-borders</id>
				<content type="html"><![CDATA[<p>This is an interesting discovery:</p>

<blockquote>
  <p>VoiceOver uses borders as a criteria to determine if a table is a data table or not.</p>
</blockquote>
<p><a rel="full-article" href="http://www.tetchi.ca/a11y-tables-and-borders/">Read on Tetchi Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Woe-ARIA: The Surprisingly but Ridiculously Complicated World of Aria-label/ledby]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/woe-aria-surprisingly-but-ridiculously/"/>
				<updated>2016-01-25T09:53:34-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/woe-aria-surprisingly-but-ridiculously</id>
				<content type="html"><![CDATA[<p>An in-depth examination of <code>aria-label</code> and <code>aria-labelledby</code>.</p>
<p><a rel="full-article" href="http://blog.jantrid.net/2015/12/woe-aria-surprisingly-but-ridiculously.html">Read on Jantrid&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Accessibility Mindset]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/the-accessibility-mindset/"/>
				<updated>2016-01-25T09:53:19-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/the-accessibility-mindset</id>
				<content type="html"><![CDATA[<p>A few simple, practical examples of how to make your interfaces more accessible, by <a href="https://yatil.net/">Eric Eggert</a>.</p>
<p><a rel="full-article" href="https://24ways.org/2015/the-accessibility-mindset/">Read on 24 ways&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[On Accessibility and the Lack of Proper HTML]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/on-accessibility-and-the-lack-of-proper-html/"/>
				<updated>2016-01-25T09:52:56-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/on-accessibility-and-the-lack-of-proper-html</id>
				<content type="html"><![CDATA[<p>Great minds think alike… I wrote at length about native semantics vs. fully-customized divs and the number of dependencies that come with the latter in <a href="http://adaptivewebdesign.info/2nd-edition/">the second edition of <em>Adaptive Web Design</em></a>.</p>
<p><a rel="full-article" href="http://www.iandevlin.com/blog/2016/01/opinion/on-accessibility-and-the-lack-of-proper-html">Read on Ian Devlin&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[WHATWG: Compatibility Standard]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/compat/"/>
				<updated>2016-01-14T21:08:30-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/compat</id>
				<content type="html"><![CDATA[<p>A list of things browsers must implement to ensure poorly-coded sites work. That this is needed deeply saddens me.</p>
<p><a rel="full-article" href="https://compat.spec.whatwg.org/">Read on WHATWG&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Safari 9.1]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/Safari_9_1/"/>
				<updated>2016-01-14T21:01:56-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/Safari_9_1</id>
				<content type="html"><![CDATA[<p>The <code>picture</code> element, faster taps, desktop gestures, and more are coming in the next iteration of Apple’s browser.</p>
<p><a rel="full-article" href="https://developer.apple.com/library/prerelease/mac/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html">Read on Apple Developer&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Why Is Comcast Interrupting My Web-Browsing to Upsell Me on a New Modem?]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/why-is-comcast-interrupting-my-web-browsing-to-upsell-me-on-a-new-modem/"/>
				<updated>2016-01-14T17:46:02-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/why-is-comcast-interrupting-my-web-browsing-to-upsell-me-on-a-new-modem</id>
				<content type="html"><![CDATA[<p>Yep, they’re <a href="https://www.aaron-gustafson.com/notebook/the-network-effect/">at it</a> <a href="https://www.aaron-gustafson.com/notebook/more-proof-we-dont-control-our-web-pages/">again</a>…</p>
<p><a rel="full-article" href="http://consumerist.com/2016/01/12/why-is-comcast-interrupting-my-web-browsing-to-upsell-me-on-a-new-modem/">Read on Consumerist&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Content & Display Patterns]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/content-display-patterns/"/>
				<updated>2016-01-06T14:58:58-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/content-display-patterns</id>
				<content type="html"><![CDATA[<p>Dan Mall’s excellent overview of decoupling content and display using structured data to make your sites more flexible.</p>
<p><a rel="full-article" href="http://danielmall.com/articles/content-display-patterns/">Read on Dan Mall&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Microsoft Readies Kill Switch for Internet Explorer 8, 9, and 10]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/microsoft-readies-kill-switch-for-internet-explorer-8-9-and-10/"/>
				<updated>2016-01-06T14:54:07-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/microsoft-readies-kill-switch-for-internet-explorer-8-9-and-10</id>
				<content type="html"><![CDATA[<p>Microsoft is end-of-life-ing IE8–10, but that doesn’t mean we should stop supporting them. Some people <a href="http://www.networkworld.com/article/2224510/microsoft-subnet/some-windows-xp-users-just-can-t-afford-to-upgrade.html">can’t upgrade for reasons way beyond their control</a>.</p>
<p><a rel="full-article" href="http://arstechnica.co.uk/information-technology/2016/01/microsoft-readies-kill-switch-for-internet-explorer-8-9-and-10/">Read on Ars Technica UK&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[The Problem With Progressive Enhancement]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/the-problem-with-progressive-enhancement/"/>
				<updated>2016-01-06T14:44:42-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/the-problem-with-progressive-enhancement</id>
				<content type="html"><![CDATA[<p>Alex Lande doesn’t believe optimizing for a no-JavaScript scenario makes sense, but he does believe in building a robust web experience pays huge dividends.</p>

<blockquote>
  <p>Progressive enhancement is a tool that will help you build faster, tougher sites. It is an investment in the strength and quality of your application. It will make your users happy because the app will still work, if imperfectly. It might just save you when disaster strikes, and if you’re interested in building the best websites possible, you should give it some thought.</p>
</blockquote>

<p>Eloquently put.</p>
<p><a rel="full-article" href="http://www.alexlande.com/articles/the-problem-with-progressive-enhancement/">Read on Alex Lande&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Affirming User Choice With Checkboxes]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/affirming-user-choice-with-checkboxes/"/>
				<updated>2016-01-06T14:24:31-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/affirming-user-choice-with-checkboxes</id>
				<content type="html"><![CDATA[<p>“Checkbox” form controls have long been a part of software. They enable users to provide a simple binary response—yes or no. On the Web, we often see them in two scenarios: confirmations and multiple choice.</p>

<!-- more -->

<h2 id="confirmation-checkboxes">Confirmation Checkboxes</h2>

<p>Standalone checkboxes are often employed to enable users to affirm a statement, as in <a href="#fig-2016-01-06-01">this example</a> from <a href="https://online.americanexpress.com/myca/logon/us/action/LogonHandler?request_type=LogonHandler&amp;Face=en_US#lilo_loginForm">the American Express login form</a> where a customer can indicate they’d like the site to remember them.</p>

<figure id="fig-2016-01-06-01" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/01.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/01.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/01.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /><figcaption>American Express’ login form offers users the option of being remembered. As that is a binary choice (e.g. yes or no), the checkbox makes sense.</figcaption></figure>

<p>Here’s a simplification of the markup they’re using:</p>

<div><script src="https://gist.github.com/d281f889a11634b45280.js?file=american-express-login-simplified.html"></script>
<noscript><pre><code>&lt;input type=&quot;checkbox&quot; id=&quot;lilo_checkBox&quot; name=&quot;REMEMBERME&quot;&gt;
&lt;label for=&quot;lilo_checkBox&quot;&gt;Remember Me&lt;/label&gt;</code></pre></noscript></div>

<p>This works really well, though I generally prefer to <a href="https://www.aaron-gustafson.com/notebook/labeled-with-love/#an-alternate-approach">combine explicit and implicit labeling</a> to simplify my CSS selectors and broaden their applicability. Here’s how I would rewrite this control:</p>

<div><script src="https://gist.github.com/d281f889a11634b45280.js?file=american-express-login-reimagined.html"></script>
<noscript><pre><code>&lt;label for=&quot;lilo_checkBox&quot;&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;lilo_checkBox&quot; name=&quot;REMEMBERME&quot;&gt;
  Remember Me
&lt;/label&gt;</code></pre></noscript></div>

<p>Regardless of the markup pattern itself, it’s important to note the explicit association of the form control and the <code>label</code> element (using the <code>for</code> attribute). You’ll also notice the input has a straightforward <code>name</code> value which will be submitted to the back end if the user ticks the box.</p>

<p>It’s worth noting that some back-end systems may require a value be submitted for the given variable name (in this case, “REMEMBERME”) regardless of whether the user has ticked the checkbox. If that’s a requirement, you can alter the pattern to use a hidden <code>input</code> as well:</p>

<div><script src="https://gist.github.com/d281f889a11634b45280.js?file=american-express-login-with-hidden.html"></script>
<noscript><pre><code>&lt;input type=&quot;hidden&quot; name=&quot;REMEMBERME&quot; value=&quot;no&quot;&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;lilo_checkBox&quot; name=&quot;REMEMBERME&quot; value=&quot;yes&quot;&gt;
&lt;label for=&quot;lilo_checkBox&quot;&gt;Remember Me&lt;/label&gt;</code></pre></noscript></div>

<p>The source order matters because with matching <code>name</code> values, the final submittable <code>value</code> will always be the one the back-end receives. With this setup, the <code>value</code> of “no” (from the hidden <code>input</code>) will be submitted by default. If the checkbox is ticked, its <code>value</code> is submitted instead, setting REMEMBERME to “yes”.</p>

<h2 id="multiple-choice-checkboxes">Multiple Choice Checkboxes</h2>

<p>The other way we often see checkboxes used is to enable users to choose zero or more items from a collection of options. Consider <a href="#fig-2016-01-06-02">this example</a> from <a href="http://chadevicelab.org/book-time">the Chattanooga Open Device Lab’s reservation form</a>. It allows users to choose the devices they’d like to include in their test matrix:</p>

<figure id="fig-2016-01-06-02" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/02.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/02.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/02.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/02.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /><figcaption>In this excerpt from the reservation form on the Chattanooga Open Device Lab website, users can choose to include gaming system options.</figcaption></figure>

<p>The markup they employ is pretty well-organized and straightforward: it’s a list of checkbox options.</p>

<div><script src="https://gist.github.com/d281f889a11634b45280.js?file=chaodl-checkbox-list.html"></script>
<noscript><pre><code>&lt;ul&gt;
  &lt;li&gt;
    &lt;label for=&quot;nintendo-ds-lite&quot;&gt;
      &lt;input type=&quot;checkbox&quot;
             name=&quot;reservation_requested_device[]&quot;
             id=&quot;nintendo-ds-lite&quot;
             value=&quot;Nintendo DS Lite (Upper Cabinet #13)&quot;
             data-checkbox-required=&quot;&quot;
             &gt;
      Nintendo DS Lite
    &lt;/label&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;label for=&quot;nintendo-wii&quot;&gt;
      &lt;input type=&quot;checkbox&quot;
             name=&quot;reservation_requested_device[]&quot;
             id=&quot;nintendo-wii&quot;
             value=&quot;Nintendo Wii (TV Area)&quot;
             data-checkbox-required=&quot;&quot;
             &gt;
      Nintendo Wii
    &lt;/label&gt;
  &lt;/li&gt;
  &lt;!-- list continues --&gt;
&lt;/ul&gt;</code></pre></noscript></div>

<p>As this is an instance where a user could choose more than one option, the back end needs to be able to capture that information in what’s called an “array”. An array, if you’re unfamiliar, is a collection of values. You’ll notice that the <code>name</code> given to each of these checkbox <code>input</code> elements is the same: “reservation_requested_device[]”. The square brackets (“[]”) at the end of the <code>name</code> are the magic bit that allows the values of <em>each</em> chosen “reservation_requested_device” checkbox to be submitted as the value of “reservation_requested_device”.</p>

<h2 id="applicable-attributes">Applicable Attributes</h2>

<p>Checkbox controls only use a subset of the typical <code>input</code> attributes. In particular, you’ll need to include</p>

<ul>
  <li><code>name</code> - This is the variable name you want to hold the user’s response. As mentioned in <a href="#multiple-choice-checkboxes">the previous section</a>, appending “[]” to the variable name will allow the variable to hold all of the user’s choices as opposed to only the final one.</li>
  <li><code>value</code> - This is the value that should be captured if the user ticks the checkbox.</li>
  <li><code>id</code> - The unique identifier you’re using for the control in order to explicitly associate it with a <code>label</code>.</li>
</ul>

<p>There are a few optional attributes you might consider including as well.</p>

<ul>
  <li><code>checked</code> - Use this null attribute if you want the default state of the checkbox to be ticked. This attribute should be used with caution. <strong>Don’t</strong> use this attribute to automatically check confirmation boxes for things like mailing list opt-ins. <strong>Do</strong> use this attribute when you are displaying sensible default settings or displaying confirmations the user has already made (e.g. in the user’s profile or when re-displaying the form when it has a submission error).</li>
  <li><code>required</code> - Use this to indicate the checkbox must be ticked for the form to be valid. It’s important to note that this attribute is typically only useful in confirmation checkbox scenarios. If you need a user to choose at least one from a multiple choice checkbox collection, it’s useless unless you need them to pick a specific one. To require one (or more) of a multiple choice checkbox group, you currently need to use JavaScript, like <a href="https://github.com/easy-designs/easy-checkbox-required.js">the one the Chattanooga Open Device Lab uses</a>.</li>
</ul>

<h2 id="checkbox-vs-other-controls">Checkbox vs. Other Controls</h2>

<p>Checkboxes excel at allowing users to indicate preference from a pre-defined set of options. But there are other form control types that allow for similar control over user responses. That can make it difficult to decide which element to use.</p>

<h3 id="dropdown-list-select">Dropdown List (<code>select</code>)</h3>

<p>The <code>select</code> element is another tried and true option for allowing users to indicate preference. A simple two-choice <code>select</code> could achieve the same goal as a confirmation checkbox, but it’s a little clunkier. In terms of user interface, <code>select</code> elements require more clicks of your users. They also obscure the complete list of choices from view because only one options is displayed at a time. Their appearance makes them more compact, but can make it difficult to get a complete picture of what choices are available when you can’t see them all.</p>

<p>You can enable multiple choice in a  <code>select</code> element by adding the <code>multiple</code> attribute to it, but depending on the number of <code>option</code> elements, it could also be a little unwieldy. Depending on the size of the <code>select</code> and the number of options, you could also create an inner scroll that could be awkward on certain touch-based devices.</p>

<p>The <code>select</code> element has its place, but should be used sparingly. I’ll go in-depth with <code>select</code> elements in a future post.</p>

<h3 id="choose-one-inputtyperadio">Choose One (<code>input[type=radio]</code>)</h3>

<p>For simple confirmation questions, it’s completely valid to use a radio form control in lieu of a single checkbox. In fact, in some cases, it may offer a more explicit choice for your users. Consider <a href="#fig-2016-01-06-03">this example</a> from <a href="https://order.subway.com">Subway’s online ordering tool</a>.</p>

<figure id="fig-2016-01-06-03" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/03.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/03.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/03.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /><figcaption>In this excerpt from Subway’s online ordering tool, they use a checkbox to confirm the user wants their sandwich toasted.</figcaption></figure>

<p>A checkbox labelled “Fresh Toasted”, isn’t terribly clear. A better approach would be to ask something like “Would you like your sandwich toasted?” with radio controls for “yes” and “no”. Alternately, if they absolutely wanted to keep it as a checkbox, they could use a better label: “Please toast my sandwich”.</p>

<figure id="fig-2016-01-06-04" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/04.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/04.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/04.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-01-06/04.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /><figcaption>An alternate approach to the Subway interface, using radio controls.</figcaption></figure>

<p>Radio controls have their place, but are not often a one-to-one replacement for checkboxes. I will discuss radio controls in greater depth in another post.</p>

<h2 id="check-em-out">Check ’Em Out</h2>

<p>Checkboxes are an invaluable tool in the form building tool chest. Understanding their purpose and capabilities is key to using them properly and ensuring your forms are usable to the broadest number of users.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Strategies for Website Accessibility, for Ecommerce]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/95177-Strategies-for-Website-Accessibility-for-Ecommerce/"/>
				<updated>2015-12-21T16:51:29-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/95177-Strategies-for-Website-Accessibility-for-Ecommerce</id>
				<content type="html"><![CDATA[<p>Accessibility is just good customer service. If you run an commerce shop, you should be following this article’s advice. Heck, if you run <em>any</em> kind of site, you should do it.</p>
<p><a rel="full-article" href="http://www.practicalecommerce.com/articles/95177-Strategies-for-Website-Accessibility-for-Ecommerce">Read on Practical Ecommerce&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Accessibility Advocacy and Pragmatism]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/accessibility-advocacy-and-pragmatism-f848602155ae/"/>
				<updated>2015-12-21T16:49:59-05:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/accessibility-advocacy-and-pragmatism-f848602155ae</id>
				<content type="html"><![CDATA[<p>Some very interesting thoughts about accessibility advocacy from <a href="https://twitter.com/ppatel">Pratik Patel</a>.</p>
<p><a rel="full-article" href="https://medium.com/@ppatel/accessibility-advocacy-and-pragmatism-f848602155ae#.pv2p17sgi">Read on Medium&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
</feed>
