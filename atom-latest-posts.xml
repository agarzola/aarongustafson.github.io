<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Aaron Gustafson - Latest Posts]]></title>
	<link href="http://www.aaron-gustafson.com/atom-latest-posts.xml" rel="self"/>
	<link href="http://www.aaron-gustafson.com/"/>
	<updated>2015-03-23T07:06:34-07:00</updated>
	<id>http://www.aaron-gustafson.com/</id>
	<author>
		<name><![CDATA[Aaron Gustafson]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
		
	
		
	
		
	
		
	
		
	
		
			<entry>
				<title type="html"><![CDATA[Quantity Queries… Where Have You Been All My Life?]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/quantity-queries-where-have-you-been-all-my-life/"/>
				<updated>2015-03-20T08:00:03-07:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/quantity-queries-where-have-you-been-all-my-life</id>
				<content type="html"><![CDATA[<p><a href="http://twitter.com/heydonworks">Heydon Pickering</a>’s <a href="http://alistapart.com/article/quantity-queries-for-css">Quantity Queries for CSS</a> is sheer brilliance and it’s so simple I’m surprised we hadn’t landed on the idea sooner.</p>

<!-- more -->


<p>We&rsquo;ve all experienced this feeling: <em>I have no idea how many modules will be in this block, but I would love to lay them out differently depending on that number.</em> Short of writing exhaustive CSS to (hopefully, optimistically) cover all of your bases, we had not figured out a good way to do this.</p>

<p>Heydon to the rescue!</p>

<p>Here’s Heydon’s first quantity query example:</p>

<div><script src='https://gist.github.com/eddda1f32ed102cedd86.js?file=equal.css'></script>
<noscript><pre><code>li:nth-last-child(6):first-child, 
li:nth-last-child(6):first-child ~ li {
  color: green;
}</code></pre></noscript></div>


<p>With these selectors, the rule set would only apply if the total count of list items was exactly 6. Here’s what he is selecting:</p>

<ol>
<li>A list item (<code>li</code>) that is 6th sibling in a group of list item siblings when counted backwards (<code>:nth-last-child(6)</code>), but only if it is also the first of those siblings (<code>:first-child</code>); and</li>
<li>Any list item (<code>li</code>) siblings that follow the one selected above (<code>~</code>).</li>
</ol>


<p>Brilliant! <a href="http://alistapart.com/article/quantity-queries-for-css#section4">Heydon breaks it down way more eloquently</a> (and with illustrated squid to boot). To use this in your own projects, simply swap the &ldquo;6&rdquo; for whatever count you are looking for it to be equal to.</p>

<p>But Heydon doesn’t stop there. He also gives us ways to test for  more than or equal to and fewer than or equal to a certain number. We’ll start with the <br/>
&ldquo;more than&rdquo; variant (because everyone always wants more):</p>

<div><script src='https://gist.github.com/eddda1f32ed102cedd86.js?file=more-than-or-equal.css'></script>
<noscript><pre><code>li:nth-last-child(n+6),
li:nth-last-child(n+6) ~ li {
  /* properties here */
}</code></pre></noscript></div>


<p>This one is slightly more complex, using the <code>nth-*</code> formula to manage the calculation. In English, this selects:</p>

<ol>
<li>A list item (<code>li</code>) which is the sixth, seventh, eighth, etc. sibling in a collection of list item siblings when counted backwards from the end of that collection (<code>:nth-last-child(n+6)</code>); and</li>
<li>Any list item (<code>li</code>) siblings that follow the one(s) selected above (<code>~</code>).</li>
</ol>


<p>The magic is in the formula: <em>n+6</em>.</p>

<p>The way <code>nth-*</code> formulae work is that the &ldquo;n&rdquo; portion is about dividing the siblings into smaller groups based on the <em>n</em> multiplier. So &ldquo;2n&rdquo; means for every group of 2, &ldquo;3n&rdquo; means for every group of 3, and so on. In Heydon’s case, &ldquo;n&rdquo; simply means for every group of 1. The <em>n</em> multiplier starts as zero (for the first group) and then becomes 1, 2, 3, etc. in succession.</p>

<p>The number added or subtracted from this number (&ldquo;+6&rdquo; in the example) can be though of as the item in the count. Most often we see this in use as &ldquo;2n+2&rdquo; which stands for the second sibling in every group of two. It’s usually common to see this number be smaller than the grouping number (&ldquo;3n+2&rdquo;, &ldquo;5n+3&rdquo;, etc.). In Heydon’s example, however there is no grouping, so that logic doesn’t really apply. Instead you can think of it as simply adding the multiplier to 6: 0+6 (6), 1+6 (7), 2+6 (8), etc.</p>

<p>Now count from the end and then select that and everything that follows and you get a &ldquo;more than or equal to&rdquo; count based on the number (6 in his case, but again you can swap it out). Brilliant!</p>

<p>The final example he gives is for fewer than or equal to a particular number:</p>

<div><script src='https://gist.github.com/eddda1f32ed102cedd86.js?file=fewer-than-or-equal.css'></script>
<noscript><pre><code>li:nth-last-child(-n+6):first-child,
li:nth-last-child(-n+6):first-child ~ li {
  /* properties here */
}</code></pre></noscript></div>


<p>This one is largely the same as the &ldquo;more than&rdquo; example, but the multiplier is reversed (with the minus sign) which means the count runs backward: 0+6 (6), -1+5 (5), -2+6 (4), and so on.</p>

<p>I am just overjoyed with how brilliant this is. I can think of so many places to use it (and will likely be doing so quite soon).</p>

<h2>Bonus: Now with SASS</h2>

<p><a href="https://twitter.com/danielguillan">Daniel Guillan</a> has <a href="https://github.com/danielguillan/quantity-queries">ported this functionality (and more) to SASS</a> using a handful of really straightforward mixins. Here’s a demo:</p>

<p data-height="331" data-theme-id="0" data-slug-hash="GgBOxm" data-default-tab="result" data-user="danielguillan" class='codepen'>See the Pen <a href='http://codepen.io/danielguillan/pen/GgBOxm/'>Quantity Queries Sass mixins demo</a> by Daniel Guillan (<a href='http://codepen.io/danielguillan'>@danielguillan</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>Happy counting!</p>
]]></content>
			</entry>
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
			<entry>
				<title type="html"><![CDATA[Lines in the Sand]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/lines-in-the-sand/"/>
				<updated>2015-03-11T06:21:29-07:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/lines-in-the-sand</id>
				<content type="html"><![CDATA[<p>A new site, <a href="http://breakupwithie8.com/">Break Up with Internet Explorer 8</a> by <a href="http://www.humaan.com/">Humaan</a>, has been making the rounds on the Interwebs of late. It’s cleverly done and an attractive site, but I don’t really agree with the premise:</p>

<blockquote><p>Join the intervention and stop supporting IE8. It&rsquo;s time for an upgrade.</p></blockquote>

<!-- more -->


<p>The reality is that some users don’t have control over the browsers installed on their computers and <a href="http://www.networkworld.com/article/2224510/microsoft-subnet/some-windows-xp-users-just-can-t-afford-to-upgrade.html">IE8 may be the best they can muster</a>. Most of us have had the luxury of moving on, but they haven’t. Does that mean we should banish those users from our sites by treating IE8 like that ex who just won’t take a hint? I don’t think so.</p>

<p>Instead, we should approach this problem rationally. Be the bigger person. Call it <a href="http://bradfrost.com/blog/mobile/support-vs-optimization/">support vs. optimization</a>, call it <a href="http://responsivenews.co.uk/post/18948466399/cutting-the-mustard">cutting the mustard</a>, call it what you will, but by understanding how browsers work, we can reduce our own development headaches and serve more users in the process. Yes, even when they use aging browsers like IE8 or IE7 or (gasp) IE6.</p>

<p>When it comes to HTML and CSS, browsers ignore what they don’t understand. It’s why you can use the <code>section</code> element and the content will still be exposed in Lynx. It’s also why you can use RGBa without IE6 collapsing. <a href="http://adaptivewebdesign.info/1st-edition/chapter-1.html#the-rise-of-tolerance">Fault tolerance is a really powerful tool</a> and is the foundation of progressive enhancement in HTML and CSS. (In JavaScript things are a little more complicated… we have to use <a href="http://learn.jquery.com/code-organization/feature-browser-detection/">feature detection</a>.)</p>

<p>A simple way to rid yourself of IE8 related headaches is to embrace the idea that <a href="http://dowebsitesneedtolookexactlythesameineverybrowser.com/">web pages don’t need to look (or behave) the same in every browser</a> and look for ways to achieve this while still providing access to your content and tools for less-capable browsers and devices. For example:</p>

<div><script src='https://gist.github.com/b9bca995a67ba298225d.js?file=css-filter.html'></script>
<noscript><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;simple.css&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;complex.css&quot; media=&quot;only screen&quot;&gt;</code></pre></noscript></div>


<p>This simple stylesheet setup will deliver only the <code>simple.css</code> file to browsers that are incapable of understanding media queries. Browsers that do understand them will get both stylesheets. Media queries support is an easy line in the sand we can draw because <a href="http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu/79">lack of media query support is in fact the first media query</a>.</p>

<p>Once you’ve done that, it’s as simple as putting all of your advanced styles in the <code>complex.css</code> file. No drama.</p>

<p>On the JavaScript end, you can draw a line in the sand too. Let’s say you don’t want to spend your time debugging JavaScript in IE8. You can just skip it using <a href="http://www.quirksmode.org/css/condcom.html">Conditional Comments</a>:</p>

<div><script src='https://gist.github.com/b9bca995a67ba298225d.js?file=js-filter.html'></script>
<noscript><pre><code>&lt;!--[if gte IE 9]&gt;&lt;!--&gt;
  &lt;script src=&quot;not-for-ie8.js&quot;&gt;&lt;/script&gt;
&lt;!--&lt;![endif]--&gt;</code></pre></noscript></div>


<p>Using an approach like this avoids delivering the contained JavaScript files to IE8 at all, but all other browsers will see them.</p>

<p>If that’s too drastic, use <a href="http://learn.jquery.com/code-organization/feature-browser-detection/">feature detection</a> in your JavaScript files to determine if it is safe to rely on a particular method or capability. Program defensively.</p>

<p>Honestly, I’ve found that approaches like these lead to fewer grey hairs and a lower overall stress level. They make me a happier developer and let me concentrate on building for the future rather than worrying about the past.</p>

<p>But it’s not about breaking up with IE8, it’s about having a realistic and honest relationship with it.</p>
]]></content>
			</entry>
		
	
		
	
		
			<entry>
				<title type="html"><![CDATA[Bidding Farewell to Shirley the Goat]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/bidding-farewell-to-shirley-the-goat/"/>
				<updated>2015-03-09T06:35:42-07:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/bidding-farewell-to-shirley-the-goat</id>
				<content type="html"><![CDATA[<figure id="fig-2015-03-09-02" class="media-container media-container--right">
    <img src="http://cdn.webstandardssherpa.com/c/i/logo.png" alt="The Web Standards Sherpa logo, by Dan Cederholm">
</figure>


<p>It is with a heavy heart that I announce that we are closing <a href="http://webstandardssherpa.com/"><em>Web Standards Sherpa</em></a>. As of April 2, we will be archiving the site in order to keep the valuable insights and techniques shared by our authors available in perpetuity.</p>

<!-- more -->


<p>I am sure I speak for <a href="http://webstandardssherpa.com/about/#staff">our staff and authors</a> when I say this has been a wonderful experience and we are incredibly proud of the work we have done. The <a href="http://webstandardssherpa.com/reviews/">reviews and articles we’ve written</a> and <a href="http://webstandardssherpa.com/ask-the-sherpas/">the questions we’ve answered</a> have provided web designers and developers around the world with relevant, actionable information to help them do their jobs better. And I have no doubt that our readers have helped make the Web better by improving the quality of the products our industry produces.</p>

<p>As one last hurrah—and as a way to raise some funds to pay for the site’s archival &amp; internment—we are collaborating with <a href="http://environmentsforhumans.com/">Environments for Humans</a> to put on <a href="http://environmentsforhumans.com/2015/web-sherpa-summit/">a one-day live virtual conference</a> featuring a handful of our writers and staff giving talks and answering your questions.</p>

<figure id="fig-2015-03-09-02" class="media-container media-container--right">
    <img src="http://webstandardssherpa.com/i/shirley-large.png" alt="Shirley the Goat, the mascot of Web Standards Sherpa.">
</figure>


<p>I am very thankful to <a href="http://webstandardssherpa.com/about/#staff">all of our staff and authors</a> and to you, our readers, for making <em>Web Standards Sherpa</em> such a fun and rewarding endeavor! It was a great run and I count myself lucky to have had a small hand in the creation of so much great content.</p>

<p>You can find all of the details regarding the conference <a href="http://environmentsforhumans.com/2015/web-sherpa-summit/">over on the Environments for Humans website</a>. I hope you’ll consider attending so we can ensure <em>Web Standards Sherpa</em>’s excellent content will remain available for years to come. Use the discount code SHERPA to save 20% off of the ticket price.</p>
]]></content>
			</entry>
		
	
		
	
		
			<entry>
				<title type="html"><![CDATA[Who Should Pay 2: The Hosting]]></title>
				<link href="http://www.aaron-gustafson.com/notebook/who-should-pay-2-the-hosting/"/>
				<updated>2015-03-06T05:39:15-08:00</updated>
				<id>http://www.aaron-gustafson.com/notebook/who-should-pay-2-the-hosting</id>
				<content type="html"><![CDATA[<p>Two weeks ago, I argued that our <a href="http://aaron-gustafson.com/notebook/who-should-pay/">users should never foot the bill for developer convenience</a> and yesterday I stumbled on a post from EllisLab (the makers of ExpressionEngine) that echoes that sentiment, but from a different angle. The title might make you scratch your head: <a href="https://ellislab.com/blog/entry/save-thousands-of-dollars-by-paying-more-for-hosting">Save Thousands of Dollars by Paying More for Hosting</a>.</p>

<!-- more -->


<p>While it sounds counterintuitive, EllisLab’s statement makes sense. It’s all about shifting your perspective from agonizing over every hard cost on the balance sheet to thinking “big picture” about how you are spending your money overall.</p>

<p>Their post makes the case that a low-cost hosting may be cheaper on the surface, but its slow performance will end up costing you more in terms of productivity loss and/or actual billable hours. The comparison they use is modest, but with a big impact: GoDaddy at $59.88/year vs. Nexcess at $8.95/month (still inexpensive, but roughly 2x the cost).</p>

<blockquote><p>Normally, the ExpressionEngine control panel is fast. Zippy even. There aren’t many pages in the control panel that should have an execution time of more than a second. Most pages take a fraction of a second, no fancy caching needed. It’s common to see this in the footer: &ldquo;Script executed in 0.0706 seconds.&rdquo; Sure, add-ons that are bad citizens can slow down the control panel, but typically not to the degree a bad host can.</p>

<p>How about ten seconds per page? No joke, on a recent site we logged in to on GoDaddy, one of the faster pages in the Admin area took ten seconds. The Template Manager took fifteen seconds, the publish page twenty-plus. I felt terrible for the developer and client who were using this site daily. Not only were they having a terrible experience with our software, they were <em>losing money</em> and didn’t even know it.</p></blockquote>

<p>The post then proceeds to work through some estimations of normal workload in the CMS to determine how much money is quietly being drained from a project’s kitty because of a poor hosting decision. I won’t lie, it’s substantial.</p>

<p>Now the EllisLab post is focused more on agency and project costs, but the implications of a slow host extend to our end users too.</p>

<p>Sure, a slow host will delay the delivery of our content and <a href="http://www.nytimes.com/2012/03/01/technology/impatient-web-users-flee-slow-loading-sites.html?pagewanted=all&amp;_r=0">increase the likelihood they will go to a competitor</a>. That’s a given. But a slow host can also drain a mobile device’s battery (because the radio must be kept on longer), which reduces the usefulness of their device.</p>

<p>Slow servers are also incredibly frustrating for users and are inconsiderate of their time. This is one of the points I was harping on in my post: we should not value our time above our customers’ time. When we put our customers’ needs above our own, we make better products and (ultimately) better decisions for our businesses.</p>

<p>Long story short: Shop around for a good price on a speedy server. Your developers, content creators, and (most importantly) your customers will thank you for it.</p>
]]></content>
			</entry>
		
	
		
	
</feed>
